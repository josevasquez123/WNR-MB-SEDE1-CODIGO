
MQTT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000638c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006828  08006828  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006828  08006828  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08006830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  200000e4  08006914  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  08006914  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f021  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e62  00000000  00000000  0002f12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00031f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00032d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001990c  00000000  00000000  00033a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010068  00000000  00000000  0004d38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089af7  00000000  00000000  0005d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6eeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  000e6f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e4 	.word	0x200000e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08006480 	.word	0x08006480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e8 	.word	0x200000e8
 8000148:	08006480 	.word	0x08006480

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <messageArrived>:
{
	(char*)"stdout-subscriber", 1, (char*)"\n", QOS1, "", "", (char*)"localhost", 1883, 0
};

void messageArrived(MessageData* md)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	//unsigned char testbuffer[100];
	MQTTMessage* message = md->message;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	627b      	str	r3, [r7, #36]	; 0x24
	MQTTString* topic = md->topicName;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	623b      	str	r3, [r7, #32]
	char msg_payload[10];
	char msg_topic[10];
	sprintf(msg_topic, "%.*s", (int)topic->lenstring.len,(char*)topic->lenstring.data);
 8000184:	6a3b      	ldr	r3, [r7, #32]
 8000186:	685a      	ldr	r2, [r3, #4]
 8000188:	6a3b      	ldr	r3, [r7, #32]
 800018a:	689b      	ldr	r3, [r3, #8]
 800018c:	f107 0008 	add.w	r0, r7, #8
 8000190:	491a      	ldr	r1, [pc, #104]	; (80001fc <messageArrived+0x8c>)
 8000192:	f005 f817 	bl	80051c4 <siprintf>
	sprintf(msg_payload, "%.*s", (int)message->payloadlen, (char*)message->payload);
 8000196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000198:	68db      	ldr	r3, [r3, #12]
 800019a:	461a      	mov	r2, r3
 800019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	f107 0014 	add.w	r0, r7, #20
 80001a4:	4915      	ldr	r1, [pc, #84]	; (80001fc <messageArrived+0x8c>)
 80001a6:	f005 f80d 	bl	80051c4 <siprintf>
	printf("%s\r\n", msg_payload);
 80001aa:	f107 0314 	add.w	r3, r7, #20
 80001ae:	4619      	mov	r1, r3
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <messageArrived+0x90>)
 80001b2:	f004 ff79 	bl	80050a8 <iprintf>
	printf("%s\r\n", msg_topic);
 80001b6:	f107 0308 	add.w	r3, r7, #8
 80001ba:	4619      	mov	r1, r3
 80001bc:	4810      	ldr	r0, [pc, #64]	; (8000200 <messageArrived+0x90>)
 80001be:	f004 ff73 	bl	80050a8 <iprintf>

	if(strcmp(msg_payload, "true")==0){
 80001c2:	f107 0314 	add.w	r3, r7, #20
 80001c6:	490f      	ldr	r1, [pc, #60]	; (8000204 <messageArrived+0x94>)
 80001c8:	4618      	mov	r0, r3
 80001ca:	f7ff ffbf 	bl	800014c <strcmp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d103      	bne.n	80001dc <messageArrived+0x6c>
		printf("ga\r\n");
 80001d4:	480c      	ldr	r0, [pc, #48]	; (8000208 <messageArrived+0x98>)
 80001d6:	f004 ffed 	bl	80051b4 <puts>
	else{
		printf("%.*s%s", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
	}*/

	//fflush(stdout);
}
 80001da:	e00b      	b.n	80001f4 <messageArrived+0x84>
	else if(strcmp(msg_payload, "false")==0){
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	490a      	ldr	r1, [pc, #40]	; (800020c <messageArrived+0x9c>)
 80001e2:	4618      	mov	r0, r3
 80001e4:	f7ff ffb2 	bl	800014c <strcmp>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d102      	bne.n	80001f4 <messageArrived+0x84>
		printf("ga2\r\n");
 80001ee:	4808      	ldr	r0, [pc, #32]	; (8000210 <messageArrived+0xa0>)
 80001f0:	f004 ffe0 	bl	80051b4 <puts>
}
 80001f4:	bf00      	nop
 80001f6:	3728      	adds	r7, #40	; 0x28
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	080064c0 	.word	0x080064c0
 8000200:	080064c8 	.word	0x080064c8
 8000204:	080064d0 	.word	0x080064d0
 8000208:	080064d8 	.word	0x080064d8
 800020c:	080064dc 	.word	0x080064dc
 8000210:	080064e4 	.word	0x080064e4

08000214 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800021c:	1d39      	adds	r1, r7, #4
 800021e:	f04f 33ff 	mov.w	r3, #4294967295
 8000222:	2201      	movs	r2, #1
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <__io_putchar+0x20>)
 8000226:	f004 fd7f 	bl	8004d28 <HAL_UART_Transmit>
  return ch;
 800022a:	687b      	ldr	r3, [r7, #4]
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000158 	.word	0x20000158

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b0d0      	sub	sp, #320	; 0x140
 800023c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f003 fd89 	bl	8003d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f8a1 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f94d 	bl	80004e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800024a:	f000 f8e3 	bl	8000414 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800024e:	f000 f91f 	bl	8000490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  W5500Init();
 8000252:	f002 ff67 	bl	8003124 <W5500Init>

  ctlnetwork(CN_SET_NETINFO, (void*) &WIZNETINFO);
 8000256:	4941      	ldr	r1, [pc, #260]	; (800035c <main+0x124>)
 8000258:	2000      	movs	r0, #0
 800025a:	f003 f96f 	bl	800353c <ctlnetwork>

  PHYStatusCheck();
 800025e:	f000 f98d 	bl	800057c <PHYStatusCheck>
  PrintPHYConf();
 8000262:	f000 f9b1 	bl	80005c8 <PrintPHYConf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Network n;
  Client c;
  unsigned char buf[100];
  int rc = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  n.my_socket = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  NewNetwork(&n);
 8000272:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f8b8 	bl	80013ec <NewNetwork>
  ConnectNetwork(&n, MQTTBroker, targetPort);
 800027c:	4b38      	ldr	r3, [pc, #224]	; (8000360 <main+0x128>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000284:	4937      	ldr	r1, [pc, #220]	; (8000364 <main+0x12c>)
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f929 	bl	80014de <ConnectNetwork>
  MQTTClient(&c,&n,1000,buf,100,tempBuffer,2048);
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8000294:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8000298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800029c:	9202      	str	r2, [sp, #8]
 800029e:	4a32      	ldr	r2, [pc, #200]	; (8000368 <main+0x130>)
 80002a0:	9201      	str	r2, [sp, #4]
 80002a2:	2264      	movs	r2, #100	; 0x64
 80002a4:	9200      	str	r2, [sp, #0]
 80002a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002aa:	f000 fbdd 	bl	8000a68 <MQTTClient>

  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80002ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002b6:	4a2d      	ldr	r2, [pc, #180]	; (800036c <main+0x134>)
 80002b8:	4618      	mov	r0, r3
 80002ba:	4611      	mov	r1, r2
 80002bc:	2358      	movs	r3, #88	; 0x58
 80002be:	461a      	mov	r2, r3
 80002c0:	f004 fedc 	bl	800507c <memcpy>
  data.willFlag = 0;
 80002c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002cc:	2200      	movs	r2, #0
 80002ce:	76da      	strb	r2, [r3, #27]
  data.MQTTVersion = 3;
 80002d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002d8:	2203      	movs	r2, #3
 80002da:	721a      	strb	r2, [r3, #8]
  data.clientID.cstring = opts.clientid;
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <main+0x138>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002e8:	60da      	str	r2, [r3, #12]
  data.keepAliveInterval = 60;
 80002ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002f2:	223c      	movs	r2, #60	; 0x3c
 80002f4:	831a      	strh	r2, [r3, #24]
  data.cleansession = 1;
 80002f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002fe:	2201      	movs	r2, #1
 8000300:	769a      	strb	r2, [r3, #26]

  rc = MQTTConnect(&c, &data);
 8000302:	1d3a      	adds	r2, r7, #4
 8000304:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fed8 	bl	80010c0 <MQTTConnect>
 8000310:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  printf("Connected %d\r\n", rc);
 8000314:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000318:	4816      	ldr	r0, [pc, #88]	; (8000374 <main+0x13c>)
 800031a:	f004 fec5 	bl	80050a8 <iprintf>
  opts.showtopics = 1;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <main+0x138>)
 8000320:	2201      	movs	r2, #1
 8000322:	621a      	str	r2, [r3, #32]

  printf("Subscribing to %s\r\n", "Hola/test");
 8000324:	4914      	ldr	r1, [pc, #80]	; (8000378 <main+0x140>)
 8000326:	4815      	ldr	r0, [pc, #84]	; (800037c <main+0x144>)
 8000328:	f004 febe 	bl	80050a8 <iprintf>
  rc = MQTTSubscribe(&c, "Hola/test", opts.qos, messageArrived);
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <main+0x138>)
 800032e:	7b1a      	ldrb	r2, [r3, #12]
 8000330:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <main+0x148>)
 8000336:	4910      	ldr	r1, [pc, #64]	; (8000378 <main+0x140>)
 8000338:	f000 ff48 	bl	80011cc <MQTTSubscribe>
 800033c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  printf("Subscribed %d\r\n", rc);
 8000340:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000344:	480f      	ldr	r0, [pc, #60]	; (8000384 <main+0x14c>)
 8000346:	f004 feaf 	bl	80050a8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MQTTYield(&c, 1000);
 800034a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800034e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fe66 	bl	8001024 <MQTTYield>
 8000358:	e7f7      	b.n	800034a <main+0x112>
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	2000001c 	.word	0x2000001c
 8000364:	20000018 	.word	0x20000018
 8000368:	200001a0 	.word	0x200001a0
 800036c:	0800652c 	.word	0x0800652c
 8000370:	20000020 	.word	0x20000020
 8000374:	080064ec 	.word	0x080064ec
 8000378:	080064fc 	.word	0x080064fc
 800037c:	08006508 	.word	0x08006508
 8000380:	08000171 	.word	0x08000171
 8000384:	0800651c 	.word	0x0800651c

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b090      	sub	sp, #64	; 0x40
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2228      	movs	r2, #40	; 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f004 fe7e 	bl	8005098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	2302      	movs	r3, #2
 80003be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 ffc5 	bl	8004360 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003dc:	f000 f938 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 fa32 	bl	8004864 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000406:	f000 f923 	bl	8000650 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_SPI1_Init+0x74>)
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <MX_SPI1_Init+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_SPI1_Init+0x74>)
 8000420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_SPI1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_SPI1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_SPI1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_SPI1_Init+0x74>)
 8000440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <MX_SPI1_Init+0x74>)
 8000448:	2208      	movs	r2, #8
 800044a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_SPI1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <MX_SPI1_Init+0x74>)
 8000460:	220a      	movs	r2, #10
 8000462:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000464:	4808      	ldr	r0, [pc, #32]	; (8000488 <MX_SPI1_Init+0x74>)
 8000466:	f004 fb8b 	bl	8004b80 <HAL_SPI_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000470:	f000 f8ee 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <MX_SPI1_Init+0x74>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b03      	ldr	r3, [pc, #12]	; (8000488 <MX_SPI1_Init+0x74>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000482:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000100 	.word	0x20000100
 800048c:	40013000 	.word	0x40013000

08000490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <MX_USART2_UART_Init+0x50>)
 8000498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 800049c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004c8:	f004 fbde 	bl	8004c88 <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004d2:	f000 f8bd 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000158 	.word	0x20000158
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_GPIO_Init+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <MX_GPIO_Init+0x90>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_GPIO_Init+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0320 	and.w	r3, r3, #32
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_GPIO_Init+0x90>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a17      	ldr	r2, [pc, #92]	; (8000574 <MX_GPIO_Init+0x90>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_GPIO_Init+0x90>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_GPIO_Init+0x90>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a11      	ldr	r2, [pc, #68]	; (8000574 <MX_GPIO_Init+0x90>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_GPIO_Init+0x90>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0308 	and.w	r3, r3, #8
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_GPIO_Init+0x94>)
 8000548:	f003 fef2 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 800054c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2302      	movs	r3, #2
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_GPIO_Init+0x94>)
 8000566:	f003 fd5f 	bl	8004028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056a:	bf00      	nop
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	40010c00 	.word	0x40010c00

0800057c <PHYStatusCheck>:

/* USER CODE BEGIN 4 */
void PHYStatusCheck(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8000582:	480e      	ldr	r0, [pc, #56]	; (80005bc <PHYStatusCheck+0x40>)
 8000584:	f004 fd90 	bl	80050a8 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	4619      	mov	r1, r3
 800058c:	200f      	movs	r0, #15
 800058e:	f002 fef3 	bl	8003378 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d106      	bne.n	80005a6 <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <PHYStatusCheck+0x44>)
 800059a:	f004 fd85 	bl	80050a8 <iprintf>
			HAL_Delay(1500);
 800059e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005a2:	f003 fc39 	bl	8003e18 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0ea      	beq.n	8000582 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <PHYStatusCheck+0x48>)
 80005ae:	f004 fd7b 	bl	80050a8 <iprintf>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	08006584 	.word	0x08006584
 80005c0:	080065ac 	.word	0x080065ac
 80005c4:	080065c0 	.word	0x080065c0

080005c8 <PrintPHYConf>:

void PrintPHYConf(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	200b      	movs	r0, #11
 80005d4:	f002 fed0 	bl	8003378 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 80005d8:	793b      	ldrb	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 80005de:	4814      	ldr	r0, [pc, #80]	; (8000630 <PrintPHYConf+0x68>)
 80005e0:	f004 fd62 	bl	80050a8 <iprintf>
 80005e4:	e002      	b.n	80005ec <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <PrintPHYConf+0x6c>)
 80005e8:	f004 fd5e 	bl	80050a8 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d103      	bne.n	80005fa <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <PrintPHYConf+0x70>)
 80005f4:	f004 fd58 	bl	80050a8 <iprintf>
 80005f8:	e002      	b.n	8000600 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <PrintPHYConf+0x74>)
 80005fc:	f004 fd54 	bl	80050a8 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d103      	bne.n	800060e <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <PrintPHYConf+0x78>)
 8000608:	f004 fd4e 	bl	80050a8 <iprintf>
 800060c:	e002      	b.n	8000614 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <PrintPHYConf+0x7c>)
 8000610:	f004 fd4a 	bl	80050a8 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <PrintPHYConf+0x80>)
 800061c:	f004 fd44 	bl	80050a8 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000620:	e002      	b.n	8000628 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <PrintPHYConf+0x84>)
 8000624:	f004 fd40 	bl	80050a8 <iprintf>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	080065dc 	.word	0x080065dc
 8000634:	08006600 	.word	0x08006600
 8000638:	08006620 	.word	0x08006620
 800063c:	0800663c 	.word	0x0800663c
 8000640:	0800665c 	.word	0x0800665c
 8000644:	08006670 	.word	0x08006670
 8000648:	08006684 	.word	0x08006684
 800064c:	08006694 	.word	0x08006694

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_MspInit+0x5c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x5c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_MspInit+0x60>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_MspInit+0x60>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <HAL_SPI_MspInit+0x88>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d12f      	bne.n	8000740 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_SPI_MspInit+0x8c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <HAL_SPI_MspInit+0x8c>)
 80006e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_SPI_MspInit+0x8c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_SPI_MspInit+0x8c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <HAL_SPI_MspInit+0x8c>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_SPI_MspInit+0x8c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <HAL_SPI_MspInit+0x90>)
 8000724:	f003 fc80 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_SPI_MspInit+0x90>)
 800073c:	f003 fc74 	bl	8004028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40013000 	.word	0x40013000
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <HAL_UART_MspInit+0x88>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d12f      	bne.n	80007d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 800077a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007a4:	2304      	movs	r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <HAL_UART_MspInit+0x90>)
 80007b8:	f003 fc36 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007bc:	2308      	movs	r3, #8
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_UART_MspInit+0x90>)
 80007d0:	f003 fc2a 	bl	8004028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010800 	.word	0x40010800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MilliTimer_Handler();
 800082e:	f000 fd73 	bl	8001318 <MilliTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000832:	f003 fad5 	bl	8003de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e00a      	b.n	8000862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800084c:	f3af 8000 	nop.w
 8000850:	4601      	mov	r1, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	60ba      	str	r2, [r7, #8]
 8000858:	b2ca      	uxtb	r2, r1
 800085a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	3301      	adds	r3, #1
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbf0      	blt.n	800084c <_read+0x12>
  }

  return len;
 800086a:	687b      	ldr	r3, [r7, #4]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e009      	b.n	800089a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	60ba      	str	r2, [r7, #8]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fcc0 	bl	8000214 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	dbf1      	blt.n	8000886 <_write+0x12>
  }
  return len;
 80008a2:	687b      	ldr	r3, [r7, #4]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_close>:

int _close(int file)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d2:	605a      	str	r2, [r3, #4]
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <_isatty>:

int _isatty(int file)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <_sbrk+0x5c>)
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <_sbrk+0x60>)
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <_sbrk+0x64>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <_sbrk+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	429a      	cmp	r2, r3
 800093a:	d207      	bcs.n	800094c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800093c:	f004 fb74 	bl	8005028 <__errno>
 8000940:	4603      	mov	r3, r0
 8000942:	220c      	movs	r2, #12
 8000944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e009      	b.n	8000960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_sbrk+0x64>)
 800095c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20005000 	.word	0x20005000
 800096c:	00000400 	.word	0x00000400
 8000970:	200009a0 	.word	0x200009a0
 8000974:	200009e8 	.word	0x200009e8

08000978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <NewMessageData>:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/

#include "MQTTClient.h"

void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessgage) {
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	605a      	str	r2, [r3, #4]
    md->message = aMessgage;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <getNextPacketId>:


int getNextPacketId(Client *c) {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d003      	beq.n	80009c2 <getNextPacketId+0x1c>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	e000      	b.n	80009c4 <getNextPacketId+0x1e>
 80009c2:	2301      	movs	r3, #1
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <sendPacket>:


int sendPacket(Client* c, int length, Timer* timer)
{
 80009d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d8:	b087      	sub	sp, #28
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	617b      	str	r3, [r7, #20]
        sent = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]

    while (sent < length && !expired(timer))
 80009ec:	e018      	b.n	8000a20 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, left_ms(timer));
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009f2:	689c      	ldr	r4, [r3, #8]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	691a      	ldr	r2, [r3, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	18d6      	adds	r6, r2, r3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 fcd3 	bl	80013ac <left_ms>
 8000a06:	4603      	mov	r3, r0
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	4631      	mov	r1, r6
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	47a0      	blx	r4
 8000a10:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0e      	blt.n	8000a36 <sendPacket+0x60>
            break;
        sent += rc;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
    while (sent < length && !expired(timer))
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	da07      	bge.n	8000a38 <sendPacket+0x62>
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 fc83 	bl	8001334 <expired>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0dc      	beq.n	80009ee <sendPacket+0x18>
 8000a34:	e000      	b.n	8000a38 <sendPacket+0x62>
            break;
 8000a36:	bf00      	nop
    }
    if (sent == length)
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d10b      	bne.n	8000a58 <sendPacket+0x82>
    {
        countdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have SUCCESSSfully sent the packet
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f000 fc97 	bl	8001380 <countdown>
        rc = SUCCESSS;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e002      	b.n	8000a5e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	617b      	str	r3, [r7, #20]
    return rc;
 8000a5e:	697b      	ldr	r3, [r7, #20]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a68 <MQTTClient>:


void MQTTClient(Client* c, Network* network, unsigned int command_timeout_ms, unsigned char* buf, size_t buf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e009      	b.n	8000a96 <MQTTClient+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3304      	adds	r3, #4
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	ddf2      	ble.n	8000a82 <MQTTClient+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
    c->buf = buf;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	611a      	str	r2, [r3, #16]
    c->buf_size = buf_size;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6a3a      	ldr	r2, [r7, #32]
 8000aac:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab2:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ab8:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	64da      	str	r2, [r3, #76]	; 0x4c
    InitTimer(&c->ping_timer);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3354      	adds	r3, #84	; 0x54
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fc7f 	bl	80013d4 <InitTimer>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <decodePacket>:


int decodePacket(Client* c, int* value, int timeout)
{
 8000ade:	b590      	push	{r4, r7, lr}
 8000ae0:	b08b      	sub	sp, #44	; 0x2c
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	3301      	adds	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
 8000b08:	6a3a      	ldr	r2, [r7, #32]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dd03      	ble.n	8000b18 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	61bb      	str	r3, [r7, #24]
            goto exit;
 8000b16:	e021      	b.n	8000b5c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b1c:	685c      	ldr	r4, [r3, #4]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000b22:	f107 0117 	add.w	r1, r7, #23
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	47a0      	blx	r4
 8000b2c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d112      	bne.n	8000b5a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b40:	fb01 f303 	mul.w	r3, r1, r3
 8000b44:	441a      	add	r2, r3
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	01db      	lsls	r3, r3, #7
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	dbd1      	blt.n	8000afc <decodePacket+0x1e>
exit:
 8000b58:	e000      	b.n	8000b5c <decodePacket+0x7e>
            goto exit;
 8000b5a:	bf00      	nop
    return len;
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	372c      	adds	r7, #44	; 0x2c
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}

08000b66 <readPacket>:


int readPacket(Client* c, Timer* timer)
{
 8000b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b68:	b089      	sub	sp, #36	; 0x24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
    int len = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, left_ms(timer)) != 1)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b86:	685c      	ldr	r4, [r3, #4]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	695e      	ldr	r6, [r3, #20]
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f000 fc0b 	bl	80013ac <left_ms>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4631      	mov	r1, r6
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	47a0      	blx	r4
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d13b      	bne.n	8000c1e <readPacket+0xb8>
        goto exit;

    len = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, left_ms(timer));
 8000baa:	68b8      	ldr	r0, [r7, #8]
 8000bac:	f000 fbfe 	bl	80013ac <left_ms>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff ff90 	bl	8000ade <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 ff5a 	bl	8001a82 <MQTTPacket_encode>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, left_ms(timer)) != rem_len))
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	dd16      	ble.n	8000c0a <readPacket+0xa4>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000be0:	685c      	ldr	r4, [r3, #4]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	18d6      	adds	r6, r2, r3
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	68b8      	ldr	r0, [r7, #8]
 8000bf4:	f000 fbda 	bl	80013ac <left_ms>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	4628      	mov	r0, r5
 8000c00:	47a0      	blx	r4
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d10b      	bne.n	8000c22 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8000c12:	7d3b      	ldrb	r3, [r7, #20]
 8000c14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	e002      	b.n	8000c24 <readPacket+0xbe>
        goto exit;
 8000c1e:	bf00      	nop
 8000c20:	e000      	b.n	8000c24 <readPacket+0xbe>
        goto exit;
 8000c22:	bf00      	nop
exit:
    return rc;
 8000c24:	69fb      	ldr	r3, [r7, #28]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c2e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b087      	sub	sp, #28
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	461a      	mov	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8000c4e:	e039      	b.n	8000cc4 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b2f      	cmp	r3, #47	; 0x2f
 8000c56:	d103      	bne.n	8000c60 <isTopicMatched+0x32>
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b2f      	cmp	r3, #47	; 0x2f
 8000c5e:	d13a      	bne.n	8000cd6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b2b      	cmp	r3, #43	; 0x2b
 8000c66:	d009      	beq.n	8000c7c <isTopicMatched+0x4e>
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b23      	cmp	r3, #35	; 0x23
 8000c6e:	d005      	beq.n	8000c7c <isTopicMatched+0x4e>
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d12e      	bne.n	8000cda <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2b      	cmp	r3, #43	; 0x2b
 8000c82:	d112      	bne.n	8000caa <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8000c8a:	e005      	b.n	8000c98 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	3301      	adds	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d20b      	bcs.n	8000cb8 <isTopicMatched+0x8a>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ca6:	d1f1      	bne.n	8000c8c <isTopicMatched+0x5e>
 8000ca8:	e006      	b.n	8000cb8 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b23      	cmp	r3, #35	; 0x23
 8000cb0:	d102      	bne.n	8000cb8 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
        curf++;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
        curn++;
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <isTopicMatched+0xae>
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3bd      	bcc.n	8000c50 <isTopicMatched+0x22>
 8000cd4:	e002      	b.n	8000cdc <isTopicMatched+0xae>
            break;
 8000cd6:	bf00      	nop
 8000cd8:	e000      	b.n	8000cdc <isTopicMatched+0xae>
            break;
 8000cda:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d105      	bne.n	8000cf0 <isTopicMatched+0xc2>
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <isTopicMatched+0xc2>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <isTopicMatched+0xc4>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <deliverMessage>:


int deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b08a      	sub	sp, #40	; 0x28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
 8000d14:	e03f      	b.n	8000d96 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d034      	beq.n	8000d90 <deliverMessage+0x92>
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4413      	add	r3, r2
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4619      	mov	r1, r3
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f001 f86f 	bl	8001e18 <MQTTPacket_equals>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10c      	bne.n	8000d5a <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3304      	adds	r3, #4
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff6d 	bl	8000c2e <isTopicMatched>
 8000d54:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d01a      	beq.n	8000d90 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	3304      	adds	r3, #4
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4413      	add	r3, r2
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d012      	beq.n	8000d90 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe06 	bl	8000984 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4413      	add	r3, r2
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f107 0218 	add.w	r2, r7, #24
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4798      	blx	r3
                rc = SUCCESSS;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	3301      	adds	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	ddbc      	ble.n	8000d16 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da2:	d112      	bne.n	8000dca <deliverMessage+0xcc>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00e      	beq.n	8000dca <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fde5 	bl	8000984 <NewMessageData>
        c->defaultMessageHandler(&md);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f107 0210 	add.w	r2, r7, #16
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4798      	blx	r3
        rc = SUCCESSS;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8000dca:	6a3b      	ldr	r3, [r7, #32]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <keepalive>:


int keepalive(Client* c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	617b      	str	r3, [r7, #20]
    if (c->keepAliveInterval == 0)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
        goto exit;
 8000dee:	e033      	b.n	8000e58 <keepalive+0x84>
    }

    if (expired(&c->ping_timer))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3354      	adds	r3, #84	; 0x54
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fa9d 	bl	8001334 <expired>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d02a      	beq.n	8000e56 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d126      	bne.n	8000e56 <keepalive+0x82>
        {
            Timer timer;
            InitTimer(&timer);
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fae1 	bl	80013d4 <InitTimer>
            countdown_ms(&timer, 1000);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fa9e 	bl	800135c <countdown_ms>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f000 fd5d 	bl	80018ea <MQTTSerialize_pingreq>
 8000e30:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	dd0f      	ble.n	8000e58 <keepalive+0x84>
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fdc8 	bl	80009d6 <sendPacket>
 8000e46:	6178      	str	r0, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d104      	bne.n	8000e58 <keepalive+0x84>
                c->ping_outstanding = 1;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	771a      	strb	r2, [r3, #28]
 8000e54:	e000      	b.n	8000e58 <keepalive+0x84>
        }
    }

exit:
 8000e56:	bf00      	nop
    return rc;
 8000e58:	697b      	ldr	r3, [r7, #20]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <cycle>:


int cycle(Client* c, Timer* timer)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b095      	sub	sp, #84	; 0x54
 8000e68:	af06      	add	r7, sp, #24
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fe78 	bl	8000b66 <readPacket>
 8000e76:	4603      	mov	r3, r0
 8000e78:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8000e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e84:	3b02      	subs	r3, #2
 8000e86:	2b0b      	cmp	r3, #11
 8000e88:	f200 80bc 	bhi.w	8001004 <cycle+0x1a0>
 8000e8c:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <cycle+0x30>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08001005 	.word	0x08001005
 8000e98:	08000ec5 	.word	0x08000ec5
 8000e9c:	08001005 	.word	0x08001005
 8000ea0:	08000f85 	.word	0x08000f85
 8000ea4:	08001005 	.word	0x08001005
 8000ea8:	08001005 	.word	0x08001005
 8000eac:	08001005 	.word	0x08001005
 8000eb0:	08001005 	.word	0x08001005
 8000eb4:	08001005 	.word	0x08001005
 8000eb8:	08001005 	.word	0x08001005
 8000ebc:	08001005 	.word	0x08001005
 8000ec0:	08000ff7 	.word	0x08000ff7
            break;
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            if (MQTTDeserialize_publish((unsigned char*)&msg.dup, (int*)&msg.qos, (unsigned char*)&msg.retained, (unsigned short*)&msg.id, &topicName,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish((unsigned char*)&msg.dup, (int*)&msg.qos, (unsigned char*)&msg.retained, (unsigned short*)&msg.id, &topicName,
 8000ecc:	4616      	mov	r6, r2
 8000ece:	f107 0210 	add.w	r2, r7, #16
 8000ed2:	1d15      	adds	r5, r2, #4
 8000ed4:	f107 0210 	add.w	r2, r7, #16
 8000ed8:	1c54      	adds	r4, r2, #1
 8000eda:	f107 0110 	add.w	r1, r7, #16
 8000ede:	f107 0210 	add.w	r2, r7, #16
 8000ee2:	1c90      	adds	r0, r2, #2
 8000ee4:	9604      	str	r6, [sp, #16]
 8000ee6:	9303      	str	r3, [sp, #12]
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	330c      	adds	r3, #12
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	462b      	mov	r3, r5
 8000f00:	4622      	mov	r2, r4
 8000f02:	f000 fd01 	bl	8001908 <MQTTDeserialize_publish>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d17f      	bne.n	800100c <cycle+0x1a8>
                goto exit;
            deliverMessage(c, &topicName, &msg);
 8000f0c:	f107 0210 	add.w	r2, r7, #16
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fef1 	bl	8000cfe <deliverMessage>
            if (msg.qos != QOS0)
 8000f1c:	7c3b      	ldrb	r3, [r7, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d06d      	beq.n	8000ffe <cycle+0x19a>
            {
                if (msg.qos == QOS1)
 8000f22:	7c3b      	ldrb	r3, [r7, #16]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d10c      	bne.n	8000f42 <cycle+0xde>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6918      	ldr	r0, [r3, #16]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	4619      	mov	r1, r3
 8000f32:	8abb      	ldrh	r3, [r7, #20]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	2204      	movs	r2, #4
 8000f3a:	f000 ffa4 	bl	8001e86 <MQTTSerialize_ack>
 8000f3e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f40:	e00e      	b.n	8000f60 <cycle+0xfc>
                else if (msg.qos == QOS2)
 8000f42:	7c3b      	ldrb	r3, [r7, #16]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d10b      	bne.n	8000f60 <cycle+0xfc>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6918      	ldr	r0, [r3, #16]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4619      	mov	r1, r3
 8000f52:	8abb      	ldrh	r3, [r7, #20]
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f000 ff94 	bl	8001e86 <MQTTSerialize_ack>
 8000f5e:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dc03      	bgt.n	8000f6e <cycle+0x10a>
                    rc = FAILURE;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f6c:	e005      	b.n	8000f7a <cycle+0x116>
                   else
                       rc = sendPacket(c, len, timer);
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fd2f 	bl	80009d6 <sendPacket>
 8000f78:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d13d      	bne.n	8000ffe <cycle+0x19a>
                    goto exit; // there was a problem
 8000f82:	e044      	b.n	800100e <cycle+0x1aa>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695c      	ldr	r4, [r3, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f107 020e 	add.w	r2, r7, #14
 8000f90:	f107 010d 	add.w	r1, r7, #13
 8000f94:	f107 000c 	add.w	r0, r7, #12
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	f000 fd26 	bl	80019ec <MQTTDeserialize_ack>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d003      	beq.n	8000fae <cycle+0x14a>
                rc = FAILURE;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
 8000fac:	e01e      	b.n	8000fec <cycle+0x188>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6918      	ldr	r0, [r3, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	f000 ff61 	bl	8001e86 <MQTTSerialize_ack>
 8000fc4:	6378      	str	r0, [r7, #52]	; 0x34
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dc03      	bgt.n	8000fd4 <cycle+0x170>
                rc = FAILURE;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd2:	e00b      	b.n	8000fec <cycle+0x188>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff fcfc 	bl	80009d6 <sendPacket>
 8000fde:	6338      	str	r0, [r7, #48]	; 0x30
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <cycle+0x188>
                rc = FAILURE; // there was a problem
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8000fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff2:	d106      	bne.n	8001002 <cycle+0x19e>
                goto exit; // there was a problem
 8000ff4:	e00b      	b.n	800100e <cycle+0x1aa>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	771a      	strb	r2, [r3, #28]
            break;
 8000ffc:	e002      	b.n	8001004 <cycle+0x1a0>
            break;
 8000ffe:	bf00      	nop
 8001000:	e000      	b.n	8001004 <cycle+0x1a0>
            break;
 8001002:	bf00      	nop
    }
    keepalive(c);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff fee5 	bl	8000dd4 <keepalive>
 800100a:	e000      	b.n	800100e <cycle+0x1aa>
                goto exit;
 800100c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <cycle+0x1b4>
        rc = packet_type;
 8001014:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8001018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800101a:	4618      	mov	r0, r3
 800101c:	373c      	adds	r7, #60	; 0x3c
 800101e:	46bd      	mov	sp, r7
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001022:	bf00      	nop

08001024 <MQTTYield>:


int MQTTYield(Client* c, int timeout_ms)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    Timer timer;

    InitTimer(&timer);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9cc 	bl	80013d4 <InitTimer>
    countdown_ms(&timer, timeout_ms);
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f989 	bl	800135c <countdown_ms>
    while (!expired(&timer))
 800104a:	e00d      	b.n	8001068 <MQTTYield+0x44>
    {
        if (cycle(c, &timer) == FAILURE)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff06 	bl	8000e64 <cycle>
 8001058:	4603      	mov	r3, r0
 800105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105e:	d103      	bne.n	8001068 <MQTTYield+0x44>
        {
            rc = FAILURE;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	617b      	str	r3, [r7, #20]
            break;
 8001066:	e007      	b.n	8001078 <MQTTYield+0x54>
    while (!expired(&timer))
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f961 	bl	8001334 <expired>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0e9      	beq.n	800104c <MQTTYield+0x28>
        }
    }
    return rc;
 8001078:	697b      	ldr	r3, [r7, #20]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <waitfor>:


// only used in single-threaded mode where one command at a time is in process
int waitfor(Client* c, int packet_type, Timer* timer)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	617b      	str	r3, [r7, #20]

    do
    {
        if (expired(timer))
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f94d 	bl	8001334 <expired>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d109      	bne.n	80010b4 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff fede 	bl	8000e64 <cycle>
 80010a8:	6178      	str	r0, [r7, #20]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d1f0      	bne.n	8001094 <waitfor+0x12>
 80010b2:	e000      	b.n	80010b6 <waitfor+0x34>
            break; // we timed out
 80010b4:	bf00      	nop

    return rc;
 80010b6:	697b      	ldr	r3, [r7, #20]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MQTTConnect>:


int MQTTConnect(Client* c, MQTTPacket_connectData* options)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09e      	sub	sp, #120	; 0x78
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 80010d0:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <MQTTConnect+0x108>)
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4611      	mov	r1, r2
 80010d8:	2258      	movs	r2, #88	; 0x58
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 ffce 	bl	800507c <memcpy>
    int len = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	673b      	str	r3, [r7, #112]	; 0x70

    InitTimer(&connect_timer);
 80010e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f973 	bl	80013d4 <InitTimer>
    countdown_ms(&connect_timer, c->command_timeout_ms);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f92f 	bl	800135c <countdown_ms>

    if (c->isconnected) // don't send connect packet again if we are already connected
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d150      	bne.n	80011a8 <MQTTConnect+0xe8>
        goto exit;

    if (options == 0)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <MQTTConnect+0x52>
        options = &default_options; // set default options if none were supplied
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	8b1b      	ldrh	r3, [r3, #24]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
    countdown(&c->ping_timer, c->keepAliveInterval);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f000 f929 	bl	8001380 <countdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6918      	ldr	r0, [r3, #16]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f000 fa5d 	bl	80015f8 <MQTTSerialize_connect>
 800113e:	6738      	str	r0, [r7, #112]	; 0x70
 8001140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001142:	2b00      	cmp	r3, #0
 8001144:	dd32      	ble.n	80011ac <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8001146:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800114a:	461a      	mov	r2, r3
 800114c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fc41 	bl	80009d6 <sendPacket>
 8001154:	6778      	str	r0, [r7, #116]	; 0x74
 8001156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001158:	2b00      	cmp	r3, #0
 800115a:	d129      	bne.n	80011b0 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800115c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001160:	461a      	mov	r2, r3
 8001162:	2102      	movs	r1, #2
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff8c 	bl	8001082 <waitfor>
 800116a:	4603      	mov	r3, r0
 800116c:	2b02      	cmp	r3, #2
 800116e:	d117      	bne.n	80011a0 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8001170:	23ff      	movs	r3, #255	; 0xff
 8001172:	73fb      	strb	r3, [r7, #15]
        char sessionPresent = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack((unsigned char*)&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f107 010f 	add.w	r1, r7, #15
 8001184:	f107 000e 	add.w	r0, r7, #14
 8001188:	f000 fb22 	bl	80017d0 <MQTTDeserialize_connack>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <MQTTConnect+0xd8>
            rc = connack_rc;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	677b      	str	r3, [r7, #116]	; 0x74
 8001196:	e00c      	b.n	80011b2 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	677b      	str	r3, [r7, #116]	; 0x74
 800119e:	e008      	b.n	80011b2 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	677b      	str	r3, [r7, #116]	; 0x74
 80011a6:	e004      	b.n	80011b2 <MQTTConnect+0xf2>
        goto exit;
 80011a8:	bf00      	nop
 80011aa:	e002      	b.n	80011b2 <MQTTConnect+0xf2>
        goto exit;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 80011b0:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 80011b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <MQTTConnect+0xfe>
        c->isconnected = 1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	621a      	str	r2, [r3, #32]
    return rc;
 80011be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3778      	adds	r7, #120	; 0x78
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	080066a8 	.word	0x080066a8

080011cc <MQTTSubscribe>:


int MQTTSubscribe(Client* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	623b      	str	r3, [r7, #32]

    InitTimer(&timer);
 80011f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f8ea 	bl	80013d4 <InitTimer>
    countdown_ms(&timer, c->command_timeout_ms);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f8a6 	bl	800135c <countdown_ms>

    if (!c->isconnected)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d074      	beq.n	8001302 <MQTTSubscribe+0x136>
        goto exit;

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	691c      	ldr	r4, [r3, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	461d      	mov	r5, r3
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff fbbf 	bl	80009a6 <getNextPacketId>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2301      	movs	r3, #1
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4613      	mov	r3, r2
 800123c:	2200      	movs	r2, #0
 800123e:	4629      	mov	r1, r5
 8001240:	4620      	mov	r0, r4
 8001242:	f000 fe9c 	bl	8001f7e <MQTTSerialize_subscribe>
 8001246:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8001248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124a:	2b00      	cmp	r3, #0
 800124c:	dd5b      	ble.n	8001306 <MQTTSubscribe+0x13a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	461a      	mov	r2, r3
 8001254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fbbd 	bl	80009d6 <sendPacket>
 800125c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800125e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d152      	bne.n	800130a <MQTTSubscribe+0x13e>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	461a      	mov	r2, r3
 800126a:	2109      	movs	r1, #9
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff ff08 	bl	8001082 <waitfor>
 8001272:	4603      	mov	r3, r0
 8001274:	2b09      	cmp	r3, #9
 8001276:	d140      	bne.n	80012fa <MQTTSubscribe+0x12e>
    {
        int count = 0, grantedQoS = -1;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	68d2      	ldr	r2, [r2, #12]
 800128a:	4614      	mov	r4, r2
 800128c:	f107 0118 	add.w	r1, r7, #24
 8001290:	f107 021c 	add.w	r2, r7, #28
 8001294:	f107 0016 	add.w	r0, r7, #22
 8001298:	9401      	str	r4, [sp, #4]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	460b      	mov	r3, r1
 800129e:	2101      	movs	r1, #1
 80012a0:	f000 fee9 	bl	8002076 <MQTTDeserialize_suback>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <MQTTSubscribe+0xe2>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 80012ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b0:	2b80      	cmp	r3, #128	; 0x80
 80012b2:	d02b      	beq.n	800130c <MQTTSubscribe+0x140>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80012b4:	2300      	movs	r3, #0
 80012b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80012b8:	e01b      	b.n	80012f2 <MQTTSubscribe+0x126>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012be:	3304      	adds	r3, #4
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d110      	bne.n	80012ec <MQTTSubscribe+0x120>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ce:	3304      	adds	r3, #4
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012dc:	3304      	adds	r3, #4
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	609a      	str	r2, [r3, #8]
                    rc = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80012ea:	e00f      	b.n	800130c <MQTTSubscribe+0x140>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	3301      	adds	r3, #1
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	dde0      	ble.n	80012ba <MQTTSubscribe+0xee>
 80012f8:	e008      	b.n	800130c <MQTTSubscribe+0x140>
                }
            }
        }
    }
    else
        rc = FAILURE;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001300:	e004      	b.n	800130c <MQTTSubscribe+0x140>
        goto exit;
 8001302:	bf00      	nop
 8001304:	e002      	b.n	800130c <MQTTSubscribe+0x140>
        goto exit;
 8001306:	bf00      	nop
 8001308:	e000      	b.n	800130c <MQTTSubscribe+0x140>
        goto exit;             // there was a problem
 800130a:	bf00      	nop

exit:
    return rc;
 800130c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800130e:	4618      	mov	r0, r3
 8001310:	3740      	adds	r7, #64	; 0x40
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001318 <MilliTimer_Handler>:
#include "wizchip_conf.h"
#include "socket.h"

unsigned long MilliTimer;

void MilliTimer_Handler(void) {
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	MilliTimer++;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <MilliTimer_Handler+0x18>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a03      	ldr	r2, [pc, #12]	; (8001330 <MilliTimer_Handler+0x18>)
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200009a4 	.word	0x200009a4

08001334 <expired>:

char expired(Timer* timer) {
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <expired+0x24>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	0fdb      	lsrs	r3, r3, #31
 800134c:	b2db      	uxtb	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	200009a4 	.word	0x200009a4

0800135c <countdown_ms>:


void countdown_ms(Timer* timer, unsigned int timeout) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <countdown_ms+0x20>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	441a      	add	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	605a      	str	r2, [r3, #4]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	200009a4 	.word	0x200009a4

08001380 <countdown>:


void countdown(Timer* timer, unsigned int timeout) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001390:	fb03 f202 	mul.w	r2, r3, r2
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <countdown+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	441a      	add	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	605a      	str	r2, [r3, #4]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	200009a4 	.word	0x200009a4

080013ac <left_ms>:


int left_ms(Timer* timer) {
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <left_ms+0x24>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	200009a4 	.word	0x200009a4

080013d4 <InitTimer>:


void InitTimer(Timer* timer) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <NewNetwork>:


void NewNetwork(Network* n) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	n->my_socket = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
	n->mqttread = w5500_read;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <NewNetwork+0x2c>)
 80013fe:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5500_write;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <NewNetwork+0x30>)
 8001404:	609a      	str	r2, [r3, #8]
	n->disconnect = w5500_disconnect;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <NewNetwork+0x34>)
 800140a:	60da      	str	r2, [r3, #12]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	08001425 	.word	0x08001425
 800141c:	0800147d 	.word	0x0800147d
 8001420:	080014c3 	.word	0x080014c3

08001424 <w5500_read>:

int w5500_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	3301      	adds	r3, #1
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fe7f 	bl	8002144 <WIZCHIP_READ>
 8001446:	4603      	mov	r3, r0
 8001448:	2b17      	cmp	r3, #23
 800144a:	d113      	bne.n	8001474 <w5500_read+0x50>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f001 f81b 	bl	800248e <getSn_RX_RSR>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <w5500_read+0x50>
		return recv(n->my_socket, buffer, len);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	b292      	uxth	r2, r2
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fce2 	bl	8002e34 <recv>
 8001470:	4603      	mov	r3, r0
 8001472:	e7ff      	b.n	8001474 <w5500_read+0x50>
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <w5500_write>:

int w5500_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	3301      	adds	r3, #1
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fe53 	bl	8002144 <WIZCHIP_READ>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b17      	cmp	r3, #23
 80014a2:	d10a      	bne.n	80014ba <w5500_write+0x3e>
		return send(n->my_socket, buffer, len);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	b292      	uxth	r2, r2
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fbc5 	bl	8002c40 <send>
 80014b6:	4603      	mov	r3, r0
 80014b8:	e7ff      	b.n	80014ba <w5500_write+0x3e>
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fb3f 	bl	8002b54 <disconnect>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <ConnectNetwork>:

int ConnectNetwork(Network* n, char* ip, int port)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
	uint16_t myport = 12345;
 80014ea:	f243 0339 	movw	r3, #12345	; 0x3039
 80014ee:	82fb      	strh	r3, [r7, #22]

		if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b2d8      	uxtb	r0, r3
 80014f6:	8afa      	ldrh	r2, [r7, #22]
 80014f8:	2300      	movs	r3, #0
 80014fa:	2101      	movs	r1, #1
 80014fc:	f001 f8ca 	bl	8002694 <socket>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <ConnectNetwork+0x32>
			return SOCK_ERROR;
 800150c:	2300      	movs	r3, #0
 800150e:	e00e      	b.n	800152e <ConnectNetwork+0x50>

		if(connect(n->my_socket, ip, port) != SOCK_OK)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	b292      	uxth	r2, r2
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fa3d 	bl	800299c <connect>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d001      	beq.n	800152c <ConnectNetwork+0x4e>
			return SOCK_ERROR;
 8001528:	2300      	movs	r3, #0
 800152a:	e000      	b.n	800152e <ConnectNetwork+0x50>

		return SOCK_OK;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8001536:	b590      	push	{r4, r7, lr}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	int len = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d102      	bne.n	8001550 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800154a:	230c      	movs	r3, #12
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e005      	b.n	800155c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7a1b      	ldrb	r3, [r3, #8]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d101      	bne.n	800155c <MQTTSerialize_connectLength+0x26>
		len = 10;
 8001558:	230a      	movs	r3, #10
 800155a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	330c      	adds	r3, #12
 8001560:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001564:	f000 fc3f 	bl	8001de6 <MQTTstrlen>
 8001568:	4603      	mov	r3, r0
 800156a:	3302      	adds	r3, #2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7edb      	ldrb	r3, [r3, #27]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d013      	beq.n	80015a2 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3324      	adds	r3, #36	; 0x24
 800157e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001582:	f000 fc30 	bl	8001de6 <MQTTstrlen>
 8001586:	4603      	mov	r3, r0
 8001588:	1c9c      	adds	r4, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3330      	adds	r3, #48	; 0x30
 800158e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001592:	f000 fc28 	bl	8001de6 <MQTTstrlen>
 8001596:	4603      	mov	r3, r0
 8001598:	4423      	add	r3, r4
 800159a:	3302      	adds	r3, #2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <MQTTSerialize_connectLength+0x7c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00a      	beq.n	80015c8 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3340      	adds	r3, #64	; 0x40
 80015b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015ba:	f000 fc14 	bl	8001de6 <MQTTstrlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	3302      	adds	r3, #2
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <MQTTSerialize_connectLength+0xa2>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00a      	beq.n	80015ee <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	334c      	adds	r3, #76	; 0x4c
 80015dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015e0:	f000 fc01 	bl	8001de6 <MQTTstrlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	3302      	adds	r3, #2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff8b 	bl	8001536 <MQTTSerialize_connectLength>
 8001620:	6238      	str	r0, [r7, #32]
 8001622:	6a38      	ldr	r0, [r7, #32]
 8001624:	f000 fa98 	bl	8001b58 <MQTTPacket_len>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4293      	cmp	r3, r2
 800162e:	da03      	bge.n	8001638 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001630:	f06f 0301 	mvn.w	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001636:	e0c2      	b.n	80017be <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800163c:	7e3b      	ldrb	r3, [r7, #24]
 800163e:	2201      	movs	r2, #1
 8001640:	f362 1307 	bfi	r3, r2, #4, #4
 8001644:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001646:	7e3a      	ldrb	r2, [r7, #24]
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fb0f 	bl	8001c72 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	6a39      	ldr	r1, [r7, #32]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fa12 	bl	8001a82 <MQTTPacket_encode>
 800165e:	4602      	mov	r2, r0
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7a1b      	ldrb	r3, [r3, #8]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d10c      	bne.n	8001688 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4955      	ldr	r1, [pc, #340]	; (80017c8 <MQTTSerialize_connect+0x1d0>)
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fb38 	bl	8001cea <writeCString>
		writeChar(&ptr, (char) 4);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2104      	movs	r1, #4
 8001680:	4618      	mov	r0, r3
 8001682:	f000 faf6 	bl	8001c72 <writeChar>
 8001686:	e00b      	b.n	80016a0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	494f      	ldr	r1, [pc, #316]	; (80017cc <MQTTSerialize_connect+0x1d4>)
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fb2b 	bl	8001cea <writeCString>
		writeChar(&ptr, (char) 3);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	2103      	movs	r1, #3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fae9 	bl	8001c72 <writeChar>
	}

	flags.all = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e9b      	ldrb	r3, [r3, #26]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	7d3b      	ldrb	r3, [r7, #20]
 80016b0:	f362 0341 	bfi	r3, r2, #1, #1
 80016b4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7edb      	ldrb	r3, [r3, #27]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	7d3b      	ldrb	r3, [r7, #20]
 80016c6:	f362 0382 	bfi	r3, r2, #2, #1
 80016ca:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80016cc:	7d3b      	ldrb	r3, [r7, #20]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	7d3b      	ldrb	r3, [r7, #20]
 80016e6:	f362 03c4 	bfi	r3, r2, #3, #2
 80016ea:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	7d3b      	ldrb	r3, [r7, #20]
 80016fa:	f362 1345 	bfi	r3, r2, #5, #1
 80016fe:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d103      	bne.n	8001710 <MQTTSerialize_connect+0x118>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8001710:	7d3b      	ldrb	r3, [r7, #20]
 8001712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001716:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <MQTTSerialize_connect+0x130>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8001728:	7d3b      	ldrb	r3, [r7, #20]
 800172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8001730:	7d3a      	ldrb	r2, [r7, #20]
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fa9a 	bl	8001c72 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8b1b      	ldrh	r3, [r3, #24]
 8001742:	461a      	mov	r2, r3
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f000 faa5 	bl	8001c9a <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f107 001c 	add.w	r0, r7, #28
 8001756:	330c      	adds	r3, #12
 8001758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175a:	f000 fae5 	bl	8001d28 <writeMQTTString>
	if (options->willFlag)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7edb      	ldrb	r3, [r3, #27]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f107 001c 	add.w	r0, r7, #28
 800176c:	3324      	adds	r3, #36	; 0x24
 800176e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001770:	f000 fada 	bl	8001d28 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f107 001c 	add.w	r0, r7, #28
 800177a:	3330      	adds	r3, #48	; 0x30
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	f000 fad3 	bl	8001d28 <writeMQTTString>
	}
	if (flags.bits.username)
 8001782:	7d3b      	ldrb	r3, [r7, #20]
 8001784:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f107 001c 	add.w	r0, r7, #28
 8001794:	3340      	adds	r3, #64	; 0x40
 8001796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001798:	f000 fac6 	bl	8001d28 <writeMQTTString>
	if (flags.bits.password)
 800179c:	7d3b      	ldrb	r3, [r7, #20]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f107 001c 	add.w	r0, r7, #28
 80017ae:	334c      	adds	r3, #76	; 0x4c
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	f000 fab9 	bl	8001d28 <writeMQTTString>

	rc = ptr - buf;
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08006700 	.word	0x08006700
 80017cc:	08006708 	.word	0x08006708

080017d0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fa28 	bl	8001c4c <readChar>
 80017fc:	4603      	mov	r3, r0
 80017fe:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8001800:	7f3b      	ldrb	r3, [r7, #28]
 8001802:	f023 030f 	bic.w	r3, r3, #15
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b20      	cmp	r3, #32
 800180a:	d12e      	bne.n	800186a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f107 0214 	add.w	r2, r7, #20
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f9e9 	bl	8001bec <MQTTPacket_decodeBuf>
 800181a:	6278      	str	r0, [r7, #36]	; 0x24
 800181c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4413      	add	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4413      	add	r3, r2
 800182a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6a3a      	ldr	r2, [r7, #32]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	dd1b      	ble.n	800186e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8001836:	f107 0318 	add.w	r3, r7, #24
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fa06 	bl	8001c4c <readChar>
 8001840:	4603      	mov	r3, r0
 8001842:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8001844:	7c3b      	ldrb	r3, [r7, #16]
 8001846:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f9f8 	bl	8001c4c <readChar>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	e002      	b.n	8001870 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800186a:	bf00      	nop
 800186c:	e000      	b.n	8001870 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800186e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001872:	4618      	mov	r0, r3
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b088      	sub	sp, #32
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	4613      	mov	r3, r2
 8001886:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	dc03      	bgt.n	80018a4 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800189c:	f06f 0301 	mvn.w	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
		goto exit;
 80018a2:	e01d      	b.n	80018e0 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	7e3b      	ldrb	r3, [r7, #24]
 80018b2:	f362 1307 	bfi	r3, r2, #4, #4
 80018b6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80018b8:	7e3a      	ldrb	r2, [r7, #24]
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f9d6 	bl	8001c72 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f8d9 	bl	8001a82 <MQTTPacket_encode>
 80018d0:	4602      	mov	r2, r0
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80018e0:	69fb      	ldr	r3, [r7, #28]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80018f4:	220c      	movs	r2, #12
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffbe 	bl	800187a <MQTTSerialize_zero>
 80018fe:	4603      	mov	r3, r0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f98c 	bl	8001c4c <readChar>
 8001934:	4603      	mov	r3, r0
 8001936:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8001938:	7f3b      	ldrb	r3, [r7, #28]
 800193a:	f023 030f 	bic.w	r3, r3, #15
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b30      	cmp	r3, #48	; 0x30
 8001942:	d14b      	bne.n	80019dc <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8001944:	7f3b      	ldrb	r3, [r7, #28]
 8001946:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8001952:	7f3b      	ldrb	r3, [r7, #28]
 8001954:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001958:	b2db      	uxtb	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001960:	7f3b      	ldrb	r3, [r7, #28]
 8001962:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f107 0214 	add.w	r2, r7, #20
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f938 	bl	8001bec <MQTTPacket_decodeBuf>
 800197c:	6278      	str	r0, [r7, #36]	; 0x24
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4413      	add	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4413      	add	r3, r2
 800198c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	4619      	mov	r1, r3
 8001996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001998:	f000 f9f4 	bl	8001d84 <readMQTTLenString>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d01e      	beq.n	80019e0 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6a3a      	ldr	r2, [r7, #32]
 80019a6:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db19      	blt.n	80019e0 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dd08      	ble.n	80019c6 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f92d 	bl	8001c18 <readInt>
 80019be:	4603      	mov	r3, r0
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	1ad2      	subs	r2, r2, r3
 80019cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ce:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d4:	601a      	str	r2, [r3, #0]
	rc = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	e002      	b.n	80019e2 <MQTTDeserialize_publish+0xda>
		goto exit;
 80019dc:	bf00      	nop
 80019de:	e000      	b.n	80019e2 <MQTTDeserialize_publish+0xda>
		goto exit;
 80019e0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f91c 	bl	8001c4c <readChar>
 8001a14:	4603      	mov	r3, r0
 8001a16:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8001a18:	7f3b      	ldrb	r3, [r7, #28]
 8001a1a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8001a26:	7f3b      	ldrb	r3, [r7, #28]
 8001a28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f107 0214 	add.w	r2, r7, #20
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f8d5 	bl	8001bec <MQTTPacket_decodeBuf>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4413      	add	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4413      	add	r3, r2
 8001a52:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6a3a      	ldr	r2, [r7, #32]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	dd0b      	ble.n	8001a76 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8001a5e:	f107 0318 	add.w	r3, r7, #24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f8d8 	bl	8001c18 <readInt>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	e000      	b.n	8001a78 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8001a76:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	425a      	negs	r2, r3
 8001a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a9c:	bf58      	it	pl
 8001a9e:	4253      	negpl	r3, r2
 8001aa0:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da00      	bge.n	8001aaa <MQTTPacket_encode+0x28>
 8001aa8:	337f      	adds	r3, #127	; 0x7f
 8001aaa:	11db      	asrs	r3, r3, #7
 8001aac:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	dd03      	ble.n	8001abc <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aba:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60fa      	str	r2, [r7, #12]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	7afa      	ldrb	r2, [r7, #11]
 8001aca:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dcde      	bgt.n	8001a90 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	3301      	adds	r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	dd03      	ble.n	8001b10 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001b0e:	e01d      	b.n	8001b4c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8001b10:	f107 020b 	add.w	r2, r7, #11
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2101      	movs	r1, #1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4798      	blx	r3
 8001b1c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d112      	bne.n	8001b4a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b2e:	6979      	ldr	r1, [r7, #20]
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	441a      	add	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	01db      	lsls	r3, r3, #7
 8001b3e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	dbd6      	blt.n	8001af6 <MQTTPacket_decode+0x18>
exit:
 8001b48:	e000      	b.n	8001b4c <MQTTPacket_decode+0x6e>
			goto exit;
 8001b4a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001b4c:	693b      	ldr	r3, [r7, #16]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b7f      	cmp	r3, #127	; 0x7f
 8001b6a:	dc03      	bgt.n	8001b74 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	e012      	b.n	8001b9a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b7a:	da03      	bge.n	8001b84 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	e00a      	b.n	8001b9a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <MQTTPacket_len+0x50>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	dc03      	bgt.n	8001b94 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3303      	adds	r3, #3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	e002      	b.n	8001b9a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3304      	adds	r3, #4
 8001b98:	607b      	str	r3, [r7, #4]
	return rem_len;
 8001b9a:	687b      	ldr	r3, [r7, #4]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	001ffffe 	.word	0x001ffffe

08001bac <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	e00a      	b.n	8001bd2 <bufchar+0x26>
		*c = *bufptr++;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <bufchar+0x3c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	4909      	ldr	r1, [pc, #36]	; (8001be8 <bufchar+0x3c>)
 8001bc4:	600a      	str	r2, [r1, #0]
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbf0      	blt.n	8001bbc <bufchar+0x10>
	return count;
 8001bda:	683b      	ldr	r3, [r7, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200009a8 	.word	0x200009a8

08001bec <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <MQTTPacket_decodeBuf+0x24>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MQTTPacket_decodeBuf+0x28>)
 8001c00:	f7ff ff6d 	bl	8001ade <MQTTPacket_decode>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200009a8 	.word	0x200009a8
 8001c14:	08001bad 	.word	0x08001bad

08001c18 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	3201      	adds	r2, #1
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	1c9a      	adds	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	601a      	str	r2, [r3, #0]
	return len;
 8001c40:	68bb      	ldr	r3, [r7, #8]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	601a      	str	r2, [r3, #0]
	return c;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da00      	bge.n	8001cac <writeInt+0x12>
 8001caa:	33ff      	adds	r3, #255	; 0xff
 8001cac:	121b      	asrs	r3, r3, #8
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	425a      	negs	r2, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	bf58      	it	pl
 8001ccc:	4253      	negpl	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f7fe fa33 	bl	8000160 <strlen>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffca 	bl	8001c9a <writeInt>
	memcpy(*pptr, string, len);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f9b4 	bl	800507c <memcpy>
	*pptr += len;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4638      	mov	r0, r7
 8001d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dd12      	ble.n	8001d62 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff ffaa 	bl	8001c9a <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f994 	bl	800507c <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001d60:	e00c      	b.n	8001d7c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff ffbc 	bl	8001cea <writeCString>
}
 8001d72:	e003      	b.n	8001d7c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff ff8f 	bl	8001c9a <writeInt>
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	dd1a      	ble.n	8001dd6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8001da0:	68b8      	ldr	r0, [r7, #8]
 8001da2:	f7ff ff39 	bl	8001c18 <readInt>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	6852      	ldr	r2, [r2, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d30c      	bcc.n	8001dd6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6852      	ldr	r2, [r2, #4]
 8001dcc:	441a      	add	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	601a      	str	r2, [r3, #0]
			rc = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8001ddc:	697b      	ldr	r3, [r7, #20]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9ae 	bl	8000160 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e001      	b.n	8001e0e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	617b      	str	r3, [r7, #20]
	return rc;
 8001e0e:	697b      	ldr	r3, [r7, #20]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
		blen = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe f98f 	bl	8000160 <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e005      	b.n	8001e54 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f7fe f983 	bl	8000160 <strlen>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10a      	bne.n	8001e7c <MQTTPacket_equals+0x64>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	6938      	ldr	r0, [r7, #16]
 8001e6e:	f003 f9c9 	bl	8005204 <strncmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <MQTTPacket_equals+0x64>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <MQTTPacket_equals+0x66>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b088      	sub	sp, #32
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	4611      	mov	r1, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	460b      	mov	r3, r1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	dc03      	bgt.n	8001eb6 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001eae:	f06f 0301 	mvn.w	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001eb4:	e037      	b.n	8001f26 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	7e3b      	ldrb	r3, [r7, #24]
 8001ec0:	f362 1307 	bfi	r3, r2, #4, #4
 8001ec4:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	7e3b      	ldrb	r3, [r7, #24]
 8001ed0:	f362 03c3 	bfi	r3, r2, #3, #1
 8001ed4:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	7e3b      	ldrb	r3, [r7, #24]
 8001eea:	f362 0342 	bfi	r3, r2, #1, #2
 8001eee:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001ef0:	7e3a      	ldrb	r2, [r7, #24]
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff feba 	bl	8001c72 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2102      	movs	r1, #2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fdbd 	bl	8001a82 <MQTTPacket_encode>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8001f10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff febe 	bl	8001c9a <writeInt>
	rc = ptr - buf;
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001f26:	69fb      	ldr	r3, [r7, #28]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e013      	b.n	8001f6c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f58:	f7ff ff45 	bl	8001de6 <MQTTstrlen>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	3303      	adds	r3, #3
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	4413      	add	r3, r2
 8001f64:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dbe7      	blt.n	8001f44 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8001f74:	68bb      	ldr	r3, [r7, #8]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b08a      	sub	sp, #40	; 0x28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001fa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fac:	f7ff ffc0 	bl	8001f30 <MQTTSerialize_subscribeLength>
 8001fb0:	61f8      	str	r0, [r7, #28]
 8001fb2:	69f8      	ldr	r0, [r7, #28]
 8001fb4:	f7ff fdd0 	bl	8001b58 <MQTTPacket_len>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	da03      	bge.n	8001fc8 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001fc0:	f06f 0301 	mvn.w	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001fc6:	e051      	b.n	800206c <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001fcc:	7d3b      	ldrb	r3, [r7, #20]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	f362 1307 	bfi	r3, r2, #4, #4
 8001fd4:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	7d3b      	ldrb	r3, [r7, #20]
 8001fe0:	f362 03c3 	bfi	r3, r2, #3, #1
 8001fe4:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8001fe6:	7d3b      	ldrb	r3, [r7, #20]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f362 0342 	bfi	r3, r2, #1, #2
 8001fee:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8001ff0:	7d3a      	ldrb	r2, [r7, #20]
 8001ff2:	f107 0318 	add.w	r3, r7, #24
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fe3a 	bl	8001c72 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	69f9      	ldr	r1, [r7, #28]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fd3d 	bl	8001a82 <MQTTPacket_encode>
 8002008:	4602      	mov	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4413      	add	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8002010:	88ba      	ldrh	r2, [r7, #4]
 8002012:	f107 0318 	add.w	r3, r7, #24
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe3e 	bl	8001c9a <writeInt>

	for (i = 0; i < count; ++i)
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	e01b      	b.n	800205c <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8002024:	6a3a      	ldr	r2, [r7, #32]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	461a      	mov	r2, r3
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	4413      	add	r3, r2
 8002034:	f107 0018 	add.w	r0, r7, #24
 8002038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203a:	f7ff fe75 	bl	8001d28 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	f107 0318 	add.w	r3, r7, #24
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fe0e 	bl	8001c72 <writeChar>
	for (i = 0; i < count; ++i)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	3301      	adds	r3, #1
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	429a      	cmp	r2, r3
 8002062:	dbdf      	blt.n	8002024 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800206e:	4618      	mov	r0, r3
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b08a      	sub	sp, #40	; 0x28
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8002094:	f107 0318 	add.w	r3, r7, #24
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fdd7 	bl	8001c4c <readChar>
 800209e:	4603      	mov	r3, r0
 80020a0:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80020a2:	7f3b      	ldrb	r3, [r7, #28]
 80020a4:	f023 030f 	bic.w	r3, r3, #15
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b90      	cmp	r3, #144	; 0x90
 80020ac:	d142      	bne.n	8002134 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f107 0214 	add.w	r2, r7, #20
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fd98 	bl	8001bec <MQTTPacket_decodeBuf>
 80020bc:	6278      	str	r0, [r7, #36]	; 0x24
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	dd2f      	ble.n	8002138 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fd9b 	bl	8001c18 <readInt>
 80020e2:	4603      	mov	r3, r0
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80020f0:	e019      	b.n	8002126 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	da03      	bge.n	8002104 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8002102:	e01a      	b.n	800213a <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fd9f 	bl	8001c4c <readChar>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6011      	str	r1, [r2, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	4602      	mov	r2, r0
 8002124:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	429a      	cmp	r2, r3
 800212c:	d8e1      	bhi.n	80020f2 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e002      	b.n	800213a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8002134:	bf00      	nop
 8002136:	e000      	b.n	800213a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8002138:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800213c:	4618      	mov	r0, r3
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800214c:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <WIZCHIP_READ+0x94>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <WIZCHIP_READ+0x94>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <WIZCHIP_READ+0x94>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <WIZCHIP_READ+0x24>
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <WIZCHIP_READ+0x94>)
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d114      	bne.n	8002192 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <WIZCHIP_READ+0x94>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	0c12      	lsrs	r2, r2, #16
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4610      	mov	r0, r2
 8002174:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <WIZCHIP_READ+0x94>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	0a12      	lsrs	r2, r2, #8
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4610      	mov	r0, r2
 8002182:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <WIZCHIP_READ+0x94>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	4610      	mov	r0, r2
 800218e:	4798      	blx	r3
 8002190:	e011      	b.n	80021b6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	b2db      	uxtb	r3, r3
 8002198:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <WIZCHIP_READ+0x94>)
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f107 020c 	add.w	r2, r7, #12
 80021b0:	2103      	movs	r1, #3
 80021b2:	4610      	mov	r0, r2
 80021b4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <WIZCHIP_READ+0x94>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4798      	blx	r3
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <WIZCHIP_READ+0x94>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <WIZCHIP_READ+0x94>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	4798      	blx	r3
   return ret;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000004c 	.word	0x2000004c

080021dc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <WIZCHIP_WRITE+0x98>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4798      	blx	r3
   WIZCHIP.CS._select();
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <WIZCHIP_WRITE+0x98>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <WIZCHIP_WRITE+0x98>)
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d119      	bne.n	8002238 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <WIZCHIP_WRITE+0x98>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	0c12      	lsrs	r2, r2, #16
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4610      	mov	r0, r2
 8002210:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <WIZCHIP_WRITE+0x98>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	0a12      	lsrs	r2, r2, #8
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <WIZCHIP_WRITE+0x98>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	4610      	mov	r0, r2
 800222a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <WIZCHIP_WRITE+0x98>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4610      	mov	r0, r2
 8002234:	4798      	blx	r3
 8002236:	e013      	b.n	8002260 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	b2db      	uxtb	r3, r3
 800223e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b2db      	uxtb	r3, r3
 8002246:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <WIZCHIP_WRITE+0x98>)
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f107 020c 	add.w	r2, r7, #12
 800225a:	2104      	movs	r1, #4
 800225c:	4610      	mov	r0, r2
 800225e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <WIZCHIP_WRITE+0x98>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002266:	4b03      	ldr	r3, [pc, #12]	; (8002274 <WIZCHIP_WRITE+0x98>)
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	4798      	blx	r3
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000004c 	.word	0x2000004c

08002278 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800228c:	4b29      	ldr	r3, [pc, #164]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <WIZCHIP_READ_BUF+0x2a>
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d126      	bne.n	80022f0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	0c12      	lsrs	r2, r2, #16
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	4610      	mov	r0, r2
 80022ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	0a12      	lsrs	r2, r2, #8
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	4610      	mov	r0, r2
 80022bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4610      	mov	r0, r2
 80022c8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	82fb      	strh	r3, [r7, #22]
 80022ce:	e00a      	b.n	80022e6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	8afa      	ldrh	r2, [r7, #22]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	188c      	adds	r4, r1, r2
 80022da:	4798      	blx	r3
 80022dc:	4603      	mov	r3, r0
 80022de:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80022e0:	8afb      	ldrh	r3, [r7, #22]
 80022e2:	3301      	adds	r3, #1
 80022e4:	82fb      	strh	r3, [r7, #22]
 80022e6:	8afa      	ldrh	r2, [r7, #22]
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3f0      	bcc.n	80022d0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80022ee:	e017      	b.n	8002320 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f107 0210 	add.w	r2, r7, #16
 800230e:	2103      	movs	r1, #3
 8002310:	4610      	mov	r0, r2
 8002312:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	4611      	mov	r1, r2
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002326:	4b03      	ldr	r3, [pc, #12]	; (8002334 <WIZCHIP_READ_BUF+0xbc>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4798      	blx	r3
}
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	2000004c 	.word	0x2000004c

08002338 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d126      	bne.n	80023b0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	0c12      	lsrs	r2, r2, #16
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	4610      	mov	r0, r2
 800236e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	0a12      	lsrs	r2, r2, #8
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	4610      	mov	r0, r2
 800237c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	4610      	mov	r0, r2
 8002388:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	82fb      	strh	r3, [r7, #22]
 800238e:	e00a      	b.n	80023a6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	8afa      	ldrh	r2, [r7, #22]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	440a      	add	r2, r1
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	4610      	mov	r0, r2
 800239e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80023a0:	8afb      	ldrh	r3, [r7, #22]
 80023a2:	3301      	adds	r3, #1
 80023a4:	82fb      	strh	r3, [r7, #22]
 80023a6:	8afa      	ldrh	r2, [r7, #22]
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3f0      	bcc.n	8002390 <WIZCHIP_WRITE_BUF+0x58>
 80023ae:	e017      	b.n	80023e0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f107 0210 	add.w	r2, r7, #16
 80023ce:	2103      	movs	r1, #3
 80023d0:	4610      	mov	r0, r2
 80023d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	4611      	mov	r1, r2
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80023e6:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4798      	blx	r3
}
 80023ec:	bf00      	nop
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000004c 	.word	0x2000004c

080023f8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002402:	2300      	movs	r3, #0
 8002404:	81fb      	strh	r3, [r7, #14]
 8002406:	2300      	movs	r3, #0
 8002408:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	3301      	adds	r3, #1
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fe94 	bl	8002144 <WIZCHIP_READ>
 800241c:	4603      	mov	r3, r0
 800241e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002420:	89bb      	ldrh	r3, [r7, #12]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	b29c      	uxth	r4, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3301      	adds	r3, #1
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fe86 	bl	8002144 <WIZCHIP_READ>
 8002438:	4603      	mov	r3, r0
 800243a:	b29b      	uxth	r3, r3
 800243c:	4423      	add	r3, r4
 800243e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002440:	89bb      	ldrh	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01a      	beq.n	800247c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	3301      	adds	r3, #1
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fe76 	bl	8002144 <WIZCHIP_READ>
 8002458:	4603      	mov	r3, r0
 800245a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800245c:	89fb      	ldrh	r3, [r7, #14]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b29c      	uxth	r4, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3301      	adds	r3, #1
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe68 	bl	8002144 <WIZCHIP_READ>
 8002474:	4603      	mov	r3, r0
 8002476:	b29b      	uxth	r3, r3
 8002478:	4423      	add	r3, r4
 800247a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800247c:	89fa      	ldrh	r2, [r7, #14]
 800247e:	89bb      	ldrh	r3, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d1c2      	bne.n	800240a <getSn_TX_FSR+0x12>
   return val;
 8002484:	89fb      	ldrh	r3, [r7, #14]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}

0800248e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800248e:	b590      	push	{r4, r7, lr}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002498:	2300      	movs	r3, #0
 800249a:	81fb      	strh	r3, [r7, #14]
 800249c:	2300      	movs	r3, #0
 800249e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	3301      	adds	r3, #1
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fe49 	bl	8002144 <WIZCHIP_READ>
 80024b2:	4603      	mov	r3, r0
 80024b4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80024b6:	89bb      	ldrh	r3, [r7, #12]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	b29c      	uxth	r4, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	3301      	adds	r3, #1
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fe3b 	bl	8002144 <WIZCHIP_READ>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4423      	add	r3, r4
 80024d4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80024d6:	89bb      	ldrh	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01a      	beq.n	8002512 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	3301      	adds	r3, #1
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe2b 	bl	8002144 <WIZCHIP_READ>
 80024ee:	4603      	mov	r3, r0
 80024f0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	b29c      	uxth	r4, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	3301      	adds	r3, #1
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fe1d 	bl	8002144 <WIZCHIP_READ>
 800250a:	4603      	mov	r3, r0
 800250c:	b29b      	uxth	r3, r3
 800250e:	4423      	add	r3, r4
 8002510:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002512:	89fa      	ldrh	r2, [r7, #14]
 8002514:	89bb      	ldrh	r3, [r7, #12]
 8002516:	429a      	cmp	r2, r3
 8002518:	d1c2      	bne.n	80024a0 <getSn_RX_RSR+0x12>
   return val;
 800251a:	89fb      	ldrh	r3, [r7, #14]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}

08002524 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	4613      	mov	r3, r2
 8002532:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800253c:	88bb      	ldrh	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d048      	beq.n	80025d4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	3301      	adds	r3, #1
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fdf8 	bl	8002144 <WIZCHIP_READ>
 8002554:	4603      	mov	r3, r0
 8002556:	b29b      	uxth	r3, r3
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	b29c      	uxth	r4, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	3301      	adds	r3, #1
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fdeb 	bl	8002144 <WIZCHIP_READ>
 800256e:	4603      	mov	r3, r0
 8002570:	b29b      	uxth	r3, r3
 8002572:	4423      	add	r3, r4
 8002574:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	3202      	adds	r2, #2
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	4413      	add	r3, r2
 8002584:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002586:	88bb      	ldrh	r3, [r7, #4]
 8002588:	461a      	mov	r2, r3
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	68b8      	ldr	r0, [r7, #8]
 800258e:	f7ff fed3 	bl	8002338 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002592:	89fa      	ldrh	r2, [r7, #14]
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3301      	adds	r3, #1
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025a6:	461a      	mov	r2, r3
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f7ff fe12 	bl	80021dc <WIZCHIP_WRITE>
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	3301      	adds	r3, #1
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80025c4:	461a      	mov	r2, r3
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7ff fe05 	bl	80021dc <WIZCHIP_WRITE>
 80025d2:	e000      	b.n	80025d6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80025d4:	bf00      	nop
}
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80025f4:	88bb      	ldrh	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d048      	beq.n	800268c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	3301      	adds	r3, #1
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fd9c 	bl	8002144 <WIZCHIP_READ>
 800260c:	4603      	mov	r3, r0
 800260e:	b29b      	uxth	r3, r3
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b29c      	uxth	r4, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	3301      	adds	r3, #1
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fd8f 	bl	8002144 <WIZCHIP_READ>
 8002626:	4603      	mov	r3, r0
 8002628:	b29b      	uxth	r3, r3
 800262a:	4423      	add	r3, r4
 800262c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	3203      	adds	r2, #3
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	4413      	add	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800263e:	88bb      	ldrh	r3, [r7, #4]
 8002640:	461a      	mov	r2, r3
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	68b8      	ldr	r0, [r7, #8]
 8002646:	f7ff fe17 	bl	8002278 <WIZCHIP_READ_BUF>
   ptr += len;
 800264a:	89fa      	ldrh	r2, [r7, #14]
 800264c:	88bb      	ldrh	r3, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3301      	adds	r3, #1
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800265e:	461a      	mov	r2, r3
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f7ff fdb6 	bl	80021dc <WIZCHIP_WRITE>
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3301      	adds	r3, #1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800267c:	461a      	mov	r2, r3
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff fda9 	bl	80021dc <WIZCHIP_WRITE>
 800268a:	e000      	b.n	800268e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800268c:	bf00      	nop
}
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}

08002694 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	4603      	mov	r3, r0
 80026a8:	71bb      	strb	r3, [r7, #6]
 80026aa:	460b      	mov	r3, r1
 80026ac:	80bb      	strh	r3, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d902      	bls.n	80026be <socket+0x2a>
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	e0f2      	b.n	80028a4 <socket+0x210>
	switch(protocol)
 80026be:	79bb      	ldrb	r3, [r7, #6]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d005      	beq.n	80026d0 <socket+0x3c>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	dd11      	ble.n	80026ec <socket+0x58>
 80026c8:	3b02      	subs	r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d80e      	bhi.n	80026ec <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80026ce:	e011      	b.n	80026f4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2204      	movs	r2, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80026dc:	f7ff fdcc 	bl	8002278 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <socket+0x5e>
 80026e6:	f06f 0302 	mvn.w	r3, #2
 80026ea:	e0db      	b.n	80028a4 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80026ec:	f06f 0304 	mvn.w	r3, #4
 80026f0:	e0d8      	b.n	80028a4 <socket+0x210>
	    break;
 80026f2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <socket+0x70>
 80026fe:	f06f 0305 	mvn.w	r3, #5
 8002702:	e0cf      	b.n	80028a4 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d025      	beq.n	8002756 <socket+0xc2>
	{
   	switch(protocol)
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <socket+0x82>
 8002710:	2b02      	cmp	r3, #2
 8002712:	d008      	beq.n	8002726 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002714:	e024      	b.n	8002760 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800271c:	2b00      	cmp	r3, #0
 800271e:	d11c      	bne.n	800275a <socket+0xc6>
 8002720:	f06f 0305 	mvn.w	r3, #5
 8002724:	e0be      	b.n	80028a4 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db02      	blt.n	800273e <socket+0xaa>
 8002738:	f06f 0305 	mvn.w	r3, #5
 800273c:	e0b2      	b.n	80028a4 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db06      	blt.n	800275e <socket+0xca>
 8002750:	f06f 0305 	mvn.w	r3, #5
 8002754:	e0a6      	b.n	80028a4 <socket+0x210>
   	}
   }
 8002756:	bf00      	nop
 8002758:	e002      	b.n	8002760 <socket+0xcc>
   	      break;
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <socket+0xcc>
   	      break;
 800275e:	bf00      	nop
	close(sn);
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f8ac 	bl	80028c0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	3301      	adds	r3, #1
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4618      	mov	r0, r3
 8002772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002776:	f023 030f 	bic.w	r3, r3, #15
 800277a:	b25a      	sxtb	r2, r3
 800277c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002780:	4313      	orrs	r3, r2
 8002782:	b25b      	sxtb	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	f7ff fd28 	bl	80021dc <WIZCHIP_WRITE>
    #endif
	if(!port)
 800278c:	88bb      	ldrh	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d110      	bne.n	80027b4 <socket+0x120>
	{
	   port = sock_any_port++;
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <socket+0x218>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	b291      	uxth	r1, r2
 800279a:	4a44      	ldr	r2, [pc, #272]	; (80028ac <socket+0x218>)
 800279c:	8011      	strh	r1, [r2, #0]
 800279e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <socket+0x218>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <socket+0x120>
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <socket+0x218>)
 80027ae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80027b2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	3301      	adds	r3, #1
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027c0:	461a      	mov	r2, r3
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7ff fd05 	bl	80021dc <WIZCHIP_WRITE>
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	3301      	adds	r3, #1
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	88bb      	ldrh	r3, [r7, #4]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7ff fcf8 	bl	80021dc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3301      	adds	r3, #1
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fcee 	bl	80021dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002800:	bf00      	nop
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	3301      	adds	r3, #1
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fc98 	bl	8002144 <WIZCHIP_READ>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f3      	bne.n	8002802 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2201      	movs	r2, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	b21b      	sxth	r3, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	b21a      	sxth	r2, r3
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <socket+0x21c>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b21b      	sxth	r3, r3
 800282e:	4013      	ands	r3, r2
 8002830:	b21b      	sxth	r3, r3
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <socket+0x21c>)
 8002836:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 0201 	and.w	r2, r3, #1
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	b21a      	sxth	r2, r3
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <socket+0x21c>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b21b      	sxth	r3, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	b21b      	sxth	r3, r3
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <socket+0x21c>)
 8002854:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	2201      	movs	r2, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	b21b      	sxth	r3, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	b21a      	sxth	r2, r3
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <socket+0x220>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b21b      	sxth	r3, r3
 800286a:	4013      	ands	r3, r2
 800286c:	b21b      	sxth	r3, r3
 800286e:	b29a      	uxth	r2, r3
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <socket+0x220>)
 8002872:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <socket+0x224>)
 8002878:	2100      	movs	r1, #0
 800287a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <socket+0x228>)
 8002882:	2100      	movs	r1, #0
 8002884:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002886:	bf00      	nop
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	3301      	adds	r3, #1
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fc55 	bl	8002144 <WIZCHIP_READ>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f3      	beq.n	8002888 <socket+0x1f4>
   return (int8_t)sn;
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}
 80028ac:	20000048 	.word	0x20000048
 80028b0:	200009ac 	.word	0x200009ac
 80028b4:	200009ae 	.word	0x200009ae
 80028b8:	200009b0 	.word	0x200009b0
 80028bc:	200009c0 	.word	0x200009c0

080028c0 <close>:

int8_t close(uint8_t sn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d902      	bls.n	80028d6 <close+0x16>
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	e055      	b.n	8002982 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	3301      	adds	r3, #1
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028e2:	2110      	movs	r1, #16
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fc79 	bl	80021dc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80028ea:	bf00      	nop
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3301      	adds	r3, #1
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fc23 	bl	8002144 <WIZCHIP_READ>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f3      	bne.n	80028ec <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	3301      	adds	r3, #1
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002910:	211f      	movs	r1, #31
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fc62 	bl	80021dc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	2201      	movs	r2, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	b21b      	sxth	r3, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	b21a      	sxth	r2, r3
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <close+0xcc>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b21b      	sxth	r3, r3
 800292c:	4013      	ands	r3, r2
 800292e:	b21b      	sxth	r3, r3
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <close+0xcc>)
 8002934:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	2201      	movs	r2, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	b21b      	sxth	r3, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	b21a      	sxth	r2, r3
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <close+0xd0>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b21b      	sxth	r3, r3
 800294a:	4013      	ands	r3, r2
 800294c:	b21b      	sxth	r3, r3
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <close+0xd0>)
 8002952:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <close+0xd4>)
 8002958:	2100      	movs	r1, #0
 800295a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <close+0xd8>)
 8002962:	2100      	movs	r1, #0
 8002964:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002966:	bf00      	nop
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	3301      	adds	r3, #1
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fbe5 	bl	8002144 <WIZCHIP_READ>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f3      	bne.n	8002968 <close+0xa8>
	return SOCK_OK;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200009ac 	.word	0x200009ac
 8002990:	200009ae 	.word	0x200009ae
 8002994:	200009b0 	.word	0x200009b0
 8002998:	200009c0 	.word	0x200009c0

0800299c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d902      	bls.n	80029b8 <connect+0x1c>
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	e0c6      	b.n	8002b46 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	3301      	adds	r3, #1
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fbbf 	bl	8002144 <WIZCHIP_READ>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <connect+0x3a>
 80029d0:	f06f 0304 	mvn.w	r3, #4
 80029d4:	e0b7      	b.n	8002b46 <connect+0x1aa>
   CHECK_SOCKINIT();
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	3301      	adds	r3, #1
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fbae 	bl	8002144 <WIZCHIP_READ>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b13      	cmp	r3, #19
 80029ec:	d002      	beq.n	80029f4 <connect+0x58>
 80029ee:	f06f 0302 	mvn.w	r3, #2
 80029f2:	e0a8      	b.n	8002b46 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	3201      	adds	r2, #1
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	3202      	adds	r2, #2
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	3203      	adds	r2, #3
 8002a1e:	7812      	ldrb	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d002      	beq.n	8002a32 <connect+0x96>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <connect+0x9c>
 8002a32:	f06f 030b 	mvn.w	r3, #11
 8002a36:	e086      	b.n	8002b46 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002a38:	88bb      	ldrh	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <connect+0xa8>
 8002a3e:	f06f 030a 	mvn.w	r3, #10
 8002a42:	e080      	b.n	8002b46 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3301      	adds	r3, #1
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002a50:	2204      	movs	r2, #4
 8002a52:	6839      	ldr	r1, [r7, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fc6f 	bl	8002338 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	3301      	adds	r3, #1
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a66:	461a      	mov	r2, r3
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7ff fbb2 	bl	80021dc <WIZCHIP_WRITE>
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002a84:	461a      	mov	r2, r3
 8002a86:	88bb      	ldrh	r3, [r7, #4]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7ff fba5 	bl	80021dc <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	3301      	adds	r3, #1
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a9e:	2104      	movs	r1, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb9b 	bl	80021dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002aa6:	bf00      	nop
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	3301      	adds	r3, #1
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fb45 	bl	8002144 <WIZCHIP_READ>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f3      	bne.n	8002aa8 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <connect+0x1b4>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	fa42 f303 	asr.w	r3, r2, r3
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02b      	beq.n	8002b2c <connect+0x190>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e036      	b.n	8002b46 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	3301      	adds	r3, #1
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fb2d 	bl	8002144 <WIZCHIP_READ>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	3301      	adds	r3, #1
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b00:	2108      	movs	r1, #8
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fb6a 	bl	80021dc <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002b08:	f06f 030c 	mvn.w	r3, #12
 8002b0c:	e01b      	b.n	8002b46 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	3301      	adds	r3, #1
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fb12 	bl	8002144 <WIZCHIP_READ>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8002b26:	f06f 0303 	mvn.w	r3, #3
 8002b2a:	e00c      	b.n	8002b46 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3301      	adds	r3, #1
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fb03 	bl	8002144 <WIZCHIP_READ>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b17      	cmp	r3, #23
 8002b42:	d1c9      	bne.n	8002ad8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002b44:	2301      	movs	r3, #1
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200009ac 	.word	0x200009ac

08002b54 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d902      	bls.n	8002b6a <disconnect+0x16>
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	e062      	b.n	8002c30 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	3301      	adds	r3, #1
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fae6 	bl	8002144 <WIZCHIP_READ>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d002      	beq.n	8002b88 <disconnect+0x34>
 8002b82:	f06f 0304 	mvn.w	r3, #4
 8002b86:	e053      	b.n	8002c30 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b94:	2108      	movs	r1, #8
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fb20 	bl	80021dc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002b9c:	bf00      	nop
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff faca 	bl	8002144 <WIZCHIP_READ>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f3      	bne.n	8002b9e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <disconnect+0xe4>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <disconnect+0xe4>)
 8002bd2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <disconnect+0xe8>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	fa42 f303 	asr.w	r3, r2, r3
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d016      	beq.n	8002c16 <disconnect+0xc2>
 8002be8:	2300      	movs	r3, #0
 8002bea:	e021      	b.n	8002c30 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff faa3 	bl	8002144 <WIZCHIP_READ>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <disconnect+0xc2>
	   {
	      close(sn);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe58 	bl	80028c0 <close>
	      return SOCKERR_TIMEOUT;
 8002c10:	f06f 030c 	mvn.w	r3, #12
 8002c14:	e00c      	b.n	8002c30 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fa8e 	bl	8002144 <WIZCHIP_READ>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1de      	bne.n	8002bec <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	200009ae 	.word	0x200009ae
 8002c3c:	200009ac 	.word	0x200009ac

08002c40 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d902      	bls.n	8002c64 <send+0x24>
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	e0de      	b.n	8002e22 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	3301      	adds	r3, #1
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fa69 	bl	8002144 <WIZCHIP_READ>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <send+0x42>
 8002c7c:	f06f 0304 	mvn.w	r3, #4
 8002c80:	e0cf      	b.n	8002e22 <send+0x1e2>
   CHECK_SOCKDATA();
 8002c82:	88bb      	ldrh	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <send+0x4e>
 8002c88:	f06f 030d 	mvn.w	r3, #13
 8002c8c:	e0c9      	b.n	8002e22 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3301      	adds	r3, #1
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fa52 	bl	8002144 <WIZCHIP_READ>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b17      	cmp	r3, #23
 8002ca8:	d005      	beq.n	8002cb6 <send+0x76>
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b1c      	cmp	r3, #28
 8002cae:	d002      	beq.n	8002cb6 <send+0x76>
 8002cb0:	f06f 0306 	mvn.w	r3, #6
 8002cb4:	e0b5      	b.n	8002e22 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <send+0x1ec>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	fa42 f303 	asr.w	r3, r2, r3
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d039      	beq.n	8002d3e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	3301      	adds	r3, #1
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fa34 	bl	8002144 <WIZCHIP_READ>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d019      	beq.n	8002d22 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fa6d 	bl	80021dc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	2201      	movs	r2, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	b21a      	sxth	r2, r3
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <send+0x1ec>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	4013      	ands	r3, r2
 8002d18:	b21b      	sxth	r3, r3
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <send+0x1ec>)
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	e00d      	b.n	8002d3e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <send+0xfa>
      {
         close(sn);
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fdc6 	bl	80028c0 <close>
         return SOCKERR_TIMEOUT;
 8002d34:	f06f 030c 	mvn.w	r3, #12
 8002d38:	e073      	b.n	8002e22 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e071      	b.n	8002e22 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3301      	adds	r3, #1
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f9fa 	bl	8002144 <WIZCHIP_READ>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	029b      	lsls	r3, r3, #10
 8002d56:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002d58:	88ba      	ldrh	r2, [r7, #4]
 8002d5a:	89bb      	ldrh	r3, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d901      	bls.n	8002d64 <send+0x124>
 8002d60:	89bb      	ldrh	r3, [r7, #12]
 8002d62:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fb46 	bl	80023f8 <getSn_TX_FSR>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	3301      	adds	r3, #1
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f9e1 	bl	8002144 <WIZCHIP_READ>
 8002d82:	4603      	mov	r3, r0
 8002d84:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b17      	cmp	r3, #23
 8002d8a:	d009      	beq.n	8002da0 <send+0x160>
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b1c      	cmp	r3, #28
 8002d90:	d006      	beq.n	8002da0 <send+0x160>
      {
         close(sn);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fd93 	bl	80028c0 <close>
         return SOCKERR_SOCKSTATUS;
 8002d9a:	f06f 0306 	mvn.w	r3, #6
 8002d9e:	e040      	b.n	8002e22 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002da0:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <send+0x1f0>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	fa42 f303 	asr.w	r3, r2, r3
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <send+0x180>
 8002db4:	88ba      	ldrh	r2, [r7, #4]
 8002db6:	89bb      	ldrh	r3, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d901      	bls.n	8002dc0 <send+0x180>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e030      	b.n	8002e22 <send+0x1e2>
      if(len <= freesize) break;
 8002dc0:	88ba      	ldrh	r2, [r7, #4]
 8002dc2:	89bb      	ldrh	r3, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d900      	bls.n	8002dca <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002dc8:	e7cc      	b.n	8002d64 <send+0x124>
      if(len <= freesize) break;
 8002dca:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002dcc:	88ba      	ldrh	r2, [r7, #4]
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fba6 	bl	8002524 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	3301      	adds	r3, #1
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002de4:	2120      	movs	r1, #32
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f9f8 	bl	80021dc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002dec:	bf00      	nop
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	3301      	adds	r3, #1
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff f9a2 	bl	8002144 <WIZCHIP_READ>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f3      	bne.n	8002dee <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <send+0x1ec>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b21b      	sxth	r3, r3
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <send+0x1ec>)
 8002e1e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002e20:	88bb      	ldrh	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200009ae 	.word	0x200009ae
 8002e30:	200009ac 	.word	0x200009ac

08002e34 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d902      	bls.n	8002e58 <recv+0x24>
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e09c      	b.n	8002f92 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f96f 	bl	8002144 <WIZCHIP_READ>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d002      	beq.n	8002e76 <recv+0x42>
 8002e70:	f06f 0304 	mvn.w	r3, #4
 8002e74:	e08d      	b.n	8002f92 <recv+0x15e>
   CHECK_SOCKDATA();
 8002e76:	88bb      	ldrh	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <recv+0x4e>
 8002e7c:	f06f 030d 	mvn.w	r3, #13
 8002e80:	e087      	b.n	8002f92 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	3301      	adds	r3, #1
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f958 	bl	8002144 <WIZCHIP_READ>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	029b      	lsls	r3, r3, #10
 8002e9a:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002e9c:	89ba      	ldrh	r2, [r7, #12]
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d201      	bcs.n	8002ea8 <recv+0x74>
 8002ea4:	89bb      	ldrh	r3, [r7, #12]
 8002ea6:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff faef 	bl	800248e <getSn_RX_RSR>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3301      	adds	r3, #1
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff f93f 	bl	8002144 <WIZCHIP_READ>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b17      	cmp	r3, #23
 8002ece:	d026      	beq.n	8002f1e <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b1c      	cmp	r3, #28
 8002ed4:	d11c      	bne.n	8002f10 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002ed6:	89bb      	ldrh	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d133      	bne.n	8002f44 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa8a 	bl	80023f8 <getSn_TX_FSR>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3301      	adds	r3, #1
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f925 	bl	8002144 <WIZCHIP_READ>
 8002efa:	4603      	mov	r3, r0
 8002efc:	029b      	lsls	r3, r3, #10
 8002efe:	429c      	cmp	r4, r3
 8002f00:	d10d      	bne.n	8002f1e <recv+0xea>
               {
                  close(sn);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fcdb 	bl	80028c0 <close>
                  return SOCKERR_SOCKSTATUS;
 8002f0a:	f06f 0306 	mvn.w	r3, #6
 8002f0e:	e040      	b.n	8002f92 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fcd4 	bl	80028c0 <close>
               return SOCKERR_SOCKSTATUS;
 8002f18:	f06f 0306 	mvn.w	r3, #6
 8002f1c:	e039      	b.n	8002f92 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <recv+0x168>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	fa42 f303 	asr.w	r3, r2, r3
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <recv+0x108>
 8002f32:	89bb      	ldrh	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <recv+0x108>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e02a      	b.n	8002f92 <recv+0x15e>
         if(recvsize != 0) break;
 8002f3c:	89bb      	ldrh	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002f42:	e7b1      	b.n	8002ea8 <recv+0x74>
               if(recvsize != 0) break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <recv+0x116>
         if(recvsize != 0) break;
 8002f48:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002f4a:	89ba      	ldrh	r2, [r7, #12]
 8002f4c:	88bb      	ldrh	r3, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d201      	bcs.n	8002f56 <recv+0x122>
 8002f52:	89bb      	ldrh	r3, [r7, #12]
 8002f54:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002f56:	88ba      	ldrh	r2, [r7, #4]
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fb3d 	bl	80025dc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	3301      	adds	r3, #1
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f6e:	2140      	movs	r1, #64	; 0x40
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f933 	bl	80021dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002f76:	bf00      	nop
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f8dd 	bl	8002144 <WIZCHIP_READ>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f3      	bne.n	8002f78 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002f90:	88bb      	ldrh	r3, [r7, #4]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200009ac 	.word	0x200009ac

08002fa0 <SPIReadWrite>:
#include "wizchip_conf.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8002faa:	bf00      	nop
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <SPIReadWrite+0x48>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d1f8      	bne.n	8002fac <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <SPIReadWrite+0x48>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	79fa      	ldrb	r2, [r7, #7]
 8002fc2:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8002fc4:	bf00      	nop
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <SPIReadWrite+0x48>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d1f8      	bne.n	8002fc6 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SPIReadWrite+0x48>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	20000100 	.word	0x20000100

08002fec <wizchip_select>:

void  wizchip_select(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff6:	4802      	ldr	r0, [pc, #8]	; (8003000 <wizchip_select+0x14>)
 8002ff8:	f001 f99a 	bl	8004330 <HAL_GPIO_WritePin>
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40010c00 	.word	0x40010c00

08003004 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003008:	2201      	movs	r2, #1
 800300a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800300e:	4802      	ldr	r0, [pc, #8]	; (8003018 <wizchip_deselect+0x14>)
 8003010:	f001 f98e 	bl	8004330 <HAL_GPIO_WritePin>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40010c00 	.word	0x40010c00

0800301c <wizchip_read>:

uint8_t wizchip_read()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff ffbc 	bl	8002fa0 <SPIReadWrite>
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
	return rb;
 800302c:	79fb      	ldrb	r3, [r7, #7]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffac 	bl	8002fa0 <SPIReadWrite>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800305c:	2300      	movs	r3, #0
 800305e:	81fb      	strh	r3, [r7, #14]
 8003060:	e00c      	b.n	800307c <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7ff ff9c 	bl	8002fa0 <SPIReadWrite>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3301      	adds	r3, #1
 8003074:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	3301      	adds	r3, #1
 800307a:	81fb      	strh	r3, [r7, #14]
 800307c:	89fa      	ldrh	r2, [r7, #14]
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	429a      	cmp	r2, r3
 8003082:	d3ee      	bcc.n	8003062 <wizchip_readburst+0x12>
	}
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800309a:	2300      	movs	r3, #0
 800309c:	81fb      	strh	r3, [r7, #14]
 800309e:	e00a      	b.n	80030b6 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff7b 	bl	8002fa0 <SPIReadWrite>
		pBuf++;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3301      	adds	r3, #1
 80030ae:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80030b0:	89fb      	ldrh	r3, [r7, #14]
 80030b2:	3301      	adds	r3, #1
 80030b4:	81fb      	strh	r3, [r7, #14]
 80030b6:	89fa      	ldrh	r2, [r7, #14]
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3f0      	bcc.n	80030a0 <wizchip_writeburst+0x12>
	}
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <W5500IOInit>:

void W5500IOInit()
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <W5500IOInit+0x54>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <W5500IOInit+0x54>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6193      	str	r3, [r2, #24]
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <W5500IOInit+0x54>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80030f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80030f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fa:	2301      	movs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4619      	mov	r1, r3
 800310c:	4804      	ldr	r0, [pc, #16]	; (8003120 <W5500IOInit+0x58>)
 800310e:	f000 ff8b 	bl	8004028 <HAL_GPIO_Init>
}
 8003112:	bf00      	nop
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	40010c00 	.word	0x40010c00

08003124 <W5500Init>:

void W5500Init()
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <W5500Init+0x80>)
 800312c:	463c      	mov	r4, r7
 800312e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8003134:	f7ff ffc8 	bl	80030c8 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//CS high by default
 8003138:	2201      	movs	r2, #1
 800313a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800313e:	481a      	ldr	r0, [pc, #104]	; (80031a8 <W5500Init+0x84>)
 8003140:	f001 f8f6 	bl	8004330 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003144:	2200      	movs	r2, #0
 8003146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800314a:	4817      	ldr	r0, [pc, #92]	; (80031a8 <W5500Init+0x84>)
 800314c:	f001 f8f0 	bl	8004330 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8003150:	2002      	movs	r0, #2
 8003152:	f000 fe61 	bl	8003e18 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003156:	2201      	movs	r2, #1
 8003158:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800315c:	4812      	ldr	r0, [pc, #72]	; (80031a8 <W5500Init+0x84>)
 800315e:	f001 f8e7 	bl	8004330 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8003162:	4912      	ldr	r1, [pc, #72]	; (80031ac <W5500Init+0x88>)
 8003164:	4812      	ldr	r0, [pc, #72]	; (80031b0 <W5500Init+0x8c>)
 8003166:	f000 f88b 	bl	8003280 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800316a:	4912      	ldr	r1, [pc, #72]	; (80031b4 <W5500Init+0x90>)
 800316c:	4812      	ldr	r0, [pc, #72]	; (80031b8 <W5500Init+0x94>)
 800316e:	f000 f8ab 	bl	80032c8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8003172:	4912      	ldr	r1, [pc, #72]	; (80031bc <W5500Init+0x98>)
 8003174:	4812      	ldr	r0, [pc, #72]	; (80031c0 <W5500Init+0x9c>)
 8003176:	f000 f8d3 	bl	8003320 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 800317a:	463b      	mov	r3, r7
 800317c:	4619      	mov	r1, r3
 800317e:	2001      	movs	r0, #1
 8003180:	f000 f8fa 	bl	8003378 <ctlwizchip>
 8003184:	4603      	mov	r3, r0
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d103      	bne.n	8003194 <W5500Init+0x70>
		printf("WIZCHIP Initialized Failed.\r\n");
 800318c:	480d      	ldr	r0, [pc, #52]	; (80031c4 <W5500Init+0xa0>)
 800318e:	f002 f811 	bl	80051b4 <puts>
		while (1);
 8003192:	e7fe      	b.n	8003192 <W5500Init+0x6e>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8003194:	480c      	ldr	r0, [pc, #48]	; (80031c8 <W5500Init+0xa4>)
 8003196:	f002 f80d 	bl	80051b4 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}
 80031a2:	bf00      	nop
 80031a4:	08006754 	.word	0x08006754
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	08003005 	.word	0x08003005
 80031b0:	08002fed 	.word	0x08002fed
 80031b4:	08003037 	.word	0x08003037
 80031b8:	0800301d 	.word	0x0800301d
 80031bc:	0800308f 	.word	0x0800308f
 80031c0:	08003051 	.word	0x08003051
 80031c4:	08006710 	.word	0x08006710
 80031c8:	08006730 	.word	0x08006730

080031cc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
 8003234:	2300      	movs	r3, #0
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	807b      	strh	r3, [r7, #2]
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
	...

08003280 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <reg_wizchip_cs_cbfunc+0x16>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <reg_wizchip_cs_cbfunc+0x3c>)
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <reg_wizchip_cs_cbfunc+0x40>)
 800329a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <reg_wizchip_cs_cbfunc+0x3c>)
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <reg_wizchip_cs_cbfunc+0x44>)
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	e006      	b.n	80032b2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80032a4:	4a05      	ldr	r2, [pc, #20]	; (80032bc <reg_wizchip_cs_cbfunc+0x3c>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80032aa:	4a04      	ldr	r2, [pc, #16]	; (80032bc <reg_wizchip_cs_cbfunc+0x3c>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6193      	str	r3, [r2, #24]
   }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	2000004c 	.word	0x2000004c
 80032c0:	080031e5 	.word	0x080031e5
 80032c4:	080031f1 	.word	0x080031f1

080032c8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80032d2:	bf00      	nop
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <reg_wizchip_spi_cbfunc+0x4c>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f9      	beq.n	80032d4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <reg_wizchip_spi_cbfunc+0x24>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <reg_wizchip_spi_cbfunc+0x4c>)
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <reg_wizchip_spi_cbfunc+0x50>)
 80032f0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <reg_wizchip_spi_cbfunc+0x4c>)
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <reg_wizchip_spi_cbfunc+0x54>)
 80032f6:	621a      	str	r2, [r3, #32]
 80032f8:	e006      	b.n	8003308 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80032fa:	4a06      	ldr	r2, [pc, #24]	; (8003314 <reg_wizchip_spi_cbfunc+0x4c>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <reg_wizchip_spi_cbfunc+0x4c>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6213      	str	r3, [r2, #32]
   }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2000004c 	.word	0x2000004c
 8003318:	08003231 	.word	0x08003231
 800331c:	0800323f 	.word	0x0800323f

08003320 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800332a:	bf00      	nop
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f9      	beq.n	800332c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <reg_wizchip_spiburst_cbfunc+0x24>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003346:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800334c:	4a09      	ldr	r2, [pc, #36]	; (8003374 <reg_wizchip_spiburst_cbfunc+0x54>)
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
 8003350:	e006      	b.n	8003360 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	2000004c 	.word	0x2000004c
 8003370:	08003253 	.word	0x08003253
 8003374:	08003269 	.word	0x08003269

08003378 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	f200 80c7 	bhi.w	8003526 <ctlwizchip+0x1ae>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <ctlwizchip+0x28>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033e1 	.word	0x080033e1
 80033a4:	080033e7 	.word	0x080033e7
 80033a8:	08003413 	.word	0x08003413
 80033ac:	08003407 	.word	0x08003407
 80033b0:	08003421 	.word	0x08003421
 80033b4:	0800342d 	.word	0x0800342d
 80033b8:	0800343b 	.word	0x0800343b
 80033bc:	08003461 	.word	0x08003461
 80033c0:	08003487 	.word	0x08003487
 80033c4:	080034cb 	.word	0x080034cb
 80033c8:	080034d1 	.word	0x080034d1
 80033cc:	080034d9 	.word	0x080034d9
 80033d0:	0800352d 	.word	0x0800352d
 80033d4:	080034e1 	.word	0x080034e1
 80033d8:	080034ef 	.word	0x080034ef
 80033dc:	0800350b 	.word	0x0800350b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80033e0:	f000 f8ea 	bl	80035b8 <wizchip_sw_reset>
         break;
 80033e4:	e0a3      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3308      	adds	r3, #8
 80033f4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f927 	bl	8003650 <wizchip_init>
 8003402:	4603      	mov	r3, r0
 8003404:	e094      	b.n	8003530 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f9ac 	bl	8003768 <wizchip_clrinterrupt>
         break;
 8003410:	e08d      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003412:	f000 f9dd 	bl	80037d0 <wizchip_getinterrupt>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	801a      	strh	r2, [r3, #0]
         break;
 800341e:	e086      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f9f8 	bl	800381a <wizchip_setinterruptmask>
         break;         
 800342a:	e080      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800342c:	f000 fa10 	bl	8003850 <wizchip_getinterruptmask>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	801a      	strh	r2, [r3, #0]
         break;
 8003438:	e079      	b.n	800352e <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800344a:	f7fe fec7 	bl	80021dc <WIZCHIP_WRITE>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4619      	mov	r1, r3
 8003456:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800345a:	f7fe febf 	bl	80021dc <WIZCHIP_WRITE>
         break;
 800345e:	e066      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003460:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003464:	f7fe fe6e 	bl	8002144 <WIZCHIP_READ>
 8003468:	4603      	mov	r3, r0
 800346a:	b29b      	uxth	r3, r3
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	b29c      	uxth	r4, r3
 8003470:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003474:	f7fe fe66 	bl	8002144 <WIZCHIP_READ>
 8003478:	4603      	mov	r3, r0
 800347a:	b29b      	uxth	r3, r3
 800347c:	4423      	add	r3, r4
 800347e:	b29a      	uxth	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	801a      	strh	r2, [r3, #0]
         break;
 8003484:	e053      	b.n	800352e <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <ctlwizchip+0x1c0>)
 8003488:	789a      	ldrb	r2, [r3, #2]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	4a29      	ldr	r2, [pc, #164]	; (8003538 <ctlwizchip+0x1c0>)
 8003494:	78d2      	ldrb	r2, [r2, #3]
 8003496:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	3302      	adds	r3, #2
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <ctlwizchip+0x1c0>)
 800349e:	7912      	ldrb	r2, [r2, #4]
 80034a0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	3303      	adds	r3, #3
 80034a6:	4a24      	ldr	r2, [pc, #144]	; (8003538 <ctlwizchip+0x1c0>)
 80034a8:	7952      	ldrb	r2, [r2, #5]
 80034aa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <ctlwizchip+0x1c0>)
 80034b2:	7992      	ldrb	r2, [r2, #6]
 80034b4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	3305      	adds	r3, #5
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <ctlwizchip+0x1c0>)
 80034bc:	79d2      	ldrb	r2, [r2, #7]
 80034be:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	3306      	adds	r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
         break;
 80034c8:	e031      	b.n	800352e <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80034ca:	f000 fa13 	bl	80038f4 <wizphy_reset>
         break;
 80034ce:	e02e      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f000 fa36 	bl	8003942 <wizphy_setphyconf>
         break;
 80034d6:	e02a      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	f000 fa74 	bl	80039c6 <wizphy_getphyconf>
         break;
 80034de:	e026      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fad7 	bl	8003a98 <wizphy_setphypmode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	e020      	b.n	8003530 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80034ee:	f000 f9e8 	bl	80038c2 <wizphy_getphypmode>
 80034f2:	4603      	mov	r3, r0
 80034f4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2bff      	cmp	r3, #255	; 0xff
 80034fa:	d102      	bne.n	8003502 <ctlwizchip+0x18a>
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	e016      	b.n	8003530 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	7dfa      	ldrb	r2, [r7, #23]
 8003506:	701a      	strb	r2, [r3, #0]
         break;
 8003508:	e011      	b.n	800352e <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800350a:	f000 f9c4 	bl	8003896 <wizphy_getphylink>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2bff      	cmp	r3, #255	; 0xff
 8003516:	d102      	bne.n	800351e <ctlwizchip+0x1a6>
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	e008      	b.n	8003530 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	7dfa      	ldrb	r2, [r7, #23]
 8003522:	701a      	strb	r2, [r3, #0]
         break;
 8003524:	e003      	b.n	800352e <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	e001      	b.n	8003530 <ctlwizchip+0x1b8>
         break;
 800352c:	bf00      	nop
   }
   return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	2000004c 	.word	0x2000004c

0800353c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d82c      	bhi.n	80035a8 <ctlnetwork+0x6c>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <ctlnetwork+0x18>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	0800356d 	.word	0x0800356d
 8003558:	08003575 	.word	0x08003575
 800355c:	0800357d 	.word	0x0800357d
 8003560:	0800358b 	.word	0x0800358b
 8003564:	08003599 	.word	0x08003599
 8003568:	080035a1 	.word	0x080035a1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f000 fadd 	bl	8003b2c <wizchip_setnetinfo>
         break;
 8003572:	e01c      	b.n	80035ae <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003574:	6838      	ldr	r0, [r7, #0]
 8003576:	f000 fb19 	bl	8003bac <wizchip_getnetinfo>
         break;
 800357a:	e018      	b.n	80035ae <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fb53 	bl	8003c2c <wizchip_setnetmode>
 8003586:	4603      	mov	r3, r0
 8003588:	e012      	b.n	80035b0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800358a:	f000 fb71 	bl	8003c70 <wizchip_getnetmode>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	701a      	strb	r2, [r3, #0]
         break;
 8003596:	e00a      	b.n	80035ae <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f000 fb71 	bl	8003c80 <wizchip_settimeout>
         break;
 800359e:	e006      	b.n	80035ae <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	f000 fb8e 	bl	8003cc2 <wizchip_gettimeout>
         break;
 80035a6:	e002      	b.n	80035ae <ctlnetwork+0x72>
      default:
         return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	e000      	b.n	80035b0 <ctlnetwork+0x74>
   }
   return 0;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	2206      	movs	r2, #6
 80035c2:	4619      	mov	r1, r3
 80035c4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035c8:	f7fe fe56 	bl	8002278 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2204      	movs	r2, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035d8:	f7fe fe4e 	bl	8002278 <WIZCHIP_READ_BUF>
 80035dc:	f107 0310 	add.w	r3, r7, #16
 80035e0:	2204      	movs	r2, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80035e8:	f7fe fe46 	bl	8002278 <WIZCHIP_READ_BUF>
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	2204      	movs	r2, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80035f8:	f7fe fe3e 	bl	8002278 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fe fdec 	bl	80021dc <WIZCHIP_WRITE>
   getMR(); // for delay
 8003604:	2000      	movs	r0, #0
 8003606:	f7fe fd9d 	bl	8002144 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	2206      	movs	r2, #6
 800360e:	4619      	mov	r1, r3
 8003610:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003614:	f7fe fe90 	bl	8002338 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2204      	movs	r2, #4
 800361e:	4619      	mov	r1, r3
 8003620:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003624:	f7fe fe88 	bl	8002338 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2204      	movs	r2, #4
 800362e:	4619      	mov	r1, r3
 8003630:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003634:	f7fe fe80 	bl	8002338 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	2204      	movs	r2, #4
 800363e:	4619      	mov	r1, r3
 8003640:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003644:	f7fe fe78 	bl	8002338 <WIZCHIP_WRITE_BUF>
}
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800365e:	f7ff ffab 	bl	80035b8 <wizchip_sw_reset>
   if(txsize)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03b      	beq.n	80036e0 <wizchip_init+0x90>
   {
      tmp = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e015      	b.n	800369e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	781a      	ldrb	r2, [r3, #0]
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	4413      	add	r3, r2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003688:	2b10      	cmp	r3, #16
 800368a:	dd02      	ble.n	8003692 <wizchip_init+0x42>
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	e066      	b.n	8003760 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a2:	2b07      	cmp	r3, #7
 80036a4:	dde5      	ble.n	8003672 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e015      	b.n	80036d8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80036ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	3301      	adds	r3, #1
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80036ba:	4618      	mov	r0, r3
 80036bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fe fd88 	bl	80021dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036dc:	2b07      	cmp	r3, #7
 80036de:	dde5      	ble.n	80036ac <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d03b      	beq.n	800375e <wizchip_init+0x10e>
   {
      tmp = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	e015      	b.n	800371c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80036f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	7bbb      	ldrb	r3, [r7, #14]
 80036fc:	4413      	add	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003706:	2b10      	cmp	r3, #16
 8003708:	dd02      	ble.n	8003710 <wizchip_init+0xc0>
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	e027      	b.n	8003760 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	2b07      	cmp	r3, #7
 8003722:	dde5      	ble.n	80036f0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e015      	b.n	8003756 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3301      	adds	r3, #1
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003738:	4618      	mov	r0, r3
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4413      	add	r3, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	f7fe fd49 	bl	80021dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	2b07      	cmp	r3, #7
 800375c:	dde5      	ble.n	800372a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	b29b      	uxth	r3, r3
 800377c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	f023 030f 	bic.w	r3, r3, #15
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800378c:	f7fe fd26 	bl	80021dc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	e014      	b.n	80037c0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003796:	7bba      	ldrb	r2, [r7, #14]
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	fa42 f303 	asr.w	r3, r2, r3
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <wizchip_clrinterrupt+0x52>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	3301      	adds	r3, #1
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037b2:	211f      	movs	r1, #31
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fd11 	bl	80021dc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3301      	adds	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d9e7      	bls.n	8003796 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80037e2:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80037e6:	f7fe fcad 	bl	8002144 <WIZCHIP_READ>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f023 030f 	bic.w	r3, r3, #15
 80037f0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80037f2:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80037f6:	f7fe fca5 	bl	8002144 <WIZCHIP_READ>
 80037fa:	4603      	mov	r3, r0
 80037fc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80037fe:	79bb      	ldrb	r3, [r7, #6]
 8003800:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003802:	88bb      	ldrh	r3, [r7, #4]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	b29a      	uxth	r2, r3
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4413      	add	r3, r2
 800380e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003810:	88bb      	ldrh	r3, [r7, #4]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	4619      	mov	r1, r3
 8003834:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003838:	f7fe fcd0 	bl	80021dc <WIZCHIP_WRITE>
   setSIMR(simr);
 800383c:	7bbb      	ldrb	r3, [r7, #14]
 800383e:	4619      	mov	r1, r3
 8003840:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003844:	f7fe fcca 	bl	80021dc <WIZCHIP_WRITE>
#endif   
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003862:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003866:	f7fe fc6d 	bl	8002144 <WIZCHIP_READ>
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800386e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003872:	f7fe fc67 	bl	8002144 <WIZCHIP_READ>
 8003876:	4603      	mov	r3, r0
 8003878:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800387a:	79bb      	ldrb	r3, [r7, #6]
 800387c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800387e:	88bb      	ldrh	r3, [r7, #4]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	b29a      	uxth	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4413      	add	r3, r2
 800388a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800388c:	88bb      	ldrh	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800389c:	2300      	movs	r3, #0
 800389e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80038a0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038a4:	f7fe fc4e 	bl	8002144 <WIZCHIP_READ>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80038b2:	2301      	movs	r3, #1
 80038b4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80038cc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038d0:	f7fe fc38 	bl	8002144 <WIZCHIP_READ>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038da:	2b30      	cmp	r3, #48	; 0x30
 80038dc:	d102      	bne.n	80038e4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80038de:	2301      	movs	r3, #1
 80038e0:	71fb      	strb	r3, [r7, #7]
 80038e2:	e001      	b.n	80038e8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80038e4:	2300      	movs	r3, #0
 80038e6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80038fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038fe:	f7fe fc21 	bl	8002144 <WIZCHIP_READ>
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800390c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	4619      	mov	r1, r3
 8003912:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003916:	f7fe fc61 	bl	80021dc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800391a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800391e:	f7fe fc11 	bl	8002144 <WIZCHIP_READ>
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800392c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	4619      	mov	r1, r3
 8003932:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003936:	f7fe fc51 	bl	80021dc <WIZCHIP_WRITE>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d104      	bne.n	8003960 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e003      	b.n	8003968 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003966:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e019      	b.n	80039ae <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	78db      	ldrb	r3, [r3, #3]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10d      	bne.n	800399e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	789b      	ldrb	r3, [r3, #2]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d104      	bne.n	8003994 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	f043 0318 	orr.w	r3, r3, #24
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e00c      	b.n	80039ae <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	f043 0308 	orr.w	r3, r3, #8
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e007      	b.n	80039ae <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	789b      	ldrb	r3, [r3, #2]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d103      	bne.n	80039ae <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	4619      	mov	r1, r3
 80039b2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039b6:	f7fe fc11 	bl	80021dc <WIZCHIP_WRITE>
   wizphy_reset();
 80039ba:	f7ff ff9b 	bl	80038f4 <wizphy_reset>
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80039d2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039d6:	f7fe fbb5 	bl	8002144 <WIZCHIP_READ>
 80039da:	4603      	mov	r3, r0
 80039dc:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	119b      	asrs	r3, r3, #6
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d001      	beq.n	80039fc <wizphy_getphyconf+0x36>
 80039f8:	2b38      	cmp	r3, #56	; 0x38
 80039fa:	d103      	bne.n	8003a04 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	705a      	strb	r2, [r3, #1]
         break;
 8003a02:	e003      	b.n	8003a0c <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	705a      	strb	r2, [r3, #1]
         break;
 8003a0a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a12:	3b10      	subs	r3, #16
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	bf8c      	ite	hi
 8003a18:	2201      	movhi	r2, #1
 8003a1a:	2200      	movls	r2, #0
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d111      	bne.n	8003a46 <wizphy_getphyconf+0x80>
 8003a22:	2201      	movs	r2, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	709a      	strb	r2, [r3, #2]
         break;
 8003a44:	e003      	b.n	8003a4e <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	709a      	strb	r2, [r3, #2]
         break;
 8003a4c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a54:	3b08      	subs	r3, #8
 8003a56:	2b18      	cmp	r3, #24
 8003a58:	bf8c      	ite	hi
 8003a5a:	2201      	movhi	r2, #1
 8003a5c:	2200      	movls	r2, #0
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d111      	bne.n	8003a88 <wizphy_getphyconf+0xc2>
 8003a64:	2201      	movs	r2, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	70da      	strb	r2, [r3, #3]
         break;
 8003a86:	e003      	b.n	8003a90 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	70da      	strb	r2, [r3, #3]
         break;
 8003a8e:	bf00      	nop
   }
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003aa6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aaa:	f7fe fb4b 	bl	8002144 <WIZCHIP_READ>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <wizphy_setphypmode+0x2a>
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	e030      	b.n	8003b24 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003ac8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d104      	bne.n	8003ada <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e003      	b.n	8003ae2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003ae0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aea:	f7fe fb77 	bl	80021dc <WIZCHIP_WRITE>
   wizphy_reset();
 8003aee:	f7ff ff01 	bl	80038f4 <wizphy_reset>
   tmp = getPHYCFGR();
 8003af2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003af6:	f7fe fb25 	bl	8002144 <WIZCHIP_READ>
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <wizphy_setphypmode+0x88>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e008      	b.n	8003b24 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <wizphy_setphypmode+0x88>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e001      	b.n	8003b24 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2206      	movs	r2, #6
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003b3e:	f7fe fbfb 	bl	8002338 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	330e      	adds	r3, #14
 8003b46:	2204      	movs	r2, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b4e:	f7fe fbf3 	bl	8002338 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	330a      	adds	r3, #10
 8003b56:	2204      	movs	r2, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003b5e:	f7fe fbeb 	bl	8002338 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3306      	adds	r3, #6
 8003b66:	2204      	movs	r2, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003b6e:	f7fe fbe3 	bl	8002338 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7c9a      	ldrb	r2, [r3, #18]
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <wizchip_setnetinfo+0x78>)
 8003b78:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7cda      	ldrb	r2, [r3, #19]
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <wizchip_setnetinfo+0x78>)
 8003b80:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7d1a      	ldrb	r2, [r3, #20]
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <wizchip_setnetinfo+0x78>)
 8003b88:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7d5a      	ldrb	r2, [r3, #21]
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <wizchip_setnetinfo+0x78>)
 8003b90:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7d9a      	ldrb	r2, [r3, #22]
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <wizchip_setnetinfo+0x7c>)
 8003b98:	701a      	strb	r2, [r3, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200009c8 	.word	0x200009c8
 8003ba8:	200009cc 	.word	0x200009cc

08003bac <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2206      	movs	r2, #6
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003bbe:	f7fe fb5b 	bl	8002278 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	330e      	adds	r3, #14
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bce:	f7fe fb53 	bl	8002278 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	330a      	adds	r3, #10
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003bde:	f7fe fb4b 	bl	8002278 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3306      	adds	r3, #6
 8003be6:	2204      	movs	r2, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003bee:	f7fe fb43 	bl	8002278 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <wizchip_getnetinfo+0x78>)
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <wizchip_getnetinfo+0x78>)
 8003bfc:	785a      	ldrb	r2, [r3, #1]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <wizchip_getnetinfo+0x78>)
 8003c04:	789a      	ldrb	r2, [r3, #2]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <wizchip_getnetinfo+0x78>)
 8003c0c:	78da      	ldrb	r2, [r3, #3]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <wizchip_getnetinfo+0x7c>)
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	759a      	strb	r2, [r3, #22]
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200009c8 	.word	0x200009c8
 8003c28:	200009cc 	.word	0x200009cc

08003c2c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <wizchip_setnetmode+0x1e>
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e00e      	b.n	8003c68 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fe fa7a 	bl	8002144 <WIZCHIP_READ>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	2000      	movs	r0, #0
 8003c62:	f7fe fabb 	bl	80021dc <WIZCHIP_WRITE>
   return 0;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7fe fa65 	bl	8002144 <WIZCHIP_READ>
 8003c7a:	4603      	mov	r3, r0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003c92:	f7fe faa3 	bl	80021dc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	885b      	ldrh	r3, [r3, #2]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003ca6:	f7fe fa99 	bl	80021dc <WIZCHIP_WRITE>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	885b      	ldrh	r3, [r3, #2]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003cb6:	f7fe fa91 	bl	80021dc <WIZCHIP_WRITE>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003cc2:	b590      	push	{r4, r7, lr}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003cca:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003cce:	f7fe fa39 	bl	8002144 <WIZCHIP_READ>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003cda:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003cde:	f7fe fa31 	bl	8002144 <WIZCHIP_READ>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b29c      	uxth	r4, r3
 8003cea:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003cee:	f7fe fa29 	bl	8002144 <WIZCHIP_READ>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4423      	add	r3, r4
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	805a      	strh	r2, [r3, #2]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}
	...

08003d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d08:	f7fc fe36 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d0c:	480b      	ldr	r0, [pc, #44]	; (8003d3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003d0e:	490c      	ldr	r1, [pc, #48]	; (8003d40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003d10:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d14:	e002      	b.n	8003d1c <LoopCopyDataInit>

08003d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d1a:	3304      	adds	r3, #4

08003d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d20:	d3f9      	bcc.n	8003d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d24:	4c09      	ldr	r4, [pc, #36]	; (8003d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d28:	e001      	b.n	8003d2e <LoopFillZerobss>

08003d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d2c:	3204      	adds	r2, #4

08003d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d30:	d3fb      	bcc.n	8003d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d32:	f001 f97f 	bl	8005034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d36:	f7fc fa7f 	bl	8000238 <main>
  bx lr
 8003d3a:	4770      	bx	lr
  ldr r0, =_sdata
 8003d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d40:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8003d44:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 8003d48:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8003d4c:	200009e4 	.word	0x200009e4

08003d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d50:	e7fe      	b.n	8003d50 <ADC1_2_IRQHandler>
	...

08003d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_Init+0x28>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_Init+0x28>)
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d64:	2003      	movs	r0, #3
 8003d66:	f000 f92b 	bl	8003fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f000 f808 	bl	8003d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d70:	f7fc fc74 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000

08003d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_InitTick+0x54>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_InitTick+0x58>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f935 	bl	800400e <HAL_SYSTICK_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00e      	b.n	8003dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d80a      	bhi.n	8003dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db4:	2200      	movs	r2, #0
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	f000 f90b 	bl	8003fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dc0:	4a06      	ldr	r2, [pc, #24]	; (8003ddc <HAL_InitTick+0x5c>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000044 	.word	0x20000044
 8003dd8:	2000007c 	.word	0x2000007c
 8003ddc:	20000078 	.word	0x20000078

08003de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_IncTick+0x1c>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_IncTick+0x20>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	4a03      	ldr	r2, [pc, #12]	; (8003e00 <HAL_IncTick+0x20>)
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	2000007c 	.word	0x2000007c
 8003e00:	200009d0 	.word	0x200009d0

08003e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <HAL_GetTick+0x10>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	200009d0 	.word	0x200009d0

08003e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7ff fff0 	bl	8003e04 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d005      	beq.n	8003e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_Delay+0x44>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e3e:	bf00      	nop
 8003e40:	f7ff ffe0 	bl	8003e04 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d8f7      	bhi.n	8003e40 <HAL_Delay+0x28>
  {
  }
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	2000007c 	.word	0x2000007c

08003e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e92:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	60d3      	str	r3, [r2, #12]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f003 0307 	and.w	r3, r3, #7
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	db0a      	blt.n	8003eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	490c      	ldr	r1, [pc, #48]	; (8003f10 <__NVIC_SetPriority+0x4c>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eec:	e00a      	b.n	8003f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4908      	ldr	r1, [pc, #32]	; (8003f14 <__NVIC_SetPriority+0x50>)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3b04      	subs	r3, #4
 8003efc:	0112      	lsls	r2, r2, #4
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	440b      	add	r3, r1
 8003f02:	761a      	strb	r2, [r3, #24]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f1c3 0307 	rsb	r3, r3, #7
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	bf28      	it	cs
 8003f36:	2304      	movcs	r3, #4
 8003f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d902      	bls.n	8003f48 <NVIC_EncodePriority+0x30>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3b03      	subs	r3, #3
 8003f46:	e000      	b.n	8003f4a <NVIC_EncodePriority+0x32>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	43d9      	mvns	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	4313      	orrs	r3, r2
         );
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	; 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f8c:	d301      	bcc.n	8003f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e00f      	b.n	8003fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <SysTick_Config+0x40>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f9a:	210f      	movs	r1, #15
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	f7ff ff90 	bl	8003ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <SysTick_Config+0x40>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <SysTick_Config+0x40>)
 8003fac:	2207      	movs	r2, #7
 8003fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	e000e010 	.word	0xe000e010

08003fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff49 	bl	8003e60 <__NVIC_SetPriorityGrouping>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe8:	f7ff ff5e 	bl	8003ea8 <__NVIC_GetPriorityGrouping>
 8003fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f7ff ff90 	bl	8003f18 <NVIC_EncodePriority>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff5f 	bl	8003ec4 <__NVIC_SetPriority>
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ffb0 	bl	8003f7c <SysTick_Config>
 800401c:	4603      	mov	r3, r0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004028:	b480      	push	{r7}
 800402a:	b08b      	sub	sp, #44	; 0x2c
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004032:	2300      	movs	r3, #0
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004036:	2300      	movs	r3, #0
 8004038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800403a:	e169      	b.n	8004310 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800403c:	2201      	movs	r2, #1
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	429a      	cmp	r2, r3
 8004056:	f040 8158 	bne.w	800430a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a9a      	ldr	r2, [pc, #616]	; (80042c8 <HAL_GPIO_Init+0x2a0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d05e      	beq.n	8004122 <HAL_GPIO_Init+0xfa>
 8004064:	4a98      	ldr	r2, [pc, #608]	; (80042c8 <HAL_GPIO_Init+0x2a0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d875      	bhi.n	8004156 <HAL_GPIO_Init+0x12e>
 800406a:	4a98      	ldr	r2, [pc, #608]	; (80042cc <HAL_GPIO_Init+0x2a4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d058      	beq.n	8004122 <HAL_GPIO_Init+0xfa>
 8004070:	4a96      	ldr	r2, [pc, #600]	; (80042cc <HAL_GPIO_Init+0x2a4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d86f      	bhi.n	8004156 <HAL_GPIO_Init+0x12e>
 8004076:	4a96      	ldr	r2, [pc, #600]	; (80042d0 <HAL_GPIO_Init+0x2a8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d052      	beq.n	8004122 <HAL_GPIO_Init+0xfa>
 800407c:	4a94      	ldr	r2, [pc, #592]	; (80042d0 <HAL_GPIO_Init+0x2a8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d869      	bhi.n	8004156 <HAL_GPIO_Init+0x12e>
 8004082:	4a94      	ldr	r2, [pc, #592]	; (80042d4 <HAL_GPIO_Init+0x2ac>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d04c      	beq.n	8004122 <HAL_GPIO_Init+0xfa>
 8004088:	4a92      	ldr	r2, [pc, #584]	; (80042d4 <HAL_GPIO_Init+0x2ac>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d863      	bhi.n	8004156 <HAL_GPIO_Init+0x12e>
 800408e:	4a92      	ldr	r2, [pc, #584]	; (80042d8 <HAL_GPIO_Init+0x2b0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d046      	beq.n	8004122 <HAL_GPIO_Init+0xfa>
 8004094:	4a90      	ldr	r2, [pc, #576]	; (80042d8 <HAL_GPIO_Init+0x2b0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d85d      	bhi.n	8004156 <HAL_GPIO_Init+0x12e>
 800409a:	2b12      	cmp	r3, #18
 800409c:	d82a      	bhi.n	80040f4 <HAL_GPIO_Init+0xcc>
 800409e:	2b12      	cmp	r3, #18
 80040a0:	d859      	bhi.n	8004156 <HAL_GPIO_Init+0x12e>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <HAL_GPIO_Init+0x80>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	08004123 	.word	0x08004123
 80040ac:	080040fd 	.word	0x080040fd
 80040b0:	0800410f 	.word	0x0800410f
 80040b4:	08004151 	.word	0x08004151
 80040b8:	08004157 	.word	0x08004157
 80040bc:	08004157 	.word	0x08004157
 80040c0:	08004157 	.word	0x08004157
 80040c4:	08004157 	.word	0x08004157
 80040c8:	08004157 	.word	0x08004157
 80040cc:	08004157 	.word	0x08004157
 80040d0:	08004157 	.word	0x08004157
 80040d4:	08004157 	.word	0x08004157
 80040d8:	08004157 	.word	0x08004157
 80040dc:	08004157 	.word	0x08004157
 80040e0:	08004157 	.word	0x08004157
 80040e4:	08004157 	.word	0x08004157
 80040e8:	08004157 	.word	0x08004157
 80040ec:	08004105 	.word	0x08004105
 80040f0:	08004119 	.word	0x08004119
 80040f4:	4a79      	ldr	r2, [pc, #484]	; (80042dc <HAL_GPIO_Init+0x2b4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040fa:	e02c      	b.n	8004156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	623b      	str	r3, [r7, #32]
          break;
 8004102:	e029      	b.n	8004158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	623b      	str	r3, [r7, #32]
          break;
 800410c:	e024      	b.n	8004158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	3308      	adds	r3, #8
 8004114:	623b      	str	r3, [r7, #32]
          break;
 8004116:	e01f      	b.n	8004158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	330c      	adds	r3, #12
 800411e:	623b      	str	r3, [r7, #32]
          break;
 8004120:	e01a      	b.n	8004158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800412a:	2304      	movs	r3, #4
 800412c:	623b      	str	r3, [r7, #32]
          break;
 800412e:	e013      	b.n	8004158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004138:	2308      	movs	r3, #8
 800413a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	611a      	str	r2, [r3, #16]
          break;
 8004142:	e009      	b.n	8004158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004144:	2308      	movs	r3, #8
 8004146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	615a      	str	r2, [r3, #20]
          break;
 800414e:	e003      	b.n	8004158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004150:	2300      	movs	r3, #0
 8004152:	623b      	str	r3, [r7, #32]
          break;
 8004154:	e000      	b.n	8004158 <HAL_GPIO_Init+0x130>
          break;
 8004156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2bff      	cmp	r3, #255	; 0xff
 800415c:	d801      	bhi.n	8004162 <HAL_GPIO_Init+0x13a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	e001      	b.n	8004166 <HAL_GPIO_Init+0x13e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2bff      	cmp	r3, #255	; 0xff
 800416c:	d802      	bhi.n	8004174 <HAL_GPIO_Init+0x14c>
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	e002      	b.n	800417a <HAL_GPIO_Init+0x152>
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	3b08      	subs	r3, #8
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	210f      	movs	r1, #15
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	6a39      	ldr	r1, [r7, #32]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	431a      	orrs	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80b1 	beq.w	800430a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041a8:	4b4d      	ldr	r3, [pc, #308]	; (80042e0 <HAL_GPIO_Init+0x2b8>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	4a4c      	ldr	r2, [pc, #304]	; (80042e0 <HAL_GPIO_Init+0x2b8>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6193      	str	r3, [r2, #24]
 80041b4:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <HAL_GPIO_Init+0x2b8>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80041c0:	4a48      	ldr	r2, [pc, #288]	; (80042e4 <HAL_GPIO_Init+0x2bc>)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	3302      	adds	r3, #2
 80041c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	220f      	movs	r2, #15
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4013      	ands	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <HAL_GPIO_Init+0x2c0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_GPIO_Init+0x1ec>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3f      	ldr	r2, [pc, #252]	; (80042ec <HAL_GPIO_Init+0x2c4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00d      	beq.n	8004210 <HAL_GPIO_Init+0x1e8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3e      	ldr	r2, [pc, #248]	; (80042f0 <HAL_GPIO_Init+0x2c8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <HAL_GPIO_Init+0x1e4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3d      	ldr	r2, [pc, #244]	; (80042f4 <HAL_GPIO_Init+0x2cc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_GPIO_Init+0x1e0>
 8004204:	2303      	movs	r3, #3
 8004206:	e006      	b.n	8004216 <HAL_GPIO_Init+0x1ee>
 8004208:	2304      	movs	r3, #4
 800420a:	e004      	b.n	8004216 <HAL_GPIO_Init+0x1ee>
 800420c:	2302      	movs	r3, #2
 800420e:	e002      	b.n	8004216 <HAL_GPIO_Init+0x1ee>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_GPIO_Init+0x1ee>
 8004214:	2300      	movs	r3, #0
 8004216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004218:	f002 0203 	and.w	r2, r2, #3
 800421c:	0092      	lsls	r2, r2, #2
 800421e:	4093      	lsls	r3, r2
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004226:	492f      	ldr	r1, [pc, #188]	; (80042e4 <HAL_GPIO_Init+0x2bc>)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	3302      	adds	r3, #2
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d006      	beq.n	800424e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004240:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	492c      	ldr	r1, [pc, #176]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]
 800424c:	e006      	b.n	800425c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	43db      	mvns	r3, r3
 8004256:	4928      	ldr	r1, [pc, #160]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004258:	4013      	ands	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d006      	beq.n	8004276 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004268:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	4922      	ldr	r1, [pc, #136]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	60cb      	str	r3, [r1, #12]
 8004274:	e006      	b.n	8004284 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	43db      	mvns	r3, r3
 800427e:	491e      	ldr	r1, [pc, #120]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004280:	4013      	ands	r3, r2
 8004282:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4918      	ldr	r1, [pc, #96]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	e006      	b.n	80042ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	4914      	ldr	r1, [pc, #80]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d021      	beq.n	80042fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	490e      	ldr	r1, [pc, #56]	; (80042f8 <HAL_GPIO_Init+0x2d0>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
 80042c4:	e021      	b.n	800430a <HAL_GPIO_Init+0x2e2>
 80042c6:	bf00      	nop
 80042c8:	10320000 	.word	0x10320000
 80042cc:	10310000 	.word	0x10310000
 80042d0:	10220000 	.word	0x10220000
 80042d4:	10210000 	.word	0x10210000
 80042d8:	10120000 	.word	0x10120000
 80042dc:	10110000 	.word	0x10110000
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010800 	.word	0x40010800
 80042ec:	40010c00 	.word	0x40010c00
 80042f0:	40011000 	.word	0x40011000
 80042f4:	40011400 	.word	0x40011400
 80042f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_GPIO_Init+0x304>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	43db      	mvns	r3, r3
 8004304:	4909      	ldr	r1, [pc, #36]	; (800432c <HAL_GPIO_Init+0x304>)
 8004306:	4013      	ands	r3, r2
 8004308:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	3301      	adds	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	fa22 f303 	lsr.w	r3, r2, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	f47f ae8e 	bne.w	800403c <HAL_GPIO_Init+0x14>
  }
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	372c      	adds	r7, #44	; 0x2c
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	40010400 	.word	0x40010400

08004330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800434c:	e003      	b.n	8004356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	611a      	str	r2, [r3, #16]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e272      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8087 	beq.w	800448e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004380:	4b92      	ldr	r3, [pc, #584]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b04      	cmp	r3, #4
 800438a:	d00c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800438c:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d112      	bne.n	80043be <HAL_RCC_OscConfig+0x5e>
 8004398:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d10b      	bne.n	80043be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a6:	4b89      	ldr	r3, [pc, #548]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d06c      	beq.n	800448c <HAL_RCC_OscConfig+0x12c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d168      	bne.n	800448c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e24c      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x76>
 80043c8:	4b80      	ldr	r3, [pc, #512]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a7f      	ldr	r2, [pc, #508]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e02e      	b.n	8004434 <HAL_RCC_OscConfig+0xd4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x98>
 80043de:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7a      	ldr	r2, [pc, #488]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b78      	ldr	r3, [pc, #480]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a77      	ldr	r2, [pc, #476]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xd4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0xbc>
 8004402:	4b72      	ldr	r3, [pc, #456]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a71      	ldr	r2, [pc, #452]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xd4>
 800441c:	4b6b      	ldr	r3, [pc, #428]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6a      	ldr	r2, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a67      	ldr	r2, [pc, #412]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7ff fce2 	bl	8003e04 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7ff fcde 	bl	8003e04 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e200      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xe4>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7ff fcce 	bl	8003e04 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7ff fcca 	bl	8003e04 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1ec      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x10c>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800449a:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x18c>
 80044b2:	4b46      	ldr	r3, [pc, #280]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b43      	ldr	r3, [pc, #268]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x176>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1c0      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4939      	ldr	r1, [pc, #228]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7ff fc83 	bl	8003e04 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004502:	f7ff fc7f 	bl	8003e04 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1a1      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4927      	ldr	r1, [pc, #156]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7ff fc62 	bl	8003e04 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004544:	f7ff fc5e 	bl	8003e04 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e180      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03a      	beq.n	80045e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d019      	beq.n	80045aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <HAL_RCC_OscConfig+0x274>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457c:	f7ff fc42 	bl	8003e04 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7ff fc3e 	bl	8003e04 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e160      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045a2:	2001      	movs	r0, #1
 80045a4:	f000 face 	bl	8004b44 <RCC_Delay>
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <HAL_RCC_OscConfig+0x274>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b0:	f7ff fc28 	bl	8003e04 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b6:	e00f      	b.n	80045d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b8:	f7ff fc24 	bl	8003e04 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d908      	bls.n	80045d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e146      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	42420000 	.word	0x42420000
 80045d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	4b92      	ldr	r3, [pc, #584]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e9      	bne.n	80045b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a6 	beq.w	800473e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b8b      	ldr	r3, [pc, #556]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10d      	bne.n	800461e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b88      	ldr	r3, [pc, #544]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4a87      	ldr	r2, [pc, #540]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	61d3      	str	r3, [r2, #28]
 800460e:	4b85      	ldr	r3, [pc, #532]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b82      	ldr	r3, [pc, #520]	; (8004828 <HAL_RCC_OscConfig+0x4c8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b7f      	ldr	r3, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x4c8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7e      	ldr	r2, [pc, #504]	; (8004828 <HAL_RCC_OscConfig+0x4c8>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7ff fbe5 	bl	8003e04 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7ff fbe1 	bl	8003e04 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b64      	cmp	r3, #100	; 0x64
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e103      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b75      	ldr	r3, [pc, #468]	; (8004828 <HAL_RCC_OscConfig+0x4c8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x312>
 8004664:	4b6f      	ldr	r3, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4a6e      	ldr	r2, [pc, #440]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6213      	str	r3, [r2, #32]
 8004670:	e02d      	b.n	80046ce <HAL_RCC_OscConfig+0x36e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x334>
 800467a:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4a69      	ldr	r2, [pc, #420]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	6213      	str	r3, [r2, #32]
 8004686:	4b67      	ldr	r3, [pc, #412]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4a66      	ldr	r2, [pc, #408]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	f023 0304 	bic.w	r3, r3, #4
 8004690:	6213      	str	r3, [r2, #32]
 8004692:	e01c      	b.n	80046ce <HAL_RCC_OscConfig+0x36e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x356>
 800469c:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a60      	ldr	r2, [pc, #384]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	f043 0304 	orr.w	r3, r3, #4
 80046a6:	6213      	str	r3, [r2, #32]
 80046a8:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6213      	str	r3, [r2, #32]
 80046b4:	e00b      	b.n	80046ce <HAL_RCC_OscConfig+0x36e>
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a5a      	ldr	r2, [pc, #360]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6213      	str	r3, [r2, #32]
 80046c2:	4b58      	ldr	r3, [pc, #352]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4a57      	ldr	r2, [pc, #348]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7ff fb95 	bl	8003e04 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7ff fb91 	bl	8003e04 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0b1      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ee      	beq.n	80046de <HAL_RCC_OscConfig+0x37e>
 8004700:	e014      	b.n	800472c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7ff fb7f 	bl	8003e04 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7ff fb7b 	bl	8003e04 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e09b      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004720:	4b40      	ldr	r3, [pc, #256]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ee      	bne.n	800470a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4b3c      	ldr	r3, [pc, #240]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4a3b      	ldr	r2, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8087 	beq.w	8004856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004748:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b08      	cmp	r3, #8
 8004752:	d061      	beq.n	8004818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d146      	bne.n	80047ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475c:	4b33      	ldr	r3, [pc, #204]	; (800482c <HAL_RCC_OscConfig+0x4cc>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7ff fb4f 	bl	8003e04 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7ff fb4b 	bl	8003e04 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e06d      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477c:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4921      	ldr	r1, [pc, #132]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a4:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a19      	ldr	r1, [r3, #32]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	430b      	orrs	r3, r1
 80047b6:	491b      	ldr	r1, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_RCC_OscConfig+0x4cc>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7ff fb1f 	bl	8003e04 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7ff fb1b 	bl	8003e04 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e03d      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x46a>
 80047e8:	e035      	b.n	8004856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_RCC_OscConfig+0x4cc>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7ff fb08 	bl	8003e04 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7ff fb04 	bl	8003e04 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e026      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x498>
 8004816:	e01e      	b.n	8004856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e019      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
 800482c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_OscConfig+0x500>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	429a      	cmp	r2, r3
 8004842:	d106      	bne.n	8004852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000

08004864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0d0      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	4965      	ldr	r1, [pc, #404]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b8      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d8:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	494d      	ldr	r1, [pc, #308]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d040      	beq.n	8004984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d115      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e073      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06b      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4936      	ldr	r1, [pc, #216]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004954:	f7ff fa56 	bl	8003e04 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7ff fa52 	bl	8003e04 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e053      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d210      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	4922      	ldr	r1, [pc, #136]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	490e      	ldr	r1, [pc, #56]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f2:	f000 f821 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	490a      	ldr	r1, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	5ccb      	ldrb	r3, [r1, r3]
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1cc>)
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1d0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff f9b4 	bl	8003d80 <HAL_InitTick>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40022000 	.word	0x40022000
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	08006764 	.word	0x08006764
 8004a30:	20000044 	.word	0x20000044
 8004a34:	20000078 	.word	0x20000078

08004a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a52:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <HAL_RCC_GetSysClockFreq+0x94>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d002      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x30>
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_GetSysClockFreq+0x36>
 8004a66:	e027      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a6a:	613b      	str	r3, [r7, #16]
      break;
 8004a6c:	e027      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	0c9b      	lsrs	r3, r3, #18
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d010      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_GetSysClockFreq+0x94>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	0c5b      	lsrs	r3, r3, #17
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a92:	5cd3      	ldrb	r3, [r2, r3]
 8004a94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a9a:	fb03 f202 	mul.w	r2, r3, r2
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	613b      	str	r3, [r7, #16]
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004aba:	613b      	str	r3, [r7, #16]
      break;
 8004abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004abe:	693b      	ldr	r3, [r7, #16]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	007a1200 	.word	0x007a1200
 8004ad4:	0800677c 	.word	0x0800677c
 8004ad8:	0800678c 	.word	0x0800678c
 8004adc:	003d0900 	.word	0x003d0900

08004ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b02      	ldr	r3, [pc, #8]	; (8004af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	20000044 	.word	0x20000044

08004af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004af8:	f7ff fff2 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	08006774 	.word	0x08006774

08004b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b20:	f7ff ffde 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	0adb      	lsrs	r3, r3, #11
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08006774 	.word	0x08006774

08004b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <RCC_Delay+0x34>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <RCC_Delay+0x38>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	0a5b      	lsrs	r3, r3, #9
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b60:	bf00      	nop
  }
  while (Delay --);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	60fa      	str	r2, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f9      	bne.n	8004b60 <RCC_Delay+0x1c>
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	20000044 	.word	0x20000044
 8004b7c:	10624dd3 	.word	0x10624dd3

08004b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e076      	b.n	8004c80 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba2:	d009      	beq.n	8004bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
 8004baa:	e005      	b.n	8004bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fb fd74 	bl	80006c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	0c1a      	lsrs	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f002 0204 	and.w	r2, r2, #4
 8004c5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e042      	b.n	8004d20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fb fd50 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	; 0x24
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f91d 	bl	8004f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d16d      	bne.n	8004e24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Transmit+0x2c>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e066      	b.n	8004e26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2221      	movs	r2, #33	; 0x21
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d66:	f7ff f84d 	bl	8003e04 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Transmit+0x6c>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d9c:	e02a      	b.n	8004df4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f840 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e036      	b.n	8004e26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	e007      	b.n	8004de6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	3301      	adds	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1cf      	bne.n	8004d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2140      	movs	r1, #64	; 0x40
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f810 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e006      	b.n	8004e26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b090      	sub	sp, #64	; 0x40
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	e050      	b.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d04c      	beq.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4e:	f7fe ffd9 	bl	8003e04 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d241      	bcs.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb2:	623a      	str	r2, [r7, #32]
 8004eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	69f9      	ldr	r1, [r7, #28]
 8004eb8:	6a3a      	ldr	r2, [r7, #32]
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e00f      	b.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4013      	ands	r3, r2
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d09f      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3740      	adds	r7, #64	; 0x40
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f46:	f023 030c 	bic.w	r3, r3, #12
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <UART_SetConfig+0x114>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f74:	f7ff fdd2 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	e002      	b.n	8004f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7ff fdba 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8004f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	4a22      	ldr	r2, [pc, #136]	; (8005024 <UART_SetConfig+0x118>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	0119      	lsls	r1, r3, #4
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009a      	lsls	r2, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <UART_SetConfig+0x118>)
 8004fba:	fba3 0302 	umull	r0, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2064      	movs	r0, #100	; 0x64
 8004fc2:	fb00 f303 	mul.w	r3, r0, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	3332      	adds	r3, #50	; 0x32
 8004fcc:	4a15      	ldr	r2, [pc, #84]	; (8005024 <UART_SetConfig+0x118>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd8:	4419      	add	r1, r3
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <UART_SetConfig+0x118>)
 8004ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2064      	movs	r0, #100	; 0x64
 8004ffa:	fb00 f303 	mul.w	r3, r0, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	3332      	adds	r3, #50	; 0x32
 8005004:	4a07      	ldr	r2, [pc, #28]	; (8005024 <UART_SetConfig+0x118>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	440a      	add	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40013800 	.word	0x40013800
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <__errno>:
 8005028:	4b01      	ldr	r3, [pc, #4]	; (8005030 <__errno+0x8>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000080 	.word	0x20000080

08005034 <__libc_init_array>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	2600      	movs	r6, #0
 8005038:	4d0c      	ldr	r5, [pc, #48]	; (800506c <__libc_init_array+0x38>)
 800503a:	4c0d      	ldr	r4, [pc, #52]	; (8005070 <__libc_init_array+0x3c>)
 800503c:	1b64      	subs	r4, r4, r5
 800503e:	10a4      	asrs	r4, r4, #2
 8005040:	42a6      	cmp	r6, r4
 8005042:	d109      	bne.n	8005058 <__libc_init_array+0x24>
 8005044:	f001 fa1c 	bl	8006480 <_init>
 8005048:	2600      	movs	r6, #0
 800504a:	4d0a      	ldr	r5, [pc, #40]	; (8005074 <__libc_init_array+0x40>)
 800504c:	4c0a      	ldr	r4, [pc, #40]	; (8005078 <__libc_init_array+0x44>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	42a6      	cmp	r6, r4
 8005054:	d105      	bne.n	8005062 <__libc_init_array+0x2e>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	f855 3b04 	ldr.w	r3, [r5], #4
 800505c:	4798      	blx	r3
 800505e:	3601      	adds	r6, #1
 8005060:	e7ee      	b.n	8005040 <__libc_init_array+0xc>
 8005062:	f855 3b04 	ldr.w	r3, [r5], #4
 8005066:	4798      	blx	r3
 8005068:	3601      	adds	r6, #1
 800506a:	e7f2      	b.n	8005052 <__libc_init_array+0x1e>
 800506c:	08006828 	.word	0x08006828
 8005070:	08006828 	.word	0x08006828
 8005074:	08006828 	.word	0x08006828
 8005078:	0800682c 	.word	0x0800682c

0800507c <memcpy>:
 800507c:	440a      	add	r2, r1
 800507e:	4291      	cmp	r1, r2
 8005080:	f100 33ff 	add.w	r3, r0, #4294967295
 8005084:	d100      	bne.n	8005088 <memcpy+0xc>
 8005086:	4770      	bx	lr
 8005088:	b510      	push	{r4, lr}
 800508a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800508e:	4291      	cmp	r1, r2
 8005090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005094:	d1f9      	bne.n	800508a <memcpy+0xe>
 8005096:	bd10      	pop	{r4, pc}

08005098 <memset>:
 8005098:	4603      	mov	r3, r0
 800509a:	4402      	add	r2, r0
 800509c:	4293      	cmp	r3, r2
 800509e:	d100      	bne.n	80050a2 <memset+0xa>
 80050a0:	4770      	bx	lr
 80050a2:	f803 1b01 	strb.w	r1, [r3], #1
 80050a6:	e7f9      	b.n	800509c <memset+0x4>

080050a8 <iprintf>:
 80050a8:	b40f      	push	{r0, r1, r2, r3}
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <iprintf+0x2c>)
 80050ac:	b513      	push	{r0, r1, r4, lr}
 80050ae:	681c      	ldr	r4, [r3, #0]
 80050b0:	b124      	cbz	r4, 80050bc <iprintf+0x14>
 80050b2:	69a3      	ldr	r3, [r4, #24]
 80050b4:	b913      	cbnz	r3, 80050bc <iprintf+0x14>
 80050b6:	4620      	mov	r0, r4
 80050b8:	f000 fa8e 	bl	80055d8 <__sinit>
 80050bc:	ab05      	add	r3, sp, #20
 80050be:	4620      	mov	r0, r4
 80050c0:	9a04      	ldr	r2, [sp, #16]
 80050c2:	68a1      	ldr	r1, [r4, #8]
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	f000 fded 	bl	8005ca4 <_vfiprintf_r>
 80050ca:	b002      	add	sp, #8
 80050cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d0:	b004      	add	sp, #16
 80050d2:	4770      	bx	lr
 80050d4:	20000080 	.word	0x20000080

080050d8 <_puts_r>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	460e      	mov	r6, r1
 80050dc:	4605      	mov	r5, r0
 80050de:	b118      	cbz	r0, 80050e8 <_puts_r+0x10>
 80050e0:	6983      	ldr	r3, [r0, #24]
 80050e2:	b90b      	cbnz	r3, 80050e8 <_puts_r+0x10>
 80050e4:	f000 fa78 	bl	80055d8 <__sinit>
 80050e8:	69ab      	ldr	r3, [r5, #24]
 80050ea:	68ac      	ldr	r4, [r5, #8]
 80050ec:	b913      	cbnz	r3, 80050f4 <_puts_r+0x1c>
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fa72 	bl	80055d8 <__sinit>
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <_puts_r+0xd0>)
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d120      	bne.n	800513c <_puts_r+0x64>
 80050fa:	686c      	ldr	r4, [r5, #4]
 80050fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050fe:	07db      	lsls	r3, r3, #31
 8005100:	d405      	bmi.n	800510e <_puts_r+0x36>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	0598      	lsls	r0, r3, #22
 8005106:	d402      	bmi.n	800510e <_puts_r+0x36>
 8005108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510a:	f000 fb03 	bl	8005714 <__retarget_lock_acquire_recursive>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	0719      	lsls	r1, r3, #28
 8005112:	d51d      	bpl.n	8005150 <_puts_r+0x78>
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	b1db      	cbz	r3, 8005150 <_puts_r+0x78>
 8005118:	3e01      	subs	r6, #1
 800511a:	68a3      	ldr	r3, [r4, #8]
 800511c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005120:	3b01      	subs	r3, #1
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	bb39      	cbnz	r1, 8005176 <_puts_r+0x9e>
 8005126:	2b00      	cmp	r3, #0
 8005128:	da38      	bge.n	800519c <_puts_r+0xc4>
 800512a:	4622      	mov	r2, r4
 800512c:	210a      	movs	r1, #10
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f87c 	bl	800522c <__swbuf_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d011      	beq.n	800515c <_puts_r+0x84>
 8005138:	250a      	movs	r5, #10
 800513a:	e011      	b.n	8005160 <_puts_r+0x88>
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <_puts_r+0xd4>)
 800513e:	429c      	cmp	r4, r3
 8005140:	d101      	bne.n	8005146 <_puts_r+0x6e>
 8005142:	68ac      	ldr	r4, [r5, #8]
 8005144:	e7da      	b.n	80050fc <_puts_r+0x24>
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <_puts_r+0xd8>)
 8005148:	429c      	cmp	r4, r3
 800514a:	bf08      	it	eq
 800514c:	68ec      	ldreq	r4, [r5, #12]
 800514e:	e7d5      	b.n	80050fc <_puts_r+0x24>
 8005150:	4621      	mov	r1, r4
 8005152:	4628      	mov	r0, r5
 8005154:	f000 f8bc 	bl	80052d0 <__swsetup_r>
 8005158:	2800      	cmp	r0, #0
 800515a:	d0dd      	beq.n	8005118 <_puts_r+0x40>
 800515c:	f04f 35ff 	mov.w	r5, #4294967295
 8005160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005162:	07da      	lsls	r2, r3, #31
 8005164:	d405      	bmi.n	8005172 <_puts_r+0x9a>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	059b      	lsls	r3, r3, #22
 800516a:	d402      	bmi.n	8005172 <_puts_r+0x9a>
 800516c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516e:	f000 fad2 	bl	8005716 <__retarget_lock_release_recursive>
 8005172:	4628      	mov	r0, r5
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	2b00      	cmp	r3, #0
 8005178:	da04      	bge.n	8005184 <_puts_r+0xac>
 800517a:	69a2      	ldr	r2, [r4, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	dc06      	bgt.n	800518e <_puts_r+0xb6>
 8005180:	290a      	cmp	r1, #10
 8005182:	d004      	beq.n	800518e <_puts_r+0xb6>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	7019      	strb	r1, [r3, #0]
 800518c:	e7c5      	b.n	800511a <_puts_r+0x42>
 800518e:	4622      	mov	r2, r4
 8005190:	4628      	mov	r0, r5
 8005192:	f000 f84b 	bl	800522c <__swbuf_r>
 8005196:	3001      	adds	r0, #1
 8005198:	d1bf      	bne.n	800511a <_puts_r+0x42>
 800519a:	e7df      	b.n	800515c <_puts_r+0x84>
 800519c:	250a      	movs	r5, #10
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	6022      	str	r2, [r4, #0]
 80051a4:	701d      	strb	r5, [r3, #0]
 80051a6:	e7db      	b.n	8005160 <_puts_r+0x88>
 80051a8:	080067b4 	.word	0x080067b4
 80051ac:	080067d4 	.word	0x080067d4
 80051b0:	08006794 	.word	0x08006794

080051b4 <puts>:
 80051b4:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <puts+0xc>)
 80051b6:	4601      	mov	r1, r0
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f7ff bf8d 	b.w	80050d8 <_puts_r>
 80051be:	bf00      	nop
 80051c0:	20000080 	.word	0x20000080

080051c4 <siprintf>:
 80051c4:	b40e      	push	{r1, r2, r3}
 80051c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051ca:	b500      	push	{lr}
 80051cc:	b09c      	sub	sp, #112	; 0x70
 80051ce:	ab1d      	add	r3, sp, #116	; 0x74
 80051d0:	9002      	str	r0, [sp, #8]
 80051d2:	9006      	str	r0, [sp, #24]
 80051d4:	9107      	str	r1, [sp, #28]
 80051d6:	9104      	str	r1, [sp, #16]
 80051d8:	4808      	ldr	r0, [pc, #32]	; (80051fc <siprintf+0x38>)
 80051da:	4909      	ldr	r1, [pc, #36]	; (8005200 <siprintf+0x3c>)
 80051dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e0:	9105      	str	r1, [sp, #20]
 80051e2:	6800      	ldr	r0, [r0, #0]
 80051e4:	a902      	add	r1, sp, #8
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	f000 fc34 	bl	8005a54 <_svfiprintf_r>
 80051ec:	2200      	movs	r2, #0
 80051ee:	9b02      	ldr	r3, [sp, #8]
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	b01c      	add	sp, #112	; 0x70
 80051f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f8:	b003      	add	sp, #12
 80051fa:	4770      	bx	lr
 80051fc:	20000080 	.word	0x20000080
 8005200:	ffff0208 	.word	0xffff0208

08005204 <strncmp>:
 8005204:	4603      	mov	r3, r0
 8005206:	b510      	push	{r4, lr}
 8005208:	b172      	cbz	r2, 8005228 <strncmp+0x24>
 800520a:	3901      	subs	r1, #1
 800520c:	1884      	adds	r4, r0, r2
 800520e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005212:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005216:	4290      	cmp	r0, r2
 8005218:	d101      	bne.n	800521e <strncmp+0x1a>
 800521a:	42a3      	cmp	r3, r4
 800521c:	d101      	bne.n	8005222 <strncmp+0x1e>
 800521e:	1a80      	subs	r0, r0, r2
 8005220:	bd10      	pop	{r4, pc}
 8005222:	2800      	cmp	r0, #0
 8005224:	d1f3      	bne.n	800520e <strncmp+0xa>
 8005226:	e7fa      	b.n	800521e <strncmp+0x1a>
 8005228:	4610      	mov	r0, r2
 800522a:	e7f9      	b.n	8005220 <strncmp+0x1c>

0800522c <__swbuf_r>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	460e      	mov	r6, r1
 8005230:	4614      	mov	r4, r2
 8005232:	4605      	mov	r5, r0
 8005234:	b118      	cbz	r0, 800523e <__swbuf_r+0x12>
 8005236:	6983      	ldr	r3, [r0, #24]
 8005238:	b90b      	cbnz	r3, 800523e <__swbuf_r+0x12>
 800523a:	f000 f9cd 	bl	80055d8 <__sinit>
 800523e:	4b21      	ldr	r3, [pc, #132]	; (80052c4 <__swbuf_r+0x98>)
 8005240:	429c      	cmp	r4, r3
 8005242:	d12b      	bne.n	800529c <__swbuf_r+0x70>
 8005244:	686c      	ldr	r4, [r5, #4]
 8005246:	69a3      	ldr	r3, [r4, #24]
 8005248:	60a3      	str	r3, [r4, #8]
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	071a      	lsls	r2, r3, #28
 800524e:	d52f      	bpl.n	80052b0 <__swbuf_r+0x84>
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	b36b      	cbz	r3, 80052b0 <__swbuf_r+0x84>
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	b2f6      	uxtb	r6, r6
 800525a:	1ac0      	subs	r0, r0, r3
 800525c:	6963      	ldr	r3, [r4, #20]
 800525e:	4637      	mov	r7, r6
 8005260:	4283      	cmp	r3, r0
 8005262:	dc04      	bgt.n	800526e <__swbuf_r+0x42>
 8005264:	4621      	mov	r1, r4
 8005266:	4628      	mov	r0, r5
 8005268:	f000 f922 	bl	80054b0 <_fflush_r>
 800526c:	bb30      	cbnz	r0, 80052bc <__swbuf_r+0x90>
 800526e:	68a3      	ldr	r3, [r4, #8]
 8005270:	3001      	adds	r0, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	60a3      	str	r3, [r4, #8]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	701e      	strb	r6, [r3, #0]
 800527e:	6963      	ldr	r3, [r4, #20]
 8005280:	4283      	cmp	r3, r0
 8005282:	d004      	beq.n	800528e <__swbuf_r+0x62>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	07db      	lsls	r3, r3, #31
 8005288:	d506      	bpl.n	8005298 <__swbuf_r+0x6c>
 800528a:	2e0a      	cmp	r6, #10
 800528c:	d104      	bne.n	8005298 <__swbuf_r+0x6c>
 800528e:	4621      	mov	r1, r4
 8005290:	4628      	mov	r0, r5
 8005292:	f000 f90d 	bl	80054b0 <_fflush_r>
 8005296:	b988      	cbnz	r0, 80052bc <__swbuf_r+0x90>
 8005298:	4638      	mov	r0, r7
 800529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <__swbuf_r+0x9c>)
 800529e:	429c      	cmp	r4, r3
 80052a0:	d101      	bne.n	80052a6 <__swbuf_r+0x7a>
 80052a2:	68ac      	ldr	r4, [r5, #8]
 80052a4:	e7cf      	b.n	8005246 <__swbuf_r+0x1a>
 80052a6:	4b09      	ldr	r3, [pc, #36]	; (80052cc <__swbuf_r+0xa0>)
 80052a8:	429c      	cmp	r4, r3
 80052aa:	bf08      	it	eq
 80052ac:	68ec      	ldreq	r4, [r5, #12]
 80052ae:	e7ca      	b.n	8005246 <__swbuf_r+0x1a>
 80052b0:	4621      	mov	r1, r4
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f80c 	bl	80052d0 <__swsetup_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d0cb      	beq.n	8005254 <__swbuf_r+0x28>
 80052bc:	f04f 37ff 	mov.w	r7, #4294967295
 80052c0:	e7ea      	b.n	8005298 <__swbuf_r+0x6c>
 80052c2:	bf00      	nop
 80052c4:	080067b4 	.word	0x080067b4
 80052c8:	080067d4 	.word	0x080067d4
 80052cc:	08006794 	.word	0x08006794

080052d0 <__swsetup_r>:
 80052d0:	4b32      	ldr	r3, [pc, #200]	; (800539c <__swsetup_r+0xcc>)
 80052d2:	b570      	push	{r4, r5, r6, lr}
 80052d4:	681d      	ldr	r5, [r3, #0]
 80052d6:	4606      	mov	r6, r0
 80052d8:	460c      	mov	r4, r1
 80052da:	b125      	cbz	r5, 80052e6 <__swsetup_r+0x16>
 80052dc:	69ab      	ldr	r3, [r5, #24]
 80052de:	b913      	cbnz	r3, 80052e6 <__swsetup_r+0x16>
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 f979 	bl	80055d8 <__sinit>
 80052e6:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <__swsetup_r+0xd0>)
 80052e8:	429c      	cmp	r4, r3
 80052ea:	d10f      	bne.n	800530c <__swsetup_r+0x3c>
 80052ec:	686c      	ldr	r4, [r5, #4]
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f4:	0719      	lsls	r1, r3, #28
 80052f6:	d42c      	bmi.n	8005352 <__swsetup_r+0x82>
 80052f8:	06dd      	lsls	r5, r3, #27
 80052fa:	d411      	bmi.n	8005320 <__swsetup_r+0x50>
 80052fc:	2309      	movs	r3, #9
 80052fe:	6033      	str	r3, [r6, #0]
 8005300:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	e03e      	b.n	800538a <__swsetup_r+0xba>
 800530c:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <__swsetup_r+0xd4>)
 800530e:	429c      	cmp	r4, r3
 8005310:	d101      	bne.n	8005316 <__swsetup_r+0x46>
 8005312:	68ac      	ldr	r4, [r5, #8]
 8005314:	e7eb      	b.n	80052ee <__swsetup_r+0x1e>
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <__swsetup_r+0xd8>)
 8005318:	429c      	cmp	r4, r3
 800531a:	bf08      	it	eq
 800531c:	68ec      	ldreq	r4, [r5, #12]
 800531e:	e7e6      	b.n	80052ee <__swsetup_r+0x1e>
 8005320:	0758      	lsls	r0, r3, #29
 8005322:	d512      	bpl.n	800534a <__swsetup_r+0x7a>
 8005324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005326:	b141      	cbz	r1, 800533a <__swsetup_r+0x6a>
 8005328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <__swsetup_r+0x66>
 8005330:	4630      	mov	r0, r6
 8005332:	f000 fa57 	bl	80057e4 <_free_r>
 8005336:	2300      	movs	r3, #0
 8005338:	6363      	str	r3, [r4, #52]	; 0x34
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005340:	81a3      	strh	r3, [r4, #12]
 8005342:	2300      	movs	r3, #0
 8005344:	6063      	str	r3, [r4, #4]
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	f043 0308 	orr.w	r3, r3, #8
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	b94b      	cbnz	r3, 800536a <__swsetup_r+0x9a>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800535c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005360:	d003      	beq.n	800536a <__swsetup_r+0x9a>
 8005362:	4621      	mov	r1, r4
 8005364:	4630      	mov	r0, r6
 8005366:	f000 f9fd 	bl	8005764 <__smakebuf_r>
 800536a:	89a0      	ldrh	r0, [r4, #12]
 800536c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005370:	f010 0301 	ands.w	r3, r0, #1
 8005374:	d00a      	beq.n	800538c <__swsetup_r+0xbc>
 8005376:	2300      	movs	r3, #0
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	6963      	ldr	r3, [r4, #20]
 800537c:	425b      	negs	r3, r3
 800537e:	61a3      	str	r3, [r4, #24]
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	b943      	cbnz	r3, 8005396 <__swsetup_r+0xc6>
 8005384:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005388:	d1ba      	bne.n	8005300 <__swsetup_r+0x30>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	0781      	lsls	r1, r0, #30
 800538e:	bf58      	it	pl
 8005390:	6963      	ldrpl	r3, [r4, #20]
 8005392:	60a3      	str	r3, [r4, #8]
 8005394:	e7f4      	b.n	8005380 <__swsetup_r+0xb0>
 8005396:	2000      	movs	r0, #0
 8005398:	e7f7      	b.n	800538a <__swsetup_r+0xba>
 800539a:	bf00      	nop
 800539c:	20000080 	.word	0x20000080
 80053a0:	080067b4 	.word	0x080067b4
 80053a4:	080067d4 	.word	0x080067d4
 80053a8:	08006794 	.word	0x08006794

080053ac <__sflush_r>:
 80053ac:	898a      	ldrh	r2, [r1, #12]
 80053ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b0:	4605      	mov	r5, r0
 80053b2:	0710      	lsls	r0, r2, #28
 80053b4:	460c      	mov	r4, r1
 80053b6:	d457      	bmi.n	8005468 <__sflush_r+0xbc>
 80053b8:	684b      	ldr	r3, [r1, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	dc04      	bgt.n	80053c8 <__sflush_r+0x1c>
 80053be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dc01      	bgt.n	80053c8 <__sflush_r+0x1c>
 80053c4:	2000      	movs	r0, #0
 80053c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	d0fa      	beq.n	80053c4 <__sflush_r+0x18>
 80053ce:	2300      	movs	r3, #0
 80053d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053d4:	682f      	ldr	r7, [r5, #0]
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	d032      	beq.n	8005440 <__sflush_r+0x94>
 80053da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	075a      	lsls	r2, r3, #29
 80053e0:	d505      	bpl.n	80053ee <__sflush_r+0x42>
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	1ac0      	subs	r0, r0, r3
 80053e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053e8:	b10b      	cbz	r3, 80053ee <__sflush_r+0x42>
 80053ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ec:	1ac0      	subs	r0, r0, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	4602      	mov	r2, r0
 80053f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053f4:	4628      	mov	r0, r5
 80053f6:	6a21      	ldr	r1, [r4, #32]
 80053f8:	47b0      	blx	r6
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	d106      	bne.n	800540e <__sflush_r+0x62>
 8005400:	6829      	ldr	r1, [r5, #0]
 8005402:	291d      	cmp	r1, #29
 8005404:	d82c      	bhi.n	8005460 <__sflush_r+0xb4>
 8005406:	4a29      	ldr	r2, [pc, #164]	; (80054ac <__sflush_r+0x100>)
 8005408:	40ca      	lsrs	r2, r1
 800540a:	07d6      	lsls	r6, r2, #31
 800540c:	d528      	bpl.n	8005460 <__sflush_r+0xb4>
 800540e:	2200      	movs	r2, #0
 8005410:	6062      	str	r2, [r4, #4]
 8005412:	6922      	ldr	r2, [r4, #16]
 8005414:	04d9      	lsls	r1, r3, #19
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	d504      	bpl.n	8005424 <__sflush_r+0x78>
 800541a:	1c42      	adds	r2, r0, #1
 800541c:	d101      	bne.n	8005422 <__sflush_r+0x76>
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	b903      	cbnz	r3, 8005424 <__sflush_r+0x78>
 8005422:	6560      	str	r0, [r4, #84]	; 0x54
 8005424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005426:	602f      	str	r7, [r5, #0]
 8005428:	2900      	cmp	r1, #0
 800542a:	d0cb      	beq.n	80053c4 <__sflush_r+0x18>
 800542c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <__sflush_r+0x8e>
 8005434:	4628      	mov	r0, r5
 8005436:	f000 f9d5 	bl	80057e4 <_free_r>
 800543a:	2000      	movs	r0, #0
 800543c:	6360      	str	r0, [r4, #52]	; 0x34
 800543e:	e7c2      	b.n	80053c6 <__sflush_r+0x1a>
 8005440:	6a21      	ldr	r1, [r4, #32]
 8005442:	2301      	movs	r3, #1
 8005444:	4628      	mov	r0, r5
 8005446:	47b0      	blx	r6
 8005448:	1c41      	adds	r1, r0, #1
 800544a:	d1c7      	bne.n	80053dc <__sflush_r+0x30>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0c4      	beq.n	80053dc <__sflush_r+0x30>
 8005452:	2b1d      	cmp	r3, #29
 8005454:	d001      	beq.n	800545a <__sflush_r+0xae>
 8005456:	2b16      	cmp	r3, #22
 8005458:	d101      	bne.n	800545e <__sflush_r+0xb2>
 800545a:	602f      	str	r7, [r5, #0]
 800545c:	e7b2      	b.n	80053c4 <__sflush_r+0x18>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	e7ae      	b.n	80053c6 <__sflush_r+0x1a>
 8005468:	690f      	ldr	r7, [r1, #16]
 800546a:	2f00      	cmp	r7, #0
 800546c:	d0aa      	beq.n	80053c4 <__sflush_r+0x18>
 800546e:	0793      	lsls	r3, r2, #30
 8005470:	bf18      	it	ne
 8005472:	2300      	movne	r3, #0
 8005474:	680e      	ldr	r6, [r1, #0]
 8005476:	bf08      	it	eq
 8005478:	694b      	ldreq	r3, [r1, #20]
 800547a:	1bf6      	subs	r6, r6, r7
 800547c:	600f      	str	r7, [r1, #0]
 800547e:	608b      	str	r3, [r1, #8]
 8005480:	2e00      	cmp	r6, #0
 8005482:	dd9f      	ble.n	80053c4 <__sflush_r+0x18>
 8005484:	4633      	mov	r3, r6
 8005486:	463a      	mov	r2, r7
 8005488:	4628      	mov	r0, r5
 800548a:	6a21      	ldr	r1, [r4, #32]
 800548c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005490:	47e0      	blx	ip
 8005492:	2800      	cmp	r0, #0
 8005494:	dc06      	bgt.n	80054a4 <__sflush_r+0xf8>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	e790      	b.n	80053c6 <__sflush_r+0x1a>
 80054a4:	4407      	add	r7, r0
 80054a6:	1a36      	subs	r6, r6, r0
 80054a8:	e7ea      	b.n	8005480 <__sflush_r+0xd4>
 80054aa:	bf00      	nop
 80054ac:	20400001 	.word	0x20400001

080054b0 <_fflush_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	b913      	cbnz	r3, 80054c0 <_fflush_r+0x10>
 80054ba:	2500      	movs	r5, #0
 80054bc:	4628      	mov	r0, r5
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	b118      	cbz	r0, 80054ca <_fflush_r+0x1a>
 80054c2:	6983      	ldr	r3, [r0, #24]
 80054c4:	b90b      	cbnz	r3, 80054ca <_fflush_r+0x1a>
 80054c6:	f000 f887 	bl	80055d8 <__sinit>
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <_fflush_r+0x6c>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d11b      	bne.n	8005508 <_fflush_r+0x58>
 80054d0:	686c      	ldr	r4, [r5, #4]
 80054d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ef      	beq.n	80054ba <_fflush_r+0xa>
 80054da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054dc:	07d0      	lsls	r0, r2, #31
 80054de:	d404      	bmi.n	80054ea <_fflush_r+0x3a>
 80054e0:	0599      	lsls	r1, r3, #22
 80054e2:	d402      	bmi.n	80054ea <_fflush_r+0x3a>
 80054e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e6:	f000 f915 	bl	8005714 <__retarget_lock_acquire_recursive>
 80054ea:	4628      	mov	r0, r5
 80054ec:	4621      	mov	r1, r4
 80054ee:	f7ff ff5d 	bl	80053ac <__sflush_r>
 80054f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054f4:	4605      	mov	r5, r0
 80054f6:	07da      	lsls	r2, r3, #31
 80054f8:	d4e0      	bmi.n	80054bc <_fflush_r+0xc>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	059b      	lsls	r3, r3, #22
 80054fe:	d4dd      	bmi.n	80054bc <_fflush_r+0xc>
 8005500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005502:	f000 f908 	bl	8005716 <__retarget_lock_release_recursive>
 8005506:	e7d9      	b.n	80054bc <_fflush_r+0xc>
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <_fflush_r+0x70>)
 800550a:	429c      	cmp	r4, r3
 800550c:	d101      	bne.n	8005512 <_fflush_r+0x62>
 800550e:	68ac      	ldr	r4, [r5, #8]
 8005510:	e7df      	b.n	80054d2 <_fflush_r+0x22>
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <_fflush_r+0x74>)
 8005514:	429c      	cmp	r4, r3
 8005516:	bf08      	it	eq
 8005518:	68ec      	ldreq	r4, [r5, #12]
 800551a:	e7da      	b.n	80054d2 <_fflush_r+0x22>
 800551c:	080067b4 	.word	0x080067b4
 8005520:	080067d4 	.word	0x080067d4
 8005524:	08006794 	.word	0x08006794

08005528 <std>:
 8005528:	2300      	movs	r3, #0
 800552a:	b510      	push	{r4, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	e9c0 3300 	strd	r3, r3, [r0]
 8005532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005536:	6083      	str	r3, [r0, #8]
 8005538:	8181      	strh	r1, [r0, #12]
 800553a:	6643      	str	r3, [r0, #100]	; 0x64
 800553c:	81c2      	strh	r2, [r0, #14]
 800553e:	6183      	str	r3, [r0, #24]
 8005540:	4619      	mov	r1, r3
 8005542:	2208      	movs	r2, #8
 8005544:	305c      	adds	r0, #92	; 0x5c
 8005546:	f7ff fda7 	bl	8005098 <memset>
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <std+0x38>)
 800554c:	6224      	str	r4, [r4, #32]
 800554e:	6263      	str	r3, [r4, #36]	; 0x24
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <std+0x3c>)
 8005552:	62a3      	str	r3, [r4, #40]	; 0x28
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <std+0x40>)
 8005556:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <std+0x44>)
 800555a:	6323      	str	r3, [r4, #48]	; 0x30
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	08006251 	.word	0x08006251
 8005564:	08006273 	.word	0x08006273
 8005568:	080062ab 	.word	0x080062ab
 800556c:	080062cf 	.word	0x080062cf

08005570 <_cleanup_r>:
 8005570:	4901      	ldr	r1, [pc, #4]	; (8005578 <_cleanup_r+0x8>)
 8005572:	f000 b8af 	b.w	80056d4 <_fwalk_reent>
 8005576:	bf00      	nop
 8005578:	080054b1 	.word	0x080054b1

0800557c <__sfmoreglue>:
 800557c:	2268      	movs	r2, #104	; 0x68
 800557e:	b570      	push	{r4, r5, r6, lr}
 8005580:	1e4d      	subs	r5, r1, #1
 8005582:	4355      	muls	r5, r2
 8005584:	460e      	mov	r6, r1
 8005586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800558a:	f000 f993 	bl	80058b4 <_malloc_r>
 800558e:	4604      	mov	r4, r0
 8005590:	b140      	cbz	r0, 80055a4 <__sfmoreglue+0x28>
 8005592:	2100      	movs	r1, #0
 8005594:	e9c0 1600 	strd	r1, r6, [r0]
 8005598:	300c      	adds	r0, #12
 800559a:	60a0      	str	r0, [r4, #8]
 800559c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055a0:	f7ff fd7a 	bl	8005098 <memset>
 80055a4:	4620      	mov	r0, r4
 80055a6:	bd70      	pop	{r4, r5, r6, pc}

080055a8 <__sfp_lock_acquire>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__sfp_lock_acquire+0x8>)
 80055aa:	f000 b8b3 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	200009d5 	.word	0x200009d5

080055b4 <__sfp_lock_release>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__sfp_lock_release+0x8>)
 80055b6:	f000 b8ae 	b.w	8005716 <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	200009d5 	.word	0x200009d5

080055c0 <__sinit_lock_acquire>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__sinit_lock_acquire+0x8>)
 80055c2:	f000 b8a7 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	200009d6 	.word	0x200009d6

080055cc <__sinit_lock_release>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__sinit_lock_release+0x8>)
 80055ce:	f000 b8a2 	b.w	8005716 <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	200009d6 	.word	0x200009d6

080055d8 <__sinit>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	f7ff fff0 	bl	80055c0 <__sinit_lock_acquire>
 80055e0:	69a3      	ldr	r3, [r4, #24]
 80055e2:	b11b      	cbz	r3, 80055ec <__sinit+0x14>
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e8:	f7ff bff0 	b.w	80055cc <__sinit_lock_release>
 80055ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055f0:	6523      	str	r3, [r4, #80]	; 0x50
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <__sinit+0x68>)
 80055f4:	4a13      	ldr	r2, [pc, #76]	; (8005644 <__sinit+0x6c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	bf08      	it	eq
 80055fe:	2301      	moveq	r3, #1
 8005600:	4620      	mov	r0, r4
 8005602:	bf08      	it	eq
 8005604:	61a3      	streq	r3, [r4, #24]
 8005606:	f000 f81f 	bl	8005648 <__sfp>
 800560a:	6060      	str	r0, [r4, #4]
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f81b 	bl	8005648 <__sfp>
 8005612:	60a0      	str	r0, [r4, #8]
 8005614:	4620      	mov	r0, r4
 8005616:	f000 f817 	bl	8005648 <__sfp>
 800561a:	2200      	movs	r2, #0
 800561c:	2104      	movs	r1, #4
 800561e:	60e0      	str	r0, [r4, #12]
 8005620:	6860      	ldr	r0, [r4, #4]
 8005622:	f7ff ff81 	bl	8005528 <std>
 8005626:	2201      	movs	r2, #1
 8005628:	2109      	movs	r1, #9
 800562a:	68a0      	ldr	r0, [r4, #8]
 800562c:	f7ff ff7c 	bl	8005528 <std>
 8005630:	2202      	movs	r2, #2
 8005632:	2112      	movs	r1, #18
 8005634:	68e0      	ldr	r0, [r4, #12]
 8005636:	f7ff ff77 	bl	8005528 <std>
 800563a:	2301      	movs	r3, #1
 800563c:	61a3      	str	r3, [r4, #24]
 800563e:	e7d1      	b.n	80055e4 <__sinit+0xc>
 8005640:	08006790 	.word	0x08006790
 8005644:	08005571 	.word	0x08005571

08005648 <__sfp>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	4607      	mov	r7, r0
 800564c:	f7ff ffac 	bl	80055a8 <__sfp_lock_acquire>
 8005650:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <__sfp+0x84>)
 8005652:	681e      	ldr	r6, [r3, #0]
 8005654:	69b3      	ldr	r3, [r6, #24]
 8005656:	b913      	cbnz	r3, 800565e <__sfp+0x16>
 8005658:	4630      	mov	r0, r6
 800565a:	f7ff ffbd 	bl	80055d8 <__sinit>
 800565e:	3648      	adds	r6, #72	; 0x48
 8005660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005664:	3b01      	subs	r3, #1
 8005666:	d503      	bpl.n	8005670 <__sfp+0x28>
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	b30b      	cbz	r3, 80056b0 <__sfp+0x68>
 800566c:	6836      	ldr	r6, [r6, #0]
 800566e:	e7f7      	b.n	8005660 <__sfp+0x18>
 8005670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005674:	b9d5      	cbnz	r5, 80056ac <__sfp+0x64>
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <__sfp+0x88>)
 8005678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800567c:	60e3      	str	r3, [r4, #12]
 800567e:	6665      	str	r5, [r4, #100]	; 0x64
 8005680:	f000 f847 	bl	8005712 <__retarget_lock_init_recursive>
 8005684:	f7ff ff96 	bl	80055b4 <__sfp_lock_release>
 8005688:	2208      	movs	r2, #8
 800568a:	4629      	mov	r1, r5
 800568c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005694:	6025      	str	r5, [r4, #0]
 8005696:	61a5      	str	r5, [r4, #24]
 8005698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800569c:	f7ff fcfc 	bl	8005098 <memset>
 80056a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056a8:	4620      	mov	r0, r4
 80056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ac:	3468      	adds	r4, #104	; 0x68
 80056ae:	e7d9      	b.n	8005664 <__sfp+0x1c>
 80056b0:	2104      	movs	r1, #4
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ff62 	bl	800557c <__sfmoreglue>
 80056b8:	4604      	mov	r4, r0
 80056ba:	6030      	str	r0, [r6, #0]
 80056bc:	2800      	cmp	r0, #0
 80056be:	d1d5      	bne.n	800566c <__sfp+0x24>
 80056c0:	f7ff ff78 	bl	80055b4 <__sfp_lock_release>
 80056c4:	230c      	movs	r3, #12
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	e7ee      	b.n	80056a8 <__sfp+0x60>
 80056ca:	bf00      	nop
 80056cc:	08006790 	.word	0x08006790
 80056d0:	ffff0001 	.word	0xffff0001

080056d4 <_fwalk_reent>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	4606      	mov	r6, r0
 80056da:	4688      	mov	r8, r1
 80056dc:	2700      	movs	r7, #0
 80056de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e6:	f1b9 0901 	subs.w	r9, r9, #1
 80056ea:	d505      	bpl.n	80056f8 <_fwalk_reent+0x24>
 80056ec:	6824      	ldr	r4, [r4, #0]
 80056ee:	2c00      	cmp	r4, #0
 80056f0:	d1f7      	bne.n	80056e2 <_fwalk_reent+0xe>
 80056f2:	4638      	mov	r0, r7
 80056f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f8:	89ab      	ldrh	r3, [r5, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d907      	bls.n	800570e <_fwalk_reent+0x3a>
 80056fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005702:	3301      	adds	r3, #1
 8005704:	d003      	beq.n	800570e <_fwalk_reent+0x3a>
 8005706:	4629      	mov	r1, r5
 8005708:	4630      	mov	r0, r6
 800570a:	47c0      	blx	r8
 800570c:	4307      	orrs	r7, r0
 800570e:	3568      	adds	r5, #104	; 0x68
 8005710:	e7e9      	b.n	80056e6 <_fwalk_reent+0x12>

08005712 <__retarget_lock_init_recursive>:
 8005712:	4770      	bx	lr

08005714 <__retarget_lock_acquire_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_release_recursive>:
 8005716:	4770      	bx	lr

08005718 <__swhatbuf_r>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	460e      	mov	r6, r1
 800571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005720:	4614      	mov	r4, r2
 8005722:	2900      	cmp	r1, #0
 8005724:	461d      	mov	r5, r3
 8005726:	b096      	sub	sp, #88	; 0x58
 8005728:	da08      	bge.n	800573c <__swhatbuf_r+0x24>
 800572a:	2200      	movs	r2, #0
 800572c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	061a      	lsls	r2, r3, #24
 8005734:	d410      	bmi.n	8005758 <__swhatbuf_r+0x40>
 8005736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573a:	e00e      	b.n	800575a <__swhatbuf_r+0x42>
 800573c:	466a      	mov	r2, sp
 800573e:	f000 fded 	bl	800631c <_fstat_r>
 8005742:	2800      	cmp	r0, #0
 8005744:	dbf1      	blt.n	800572a <__swhatbuf_r+0x12>
 8005746:	9a01      	ldr	r2, [sp, #4]
 8005748:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800574c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005750:	425a      	negs	r2, r3
 8005752:	415a      	adcs	r2, r3
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	e7ee      	b.n	8005736 <__swhatbuf_r+0x1e>
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	2000      	movs	r0, #0
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	b016      	add	sp, #88	; 0x58
 8005760:	bd70      	pop	{r4, r5, r6, pc}
	...

08005764 <__smakebuf_r>:
 8005764:	898b      	ldrh	r3, [r1, #12]
 8005766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005768:	079d      	lsls	r5, r3, #30
 800576a:	4606      	mov	r6, r0
 800576c:	460c      	mov	r4, r1
 800576e:	d507      	bpl.n	8005780 <__smakebuf_r+0x1c>
 8005770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	2301      	movs	r3, #1
 800577a:	6163      	str	r3, [r4, #20]
 800577c:	b002      	add	sp, #8
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	466a      	mov	r2, sp
 8005782:	ab01      	add	r3, sp, #4
 8005784:	f7ff ffc8 	bl	8005718 <__swhatbuf_r>
 8005788:	9900      	ldr	r1, [sp, #0]
 800578a:	4605      	mov	r5, r0
 800578c:	4630      	mov	r0, r6
 800578e:	f000 f891 	bl	80058b4 <_malloc_r>
 8005792:	b948      	cbnz	r0, 80057a8 <__smakebuf_r+0x44>
 8005794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005798:	059a      	lsls	r2, r3, #22
 800579a:	d4ef      	bmi.n	800577c <__smakebuf_r+0x18>
 800579c:	f023 0303 	bic.w	r3, r3, #3
 80057a0:	f043 0302 	orr.w	r3, r3, #2
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	e7e3      	b.n	8005770 <__smakebuf_r+0xc>
 80057a8:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <__smakebuf_r+0x7c>)
 80057aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	6020      	str	r0, [r4, #0]
 80057b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	9b00      	ldr	r3, [sp, #0]
 80057b8:	6120      	str	r0, [r4, #16]
 80057ba:	6163      	str	r3, [r4, #20]
 80057bc:	9b01      	ldr	r3, [sp, #4]
 80057be:	b15b      	cbz	r3, 80057d8 <__smakebuf_r+0x74>
 80057c0:	4630      	mov	r0, r6
 80057c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057c6:	f000 fdbb 	bl	8006340 <_isatty_r>
 80057ca:	b128      	cbz	r0, 80057d8 <__smakebuf_r+0x74>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	81a3      	strh	r3, [r4, #12]
 80057d8:	89a0      	ldrh	r0, [r4, #12]
 80057da:	4305      	orrs	r5, r0
 80057dc:	81a5      	strh	r5, [r4, #12]
 80057de:	e7cd      	b.n	800577c <__smakebuf_r+0x18>
 80057e0:	08005571 	.word	0x08005571

080057e4 <_free_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4605      	mov	r5, r0
 80057e8:	2900      	cmp	r1, #0
 80057ea:	d040      	beq.n	800586e <_free_r+0x8a>
 80057ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f0:	1f0c      	subs	r4, r1, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfb8      	it	lt
 80057f6:	18e4      	addlt	r4, r4, r3
 80057f8:	f000 fdec 	bl	80063d4 <__malloc_lock>
 80057fc:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <_free_r+0x8c>)
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	b933      	cbnz	r3, 8005810 <_free_r+0x2c>
 8005802:	6063      	str	r3, [r4, #4]
 8005804:	6014      	str	r4, [r2, #0]
 8005806:	4628      	mov	r0, r5
 8005808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800580c:	f000 bde8 	b.w	80063e0 <__malloc_unlock>
 8005810:	42a3      	cmp	r3, r4
 8005812:	d908      	bls.n	8005826 <_free_r+0x42>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	1821      	adds	r1, r4, r0
 8005818:	428b      	cmp	r3, r1
 800581a:	bf01      	itttt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	1809      	addeq	r1, r1, r0
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	e7ed      	b.n	8005802 <_free_r+0x1e>
 8005826:	461a      	mov	r2, r3
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b10b      	cbz	r3, 8005830 <_free_r+0x4c>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d9fa      	bls.n	8005826 <_free_r+0x42>
 8005830:	6811      	ldr	r1, [r2, #0]
 8005832:	1850      	adds	r0, r2, r1
 8005834:	42a0      	cmp	r0, r4
 8005836:	d10b      	bne.n	8005850 <_free_r+0x6c>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	4401      	add	r1, r0
 800583c:	1850      	adds	r0, r2, r1
 800583e:	4283      	cmp	r3, r0
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	d1e0      	bne.n	8005806 <_free_r+0x22>
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4401      	add	r1, r0
 800584a:	6011      	str	r1, [r2, #0]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	e7da      	b.n	8005806 <_free_r+0x22>
 8005850:	d902      	bls.n	8005858 <_free_r+0x74>
 8005852:	230c      	movs	r3, #12
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	e7d6      	b.n	8005806 <_free_r+0x22>
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	1821      	adds	r1, r4, r0
 800585c:	428b      	cmp	r3, r1
 800585e:	bf01      	itttt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	1809      	addeq	r1, r1, r0
 8005866:	6021      	streq	r1, [r4, #0]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	6054      	str	r4, [r2, #4]
 800586c:	e7cb      	b.n	8005806 <_free_r+0x22>
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	200009d8 	.word	0x200009d8

08005874 <sbrk_aligned>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4e0e      	ldr	r6, [pc, #56]	; (80058b0 <sbrk_aligned+0x3c>)
 8005878:	460c      	mov	r4, r1
 800587a:	6831      	ldr	r1, [r6, #0]
 800587c:	4605      	mov	r5, r0
 800587e:	b911      	cbnz	r1, 8005886 <sbrk_aligned+0x12>
 8005880:	f000 fcd6 	bl	8006230 <_sbrk_r>
 8005884:	6030      	str	r0, [r6, #0]
 8005886:	4621      	mov	r1, r4
 8005888:	4628      	mov	r0, r5
 800588a:	f000 fcd1 	bl	8006230 <_sbrk_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	d00a      	beq.n	80058a8 <sbrk_aligned+0x34>
 8005892:	1cc4      	adds	r4, r0, #3
 8005894:	f024 0403 	bic.w	r4, r4, #3
 8005898:	42a0      	cmp	r0, r4
 800589a:	d007      	beq.n	80058ac <sbrk_aligned+0x38>
 800589c:	1a21      	subs	r1, r4, r0
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 fcc6 	bl	8006230 <_sbrk_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d101      	bne.n	80058ac <sbrk_aligned+0x38>
 80058a8:	f04f 34ff 	mov.w	r4, #4294967295
 80058ac:	4620      	mov	r0, r4
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	200009dc 	.word	0x200009dc

080058b4 <_malloc_r>:
 80058b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b8:	1ccd      	adds	r5, r1, #3
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	4607      	mov	r7, r0
 80058ca:	db01      	blt.n	80058d0 <_malloc_r+0x1c>
 80058cc:	42a9      	cmp	r1, r5
 80058ce:	d905      	bls.n	80058dc <_malloc_r+0x28>
 80058d0:	230c      	movs	r3, #12
 80058d2:	2600      	movs	r6, #0
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4630      	mov	r0, r6
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	4e2e      	ldr	r6, [pc, #184]	; (8005998 <_malloc_r+0xe4>)
 80058de:	f000 fd79 	bl	80063d4 <__malloc_lock>
 80058e2:	6833      	ldr	r3, [r6, #0]
 80058e4:	461c      	mov	r4, r3
 80058e6:	bb34      	cbnz	r4, 8005936 <_malloc_r+0x82>
 80058e8:	4629      	mov	r1, r5
 80058ea:	4638      	mov	r0, r7
 80058ec:	f7ff ffc2 	bl	8005874 <sbrk_aligned>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	4604      	mov	r4, r0
 80058f4:	d14d      	bne.n	8005992 <_malloc_r+0xde>
 80058f6:	6834      	ldr	r4, [r6, #0]
 80058f8:	4626      	mov	r6, r4
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d140      	bne.n	8005980 <_malloc_r+0xcc>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	4631      	mov	r1, r6
 8005902:	4638      	mov	r0, r7
 8005904:	eb04 0803 	add.w	r8, r4, r3
 8005908:	f000 fc92 	bl	8006230 <_sbrk_r>
 800590c:	4580      	cmp	r8, r0
 800590e:	d13a      	bne.n	8005986 <_malloc_r+0xd2>
 8005910:	6821      	ldr	r1, [r4, #0]
 8005912:	3503      	adds	r5, #3
 8005914:	1a6d      	subs	r5, r5, r1
 8005916:	f025 0503 	bic.w	r5, r5, #3
 800591a:	3508      	adds	r5, #8
 800591c:	2d0c      	cmp	r5, #12
 800591e:	bf38      	it	cc
 8005920:	250c      	movcc	r5, #12
 8005922:	4638      	mov	r0, r7
 8005924:	4629      	mov	r1, r5
 8005926:	f7ff ffa5 	bl	8005874 <sbrk_aligned>
 800592a:	3001      	adds	r0, #1
 800592c:	d02b      	beq.n	8005986 <_malloc_r+0xd2>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	442b      	add	r3, r5
 8005932:	6023      	str	r3, [r4, #0]
 8005934:	e00e      	b.n	8005954 <_malloc_r+0xa0>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	1b52      	subs	r2, r2, r5
 800593a:	d41e      	bmi.n	800597a <_malloc_r+0xc6>
 800593c:	2a0b      	cmp	r2, #11
 800593e:	d916      	bls.n	800596e <_malloc_r+0xba>
 8005940:	1961      	adds	r1, r4, r5
 8005942:	42a3      	cmp	r3, r4
 8005944:	6025      	str	r5, [r4, #0]
 8005946:	bf18      	it	ne
 8005948:	6059      	strne	r1, [r3, #4]
 800594a:	6863      	ldr	r3, [r4, #4]
 800594c:	bf08      	it	eq
 800594e:	6031      	streq	r1, [r6, #0]
 8005950:	5162      	str	r2, [r4, r5]
 8005952:	604b      	str	r3, [r1, #4]
 8005954:	4638      	mov	r0, r7
 8005956:	f104 060b 	add.w	r6, r4, #11
 800595a:	f000 fd41 	bl	80063e0 <__malloc_unlock>
 800595e:	f026 0607 	bic.w	r6, r6, #7
 8005962:	1d23      	adds	r3, r4, #4
 8005964:	1af2      	subs	r2, r6, r3
 8005966:	d0b6      	beq.n	80058d6 <_malloc_r+0x22>
 8005968:	1b9b      	subs	r3, r3, r6
 800596a:	50a3      	str	r3, [r4, r2]
 800596c:	e7b3      	b.n	80058d6 <_malloc_r+0x22>
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	42a3      	cmp	r3, r4
 8005972:	bf0c      	ite	eq
 8005974:	6032      	streq	r2, [r6, #0]
 8005976:	605a      	strne	r2, [r3, #4]
 8005978:	e7ec      	b.n	8005954 <_malloc_r+0xa0>
 800597a:	4623      	mov	r3, r4
 800597c:	6864      	ldr	r4, [r4, #4]
 800597e:	e7b2      	b.n	80058e6 <_malloc_r+0x32>
 8005980:	4634      	mov	r4, r6
 8005982:	6876      	ldr	r6, [r6, #4]
 8005984:	e7b9      	b.n	80058fa <_malloc_r+0x46>
 8005986:	230c      	movs	r3, #12
 8005988:	4638      	mov	r0, r7
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	f000 fd28 	bl	80063e0 <__malloc_unlock>
 8005990:	e7a1      	b.n	80058d6 <_malloc_r+0x22>
 8005992:	6025      	str	r5, [r4, #0]
 8005994:	e7de      	b.n	8005954 <_malloc_r+0xa0>
 8005996:	bf00      	nop
 8005998:	200009d8 	.word	0x200009d8

0800599c <__ssputs_r>:
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	688e      	ldr	r6, [r1, #8]
 80059a2:	4682      	mov	sl, r0
 80059a4:	429e      	cmp	r6, r3
 80059a6:	460c      	mov	r4, r1
 80059a8:	4690      	mov	r8, r2
 80059aa:	461f      	mov	r7, r3
 80059ac:	d838      	bhi.n	8005a20 <__ssputs_r+0x84>
 80059ae:	898a      	ldrh	r2, [r1, #12]
 80059b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059b4:	d032      	beq.n	8005a1c <__ssputs_r+0x80>
 80059b6:	6825      	ldr	r5, [r4, #0]
 80059b8:	6909      	ldr	r1, [r1, #16]
 80059ba:	3301      	adds	r3, #1
 80059bc:	eba5 0901 	sub.w	r9, r5, r1
 80059c0:	6965      	ldr	r5, [r4, #20]
 80059c2:	444b      	add	r3, r9
 80059c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059cc:	106d      	asrs	r5, r5, #1
 80059ce:	429d      	cmp	r5, r3
 80059d0:	bf38      	it	cc
 80059d2:	461d      	movcc	r5, r3
 80059d4:	0553      	lsls	r3, r2, #21
 80059d6:	d531      	bpl.n	8005a3c <__ssputs_r+0xa0>
 80059d8:	4629      	mov	r1, r5
 80059da:	f7ff ff6b 	bl	80058b4 <_malloc_r>
 80059de:	4606      	mov	r6, r0
 80059e0:	b950      	cbnz	r0, 80059f8 <__ssputs_r+0x5c>
 80059e2:	230c      	movs	r3, #12
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	f8ca 3000 	str.w	r3, [sl]
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f2:	81a3      	strh	r3, [r4, #12]
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	464a      	mov	r2, r9
 80059fa:	6921      	ldr	r1, [r4, #16]
 80059fc:	f7ff fb3e 	bl	800507c <memcpy>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	6126      	str	r6, [r4, #16]
 8005a0e:	444e      	add	r6, r9
 8005a10:	6026      	str	r6, [r4, #0]
 8005a12:	463e      	mov	r6, r7
 8005a14:	6165      	str	r5, [r4, #20]
 8005a16:	eba5 0509 	sub.w	r5, r5, r9
 8005a1a:	60a5      	str	r5, [r4, #8]
 8005a1c:	42be      	cmp	r6, r7
 8005a1e:	d900      	bls.n	8005a22 <__ssputs_r+0x86>
 8005a20:	463e      	mov	r6, r7
 8005a22:	4632      	mov	r2, r6
 8005a24:	4641      	mov	r1, r8
 8005a26:	6820      	ldr	r0, [r4, #0]
 8005a28:	f000 fcba 	bl	80063a0 <memmove>
 8005a2c:	68a3      	ldr	r3, [r4, #8]
 8005a2e:	2000      	movs	r0, #0
 8005a30:	1b9b      	subs	r3, r3, r6
 8005a32:	60a3      	str	r3, [r4, #8]
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	4433      	add	r3, r6
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	e7db      	b.n	80059f4 <__ssputs_r+0x58>
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	f000 fcd5 	bl	80063ec <_realloc_r>
 8005a42:	4606      	mov	r6, r0
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d1e1      	bne.n	8005a0c <__ssputs_r+0x70>
 8005a48:	4650      	mov	r0, sl
 8005a4a:	6921      	ldr	r1, [r4, #16]
 8005a4c:	f7ff feca 	bl	80057e4 <_free_r>
 8005a50:	e7c7      	b.n	80059e2 <__ssputs_r+0x46>
	...

08005a54 <_svfiprintf_r>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	4698      	mov	r8, r3
 8005a5a:	898b      	ldrh	r3, [r1, #12]
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	460d      	mov	r5, r1
 8005a62:	4614      	mov	r4, r2
 8005a64:	b09d      	sub	sp, #116	; 0x74
 8005a66:	d50e      	bpl.n	8005a86 <_svfiprintf_r+0x32>
 8005a68:	690b      	ldr	r3, [r1, #16]
 8005a6a:	b963      	cbnz	r3, 8005a86 <_svfiprintf_r+0x32>
 8005a6c:	2140      	movs	r1, #64	; 0x40
 8005a6e:	f7ff ff21 	bl	80058b4 <_malloc_r>
 8005a72:	6028      	str	r0, [r5, #0]
 8005a74:	6128      	str	r0, [r5, #16]
 8005a76:	b920      	cbnz	r0, 8005a82 <_svfiprintf_r+0x2e>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e0d1      	b.n	8005c26 <_svfiprintf_r+0x1d2>
 8005a82:	2340      	movs	r3, #64	; 0x40
 8005a84:	616b      	str	r3, [r5, #20]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a90:	2330      	movs	r3, #48	; 0x30
 8005a92:	f04f 0901 	mov.w	r9, #1
 8005a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c40 <_svfiprintf_r+0x1ec>
 8005a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	469a      	mov	sl, r3
 8005aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aaa:	b10a      	cbz	r2, 8005ab0 <_svfiprintf_r+0x5c>
 8005aac:	2a25      	cmp	r2, #37	; 0x25
 8005aae:	d1f9      	bne.n	8005aa4 <_svfiprintf_r+0x50>
 8005ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab4:	d00b      	beq.n	8005ace <_svfiprintf_r+0x7a>
 8005ab6:	465b      	mov	r3, fp
 8005ab8:	4622      	mov	r2, r4
 8005aba:	4629      	mov	r1, r5
 8005abc:	4638      	mov	r0, r7
 8005abe:	f7ff ff6d 	bl	800599c <__ssputs_r>
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f000 80aa 	beq.w	8005c1c <_svfiprintf_r+0x1c8>
 8005ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aca:	445a      	add	r2, fp
 8005acc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ace:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80a2 	beq.w	8005c1c <_svfiprintf_r+0x1c8>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295
 8005ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae2:	f10a 0a01 	add.w	sl, sl, #1
 8005ae6:	9304      	str	r3, [sp, #16]
 8005ae8:	9307      	str	r3, [sp, #28]
 8005aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aee:	931a      	str	r3, [sp, #104]	; 0x68
 8005af0:	4654      	mov	r4, sl
 8005af2:	2205      	movs	r2, #5
 8005af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af8:	4851      	ldr	r0, [pc, #324]	; (8005c40 <_svfiprintf_r+0x1ec>)
 8005afa:	f000 fc43 	bl	8006384 <memchr>
 8005afe:	9a04      	ldr	r2, [sp, #16]
 8005b00:	b9d8      	cbnz	r0, 8005b3a <_svfiprintf_r+0xe6>
 8005b02:	06d0      	lsls	r0, r2, #27
 8005b04:	bf44      	itt	mi
 8005b06:	2320      	movmi	r3, #32
 8005b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0c:	0711      	lsls	r1, r2, #28
 8005b0e:	bf44      	itt	mi
 8005b10:	232b      	movmi	r3, #43	; 0x2b
 8005b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b16:	f89a 3000 	ldrb.w	r3, [sl]
 8005b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1c:	d015      	beq.n	8005b4a <_svfiprintf_r+0xf6>
 8005b1e:	4654      	mov	r4, sl
 8005b20:	2000      	movs	r0, #0
 8005b22:	f04f 0c0a 	mov.w	ip, #10
 8005b26:	9a07      	ldr	r2, [sp, #28]
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2e:	3b30      	subs	r3, #48	; 0x30
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d94e      	bls.n	8005bd2 <_svfiprintf_r+0x17e>
 8005b34:	b1b0      	cbz	r0, 8005b64 <_svfiprintf_r+0x110>
 8005b36:	9207      	str	r2, [sp, #28]
 8005b38:	e014      	b.n	8005b64 <_svfiprintf_r+0x110>
 8005b3a:	eba0 0308 	sub.w	r3, r0, r8
 8005b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	46a2      	mov	sl, r4
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	e7d2      	b.n	8005af0 <_svfiprintf_r+0x9c>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	1d19      	adds	r1, r3, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	9103      	str	r1, [sp, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bfbb      	ittet	lt
 8005b56:	425b      	neglt	r3, r3
 8005b58:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5c:	9307      	strge	r3, [sp, #28]
 8005b5e:	9307      	strlt	r3, [sp, #28]
 8005b60:	bfb8      	it	lt
 8005b62:	9204      	strlt	r2, [sp, #16]
 8005b64:	7823      	ldrb	r3, [r4, #0]
 8005b66:	2b2e      	cmp	r3, #46	; 0x2e
 8005b68:	d10c      	bne.n	8005b84 <_svfiprintf_r+0x130>
 8005b6a:	7863      	ldrb	r3, [r4, #1]
 8005b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6e:	d135      	bne.n	8005bdc <_svfiprintf_r+0x188>
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	3402      	adds	r4, #2
 8005b74:	1d1a      	adds	r2, r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	9203      	str	r2, [sp, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfb8      	it	lt
 8005b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005c44 <_svfiprintf_r+0x1f0>
 8005b88:	2203      	movs	r2, #3
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	7821      	ldrb	r1, [r4, #0]
 8005b8e:	f000 fbf9 	bl	8006384 <memchr>
 8005b92:	b140      	cbz	r0, 8005ba6 <_svfiprintf_r+0x152>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	eba0 000a 	sub.w	r0, r0, sl
 8005b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b9e:	9b04      	ldr	r3, [sp, #16]
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	4303      	orrs	r3, r0
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005baa:	2206      	movs	r2, #6
 8005bac:	4826      	ldr	r0, [pc, #152]	; (8005c48 <_svfiprintf_r+0x1f4>)
 8005bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb2:	f000 fbe7 	bl	8006384 <memchr>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d038      	beq.n	8005c2c <_svfiprintf_r+0x1d8>
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <_svfiprintf_r+0x1f8>)
 8005bbc:	bb1b      	cbnz	r3, 8005c06 <_svfiprintf_r+0x1b2>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	f023 0307 	bic.w	r3, r3, #7
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	4433      	add	r3, r6
 8005bce:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd0:	e767      	b.n	8005aa2 <_svfiprintf_r+0x4e>
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bda:	e7a5      	b.n	8005b28 <_svfiprintf_r+0xd4>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f04f 0c0a 	mov.w	ip, #10
 8005be2:	4619      	mov	r1, r3
 8005be4:	3401      	adds	r4, #1
 8005be6:	9305      	str	r3, [sp, #20]
 8005be8:	4620      	mov	r0, r4
 8005bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bee:	3a30      	subs	r2, #48	; 0x30
 8005bf0:	2a09      	cmp	r2, #9
 8005bf2:	d903      	bls.n	8005bfc <_svfiprintf_r+0x1a8>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0c5      	beq.n	8005b84 <_svfiprintf_r+0x130>
 8005bf8:	9105      	str	r1, [sp, #20]
 8005bfa:	e7c3      	b.n	8005b84 <_svfiprintf_r+0x130>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	2301      	movs	r3, #1
 8005c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c04:	e7f0      	b.n	8005be8 <_svfiprintf_r+0x194>
 8005c06:	ab03      	add	r3, sp, #12
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <_svfiprintf_r+0x1fc>)
 8005c10:	a904      	add	r1, sp, #16
 8005c12:	f3af 8000 	nop.w
 8005c16:	1c42      	adds	r2, r0, #1
 8005c18:	4606      	mov	r6, r0
 8005c1a:	d1d6      	bne.n	8005bca <_svfiprintf_r+0x176>
 8005c1c:	89ab      	ldrh	r3, [r5, #12]
 8005c1e:	065b      	lsls	r3, r3, #25
 8005c20:	f53f af2c 	bmi.w	8005a7c <_svfiprintf_r+0x28>
 8005c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c26:	b01d      	add	sp, #116	; 0x74
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	ab03      	add	r3, sp, #12
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4638      	mov	r0, r7
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <_svfiprintf_r+0x1fc>)
 8005c36:	a904      	add	r1, sp, #16
 8005c38:	f000 f9d4 	bl	8005fe4 <_printf_i>
 8005c3c:	e7eb      	b.n	8005c16 <_svfiprintf_r+0x1c2>
 8005c3e:	bf00      	nop
 8005c40:	080067f4 	.word	0x080067f4
 8005c44:	080067fa 	.word	0x080067fa
 8005c48:	080067fe 	.word	0x080067fe
 8005c4c:	00000000 	.word	0x00000000
 8005c50:	0800599d 	.word	0x0800599d

08005c54 <__sfputc_r>:
 8005c54:	6893      	ldr	r3, [r2, #8]
 8005c56:	b410      	push	{r4}
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	6093      	str	r3, [r2, #8]
 8005c5e:	da07      	bge.n	8005c70 <__sfputc_r+0x1c>
 8005c60:	6994      	ldr	r4, [r2, #24]
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	db01      	blt.n	8005c6a <__sfputc_r+0x16>
 8005c66:	290a      	cmp	r1, #10
 8005c68:	d102      	bne.n	8005c70 <__sfputc_r+0x1c>
 8005c6a:	bc10      	pop	{r4}
 8005c6c:	f7ff bade 	b.w	800522c <__swbuf_r>
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	1c58      	adds	r0, r3, #1
 8005c74:	6010      	str	r0, [r2, #0]
 8005c76:	7019      	strb	r1, [r3, #0]
 8005c78:	4608      	mov	r0, r1
 8005c7a:	bc10      	pop	{r4}
 8005c7c:	4770      	bx	lr

08005c7e <__sfputs_r>:
 8005c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c80:	4606      	mov	r6, r0
 8005c82:	460f      	mov	r7, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	18d5      	adds	r5, r2, r3
 8005c88:	42ac      	cmp	r4, r5
 8005c8a:	d101      	bne.n	8005c90 <__sfputs_r+0x12>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e007      	b.n	8005ca0 <__sfputs_r+0x22>
 8005c90:	463a      	mov	r2, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c98:	f7ff ffdc 	bl	8005c54 <__sfputc_r>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d1f3      	bne.n	8005c88 <__sfputs_r+0xa>
 8005ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ca4 <_vfiprintf_r>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	460d      	mov	r5, r1
 8005caa:	4614      	mov	r4, r2
 8005cac:	4698      	mov	r8, r3
 8005cae:	4606      	mov	r6, r0
 8005cb0:	b09d      	sub	sp, #116	; 0x74
 8005cb2:	b118      	cbz	r0, 8005cbc <_vfiprintf_r+0x18>
 8005cb4:	6983      	ldr	r3, [r0, #24]
 8005cb6:	b90b      	cbnz	r3, 8005cbc <_vfiprintf_r+0x18>
 8005cb8:	f7ff fc8e 	bl	80055d8 <__sinit>
 8005cbc:	4b89      	ldr	r3, [pc, #548]	; (8005ee4 <_vfiprintf_r+0x240>)
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	d11b      	bne.n	8005cfa <_vfiprintf_r+0x56>
 8005cc2:	6875      	ldr	r5, [r6, #4]
 8005cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cc6:	07d9      	lsls	r1, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_vfiprintf_r+0x32>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_vfiprintf_r+0x32>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cd2:	f7ff fd1f 	bl	8005714 <__retarget_lock_acquire_recursive>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	071b      	lsls	r3, r3, #28
 8005cda:	d501      	bpl.n	8005ce0 <_vfiprintf_r+0x3c>
 8005cdc:	692b      	ldr	r3, [r5, #16]
 8005cde:	b9eb      	cbnz	r3, 8005d1c <_vfiprintf_r+0x78>
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7ff faf4 	bl	80052d0 <__swsetup_r>
 8005ce8:	b1c0      	cbz	r0, 8005d1c <_vfiprintf_r+0x78>
 8005cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cec:	07dc      	lsls	r4, r3, #31
 8005cee:	d50e      	bpl.n	8005d0e <_vfiprintf_r+0x6a>
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	b01d      	add	sp, #116	; 0x74
 8005cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfa:	4b7b      	ldr	r3, [pc, #492]	; (8005ee8 <_vfiprintf_r+0x244>)
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	d101      	bne.n	8005d04 <_vfiprintf_r+0x60>
 8005d00:	68b5      	ldr	r5, [r6, #8]
 8005d02:	e7df      	b.n	8005cc4 <_vfiprintf_r+0x20>
 8005d04:	4b79      	ldr	r3, [pc, #484]	; (8005eec <_vfiprintf_r+0x248>)
 8005d06:	429d      	cmp	r5, r3
 8005d08:	bf08      	it	eq
 8005d0a:	68f5      	ldreq	r5, [r6, #12]
 8005d0c:	e7da      	b.n	8005cc4 <_vfiprintf_r+0x20>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	0598      	lsls	r0, r3, #22
 8005d12:	d4ed      	bmi.n	8005cf0 <_vfiprintf_r+0x4c>
 8005d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d16:	f7ff fcfe 	bl	8005716 <__retarget_lock_release_recursive>
 8005d1a:	e7e9      	b.n	8005cf0 <_vfiprintf_r+0x4c>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d20:	2320      	movs	r3, #32
 8005d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d26:	2330      	movs	r3, #48	; 0x30
 8005d28:	f04f 0901 	mov.w	r9, #1
 8005d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ef0 <_vfiprintf_r+0x24c>
 8005d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d38:	4623      	mov	r3, r4
 8005d3a:	469a      	mov	sl, r3
 8005d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d40:	b10a      	cbz	r2, 8005d46 <_vfiprintf_r+0xa2>
 8005d42:	2a25      	cmp	r2, #37	; 0x25
 8005d44:	d1f9      	bne.n	8005d3a <_vfiprintf_r+0x96>
 8005d46:	ebba 0b04 	subs.w	fp, sl, r4
 8005d4a:	d00b      	beq.n	8005d64 <_vfiprintf_r+0xc0>
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	4622      	mov	r2, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ff93 	bl	8005c7e <__sfputs_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f000 80aa 	beq.w	8005eb2 <_vfiprintf_r+0x20e>
 8005d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d60:	445a      	add	r2, fp
 8005d62:	9209      	str	r2, [sp, #36]	; 0x24
 8005d64:	f89a 3000 	ldrb.w	r3, [sl]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80a2 	beq.w	8005eb2 <_vfiprintf_r+0x20e>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
 8005d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d78:	f10a 0a01 	add.w	sl, sl, #1
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d84:	931a      	str	r3, [sp, #104]	; 0x68
 8005d86:	4654      	mov	r4, sl
 8005d88:	2205      	movs	r2, #5
 8005d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8e:	4858      	ldr	r0, [pc, #352]	; (8005ef0 <_vfiprintf_r+0x24c>)
 8005d90:	f000 faf8 	bl	8006384 <memchr>
 8005d94:	9a04      	ldr	r2, [sp, #16]
 8005d96:	b9d8      	cbnz	r0, 8005dd0 <_vfiprintf_r+0x12c>
 8005d98:	06d1      	lsls	r1, r2, #27
 8005d9a:	bf44      	itt	mi
 8005d9c:	2320      	movmi	r3, #32
 8005d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da2:	0713      	lsls	r3, r2, #28
 8005da4:	bf44      	itt	mi
 8005da6:	232b      	movmi	r3, #43	; 0x2b
 8005da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dac:	f89a 3000 	ldrb.w	r3, [sl]
 8005db0:	2b2a      	cmp	r3, #42	; 0x2a
 8005db2:	d015      	beq.n	8005de0 <_vfiprintf_r+0x13c>
 8005db4:	4654      	mov	r4, sl
 8005db6:	2000      	movs	r0, #0
 8005db8:	f04f 0c0a 	mov.w	ip, #10
 8005dbc:	9a07      	ldr	r2, [sp, #28]
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc4:	3b30      	subs	r3, #48	; 0x30
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d94e      	bls.n	8005e68 <_vfiprintf_r+0x1c4>
 8005dca:	b1b0      	cbz	r0, 8005dfa <_vfiprintf_r+0x156>
 8005dcc:	9207      	str	r2, [sp, #28]
 8005dce:	e014      	b.n	8005dfa <_vfiprintf_r+0x156>
 8005dd0:	eba0 0308 	sub.w	r3, r0, r8
 8005dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	46a2      	mov	sl, r4
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	e7d2      	b.n	8005d86 <_vfiprintf_r+0xe2>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	1d19      	adds	r1, r3, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	9103      	str	r1, [sp, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bfbb      	ittet	lt
 8005dec:	425b      	neglt	r3, r3
 8005dee:	f042 0202 	orrlt.w	r2, r2, #2
 8005df2:	9307      	strge	r3, [sp, #28]
 8005df4:	9307      	strlt	r3, [sp, #28]
 8005df6:	bfb8      	it	lt
 8005df8:	9204      	strlt	r2, [sp, #16]
 8005dfa:	7823      	ldrb	r3, [r4, #0]
 8005dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8005dfe:	d10c      	bne.n	8005e1a <_vfiprintf_r+0x176>
 8005e00:	7863      	ldrb	r3, [r4, #1]
 8005e02:	2b2a      	cmp	r3, #42	; 0x2a
 8005e04:	d135      	bne.n	8005e72 <_vfiprintf_r+0x1ce>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	3402      	adds	r4, #2
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	9203      	str	r2, [sp, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bfb8      	it	lt
 8005e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e18:	9305      	str	r3, [sp, #20]
 8005e1a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005ef4 <_vfiprintf_r+0x250>
 8005e1e:	2203      	movs	r2, #3
 8005e20:	4650      	mov	r0, sl
 8005e22:	7821      	ldrb	r1, [r4, #0]
 8005e24:	f000 faae 	bl	8006384 <memchr>
 8005e28:	b140      	cbz	r0, 8005e3c <_vfiprintf_r+0x198>
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	eba0 000a 	sub.w	r0, r0, sl
 8005e30:	fa03 f000 	lsl.w	r0, r3, r0
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	3401      	adds	r4, #1
 8005e38:	4303      	orrs	r3, r0
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e40:	2206      	movs	r2, #6
 8005e42:	482d      	ldr	r0, [pc, #180]	; (8005ef8 <_vfiprintf_r+0x254>)
 8005e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e48:	f000 fa9c 	bl	8006384 <memchr>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d03f      	beq.n	8005ed0 <_vfiprintf_r+0x22c>
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <_vfiprintf_r+0x258>)
 8005e52:	bb1b      	cbnz	r3, 8005e9c <_vfiprintf_r+0x1f8>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	3307      	adds	r3, #7
 8005e58:	f023 0307 	bic.w	r3, r3, #7
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	9303      	str	r3, [sp, #12]
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	443b      	add	r3, r7
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
 8005e66:	e767      	b.n	8005d38 <_vfiprintf_r+0x94>
 8005e68:	460c      	mov	r4, r1
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e70:	e7a5      	b.n	8005dbe <_vfiprintf_r+0x11a>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f04f 0c0a 	mov.w	ip, #10
 8005e78:	4619      	mov	r1, r3
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	9305      	str	r3, [sp, #20]
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e84:	3a30      	subs	r2, #48	; 0x30
 8005e86:	2a09      	cmp	r2, #9
 8005e88:	d903      	bls.n	8005e92 <_vfiprintf_r+0x1ee>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0c5      	beq.n	8005e1a <_vfiprintf_r+0x176>
 8005e8e:	9105      	str	r1, [sp, #20]
 8005e90:	e7c3      	b.n	8005e1a <_vfiprintf_r+0x176>
 8005e92:	4604      	mov	r4, r0
 8005e94:	2301      	movs	r3, #1
 8005e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9a:	e7f0      	b.n	8005e7e <_vfiprintf_r+0x1da>
 8005e9c:	ab03      	add	r3, sp, #12
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <_vfiprintf_r+0x25c>)
 8005ea6:	a904      	add	r1, sp, #16
 8005ea8:	f3af 8000 	nop.w
 8005eac:	4607      	mov	r7, r0
 8005eae:	1c78      	adds	r0, r7, #1
 8005eb0:	d1d6      	bne.n	8005e60 <_vfiprintf_r+0x1bc>
 8005eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eb4:	07d9      	lsls	r1, r3, #31
 8005eb6:	d405      	bmi.n	8005ec4 <_vfiprintf_r+0x220>
 8005eb8:	89ab      	ldrh	r3, [r5, #12]
 8005eba:	059a      	lsls	r2, r3, #22
 8005ebc:	d402      	bmi.n	8005ec4 <_vfiprintf_r+0x220>
 8005ebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ec0:	f7ff fc29 	bl	8005716 <__retarget_lock_release_recursive>
 8005ec4:	89ab      	ldrh	r3, [r5, #12]
 8005ec6:	065b      	lsls	r3, r3, #25
 8005ec8:	f53f af12 	bmi.w	8005cf0 <_vfiprintf_r+0x4c>
 8005ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ece:	e711      	b.n	8005cf4 <_vfiprintf_r+0x50>
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <_vfiprintf_r+0x25c>)
 8005eda:	a904      	add	r1, sp, #16
 8005edc:	f000 f882 	bl	8005fe4 <_printf_i>
 8005ee0:	e7e4      	b.n	8005eac <_vfiprintf_r+0x208>
 8005ee2:	bf00      	nop
 8005ee4:	080067b4 	.word	0x080067b4
 8005ee8:	080067d4 	.word	0x080067d4
 8005eec:	08006794 	.word	0x08006794
 8005ef0:	080067f4 	.word	0x080067f4
 8005ef4:	080067fa 	.word	0x080067fa
 8005ef8:	080067fe 	.word	0x080067fe
 8005efc:	00000000 	.word	0x00000000
 8005f00:	08005c7f 	.word	0x08005c7f

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	4607      	mov	r7, r0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bfb8      	it	lt
 8005f16:	4613      	movlt	r3, r2
 8005f18:	6033      	str	r3, [r6, #0]
 8005f1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f1e:	460c      	mov	r4, r1
 8005f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc28      	bgt.n	8005f9e <_printf_common+0x9a>
 8005f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f50:	1e13      	subs	r3, r2, #0
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42d      	bmi.n	8005fb8 <_printf_common+0xb4>
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d020      	beq.n	8005fac <_printf_common+0xa8>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	68e5      	ldr	r5, [r4, #12]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf18      	it	ne
 8005f76:	2500      	movne	r5, #0
 8005f78:	6832      	ldr	r2, [r6, #0]
 8005f7a:	f04f 0600 	mov.w	r6, #0
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	bf08      	it	eq
 8005f82:	1aad      	subeq	r5, r5, r2
 8005f84:	6922      	ldr	r2, [r4, #16]
 8005f86:	bf08      	it	eq
 8005f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bfc4      	itt	gt
 8005f90:	1a9b      	subgt	r3, r3, r2
 8005f92:	18ed      	addgt	r5, r5, r3
 8005f94:	341a      	adds	r4, #26
 8005f96:	42b5      	cmp	r5, r6
 8005f98:	d11a      	bne.n	8005fd0 <_printf_common+0xcc>
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	e008      	b.n	8005fb0 <_printf_common+0xac>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	47c0      	blx	r8
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d103      	bne.n	8005fb4 <_printf_common+0xb0>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb4:	3501      	adds	r5, #1
 8005fb6:	e7c4      	b.n	8005f42 <_printf_common+0x3e>
 8005fb8:	2030      	movs	r0, #48	; 0x30
 8005fba:	18e1      	adds	r1, r4, r3
 8005fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc6:	4422      	add	r2, r4
 8005fc8:	3302      	adds	r3, #2
 8005fca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fce:	e7c5      	b.n	8005f5c <_printf_common+0x58>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	47c0      	blx	r8
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d0e6      	beq.n	8005fac <_printf_common+0xa8>
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7d9      	b.n	8005f96 <_printf_common+0x92>
	...

08005fe4 <_printf_i>:
 8005fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	7e0f      	ldrb	r7, [r1, #24]
 8005fea:	4691      	mov	r9, r2
 8005fec:	2f78      	cmp	r7, #120	; 0x78
 8005fee:	4680      	mov	r8, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	469a      	mov	sl, r3
 8005ff4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ffa:	d807      	bhi.n	800600c <_printf_i+0x28>
 8005ffc:	2f62      	cmp	r7, #98	; 0x62
 8005ffe:	d80a      	bhi.n	8006016 <_printf_i+0x32>
 8006000:	2f00      	cmp	r7, #0
 8006002:	f000 80d9 	beq.w	80061b8 <_printf_i+0x1d4>
 8006006:	2f58      	cmp	r7, #88	; 0x58
 8006008:	f000 80a4 	beq.w	8006154 <_printf_i+0x170>
 800600c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006014:	e03a      	b.n	800608c <_printf_i+0xa8>
 8006016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800601a:	2b15      	cmp	r3, #21
 800601c:	d8f6      	bhi.n	800600c <_printf_i+0x28>
 800601e:	a101      	add	r1, pc, #4	; (adr r1, 8006024 <_printf_i+0x40>)
 8006020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006024:	0800607d 	.word	0x0800607d
 8006028:	08006091 	.word	0x08006091
 800602c:	0800600d 	.word	0x0800600d
 8006030:	0800600d 	.word	0x0800600d
 8006034:	0800600d 	.word	0x0800600d
 8006038:	0800600d 	.word	0x0800600d
 800603c:	08006091 	.word	0x08006091
 8006040:	0800600d 	.word	0x0800600d
 8006044:	0800600d 	.word	0x0800600d
 8006048:	0800600d 	.word	0x0800600d
 800604c:	0800600d 	.word	0x0800600d
 8006050:	0800619f 	.word	0x0800619f
 8006054:	080060c1 	.word	0x080060c1
 8006058:	08006181 	.word	0x08006181
 800605c:	0800600d 	.word	0x0800600d
 8006060:	0800600d 	.word	0x0800600d
 8006064:	080061c1 	.word	0x080061c1
 8006068:	0800600d 	.word	0x0800600d
 800606c:	080060c1 	.word	0x080060c1
 8006070:	0800600d 	.word	0x0800600d
 8006074:	0800600d 	.word	0x0800600d
 8006078:	08006189 	.word	0x08006189
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	1d1a      	adds	r2, r3, #4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	602a      	str	r2, [r5, #0]
 8006084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800608c:	2301      	movs	r3, #1
 800608e:	e0a4      	b.n	80061da <_printf_i+0x1f6>
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	6829      	ldr	r1, [r5, #0]
 8006094:	0606      	lsls	r6, r0, #24
 8006096:	f101 0304 	add.w	r3, r1, #4
 800609a:	d50a      	bpl.n	80060b2 <_printf_i+0xce>
 800609c:	680e      	ldr	r6, [r1, #0]
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	da03      	bge.n	80060ac <_printf_i+0xc8>
 80060a4:	232d      	movs	r3, #45	; 0x2d
 80060a6:	4276      	negs	r6, r6
 80060a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ac:	230a      	movs	r3, #10
 80060ae:	485e      	ldr	r0, [pc, #376]	; (8006228 <_printf_i+0x244>)
 80060b0:	e019      	b.n	80060e6 <_printf_i+0x102>
 80060b2:	680e      	ldr	r6, [r1, #0]
 80060b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060b8:	602b      	str	r3, [r5, #0]
 80060ba:	bf18      	it	ne
 80060bc:	b236      	sxthne	r6, r6
 80060be:	e7ef      	b.n	80060a0 <_printf_i+0xbc>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	6820      	ldr	r0, [r4, #0]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	6029      	str	r1, [r5, #0]
 80060c8:	0601      	lsls	r1, r0, #24
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0xec>
 80060cc:	681e      	ldr	r6, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <_printf_i+0xf2>
 80060d0:	0646      	lsls	r6, r0, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0xe8>
 80060d4:	881e      	ldrh	r6, [r3, #0]
 80060d6:	2f6f      	cmp	r7, #111	; 0x6f
 80060d8:	bf0c      	ite	eq
 80060da:	2308      	moveq	r3, #8
 80060dc:	230a      	movne	r3, #10
 80060de:	4852      	ldr	r0, [pc, #328]	; (8006228 <_printf_i+0x244>)
 80060e0:	2100      	movs	r1, #0
 80060e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e6:	6865      	ldr	r5, [r4, #4]
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	bfa8      	it	ge
 80060ec:	6821      	ldrge	r1, [r4, #0]
 80060ee:	60a5      	str	r5, [r4, #8]
 80060f0:	bfa4      	itt	ge
 80060f2:	f021 0104 	bicge.w	r1, r1, #4
 80060f6:	6021      	strge	r1, [r4, #0]
 80060f8:	b90e      	cbnz	r6, 80060fe <_printf_i+0x11a>
 80060fa:	2d00      	cmp	r5, #0
 80060fc:	d04d      	beq.n	800619a <_printf_i+0x1b6>
 80060fe:	4615      	mov	r5, r2
 8006100:	fbb6 f1f3 	udiv	r1, r6, r3
 8006104:	fb03 6711 	mls	r7, r3, r1, r6
 8006108:	5dc7      	ldrb	r7, [r0, r7]
 800610a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800610e:	4637      	mov	r7, r6
 8006110:	42bb      	cmp	r3, r7
 8006112:	460e      	mov	r6, r1
 8006114:	d9f4      	bls.n	8006100 <_printf_i+0x11c>
 8006116:	2b08      	cmp	r3, #8
 8006118:	d10b      	bne.n	8006132 <_printf_i+0x14e>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	07de      	lsls	r6, r3, #31
 800611e:	d508      	bpl.n	8006132 <_printf_i+0x14e>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	6861      	ldr	r1, [r4, #4]
 8006124:	4299      	cmp	r1, r3
 8006126:	bfde      	ittt	le
 8006128:	2330      	movle	r3, #48	; 0x30
 800612a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800612e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006132:	1b52      	subs	r2, r2, r5
 8006134:	6122      	str	r2, [r4, #16]
 8006136:	464b      	mov	r3, r9
 8006138:	4621      	mov	r1, r4
 800613a:	4640      	mov	r0, r8
 800613c:	f8cd a000 	str.w	sl, [sp]
 8006140:	aa03      	add	r2, sp, #12
 8006142:	f7ff fedf 	bl	8005f04 <_printf_common>
 8006146:	3001      	adds	r0, #1
 8006148:	d14c      	bne.n	80061e4 <_printf_i+0x200>
 800614a:	f04f 30ff 	mov.w	r0, #4294967295
 800614e:	b004      	add	sp, #16
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	4834      	ldr	r0, [pc, #208]	; (8006228 <_printf_i+0x244>)
 8006156:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800615a:	6829      	ldr	r1, [r5, #0]
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006162:	6029      	str	r1, [r5, #0]
 8006164:	061d      	lsls	r5, r3, #24
 8006166:	d514      	bpl.n	8006192 <_printf_i+0x1ae>
 8006168:	07df      	lsls	r7, r3, #31
 800616a:	bf44      	itt	mi
 800616c:	f043 0320 	orrmi.w	r3, r3, #32
 8006170:	6023      	strmi	r3, [r4, #0]
 8006172:	b91e      	cbnz	r6, 800617c <_printf_i+0x198>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	f023 0320 	bic.w	r3, r3, #32
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	2310      	movs	r3, #16
 800617e:	e7af      	b.n	80060e0 <_printf_i+0xfc>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f043 0320 	orr.w	r3, r3, #32
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	2378      	movs	r3, #120	; 0x78
 800618a:	4828      	ldr	r0, [pc, #160]	; (800622c <_printf_i+0x248>)
 800618c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006190:	e7e3      	b.n	800615a <_printf_i+0x176>
 8006192:	0659      	lsls	r1, r3, #25
 8006194:	bf48      	it	mi
 8006196:	b2b6      	uxthmi	r6, r6
 8006198:	e7e6      	b.n	8006168 <_printf_i+0x184>
 800619a:	4615      	mov	r5, r2
 800619c:	e7bb      	b.n	8006116 <_printf_i+0x132>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	6826      	ldr	r6, [r4, #0]
 80061a2:	1d18      	adds	r0, r3, #4
 80061a4:	6961      	ldr	r1, [r4, #20]
 80061a6:	6028      	str	r0, [r5, #0]
 80061a8:	0635      	lsls	r5, r6, #24
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	d501      	bpl.n	80061b2 <_printf_i+0x1ce>
 80061ae:	6019      	str	r1, [r3, #0]
 80061b0:	e002      	b.n	80061b8 <_printf_i+0x1d4>
 80061b2:	0670      	lsls	r0, r6, #25
 80061b4:	d5fb      	bpl.n	80061ae <_printf_i+0x1ca>
 80061b6:	8019      	strh	r1, [r3, #0]
 80061b8:	2300      	movs	r3, #0
 80061ba:	4615      	mov	r5, r2
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	e7ba      	b.n	8006136 <_printf_i+0x152>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	2100      	movs	r1, #0
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	602a      	str	r2, [r5, #0]
 80061c8:	681d      	ldr	r5, [r3, #0]
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 f8d9 	bl	8006384 <memchr>
 80061d2:	b108      	cbz	r0, 80061d8 <_printf_i+0x1f4>
 80061d4:	1b40      	subs	r0, r0, r5
 80061d6:	6060      	str	r0, [r4, #4]
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	2300      	movs	r3, #0
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e2:	e7a8      	b.n	8006136 <_printf_i+0x152>
 80061e4:	462a      	mov	r2, r5
 80061e6:	4649      	mov	r1, r9
 80061e8:	4640      	mov	r0, r8
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	47d0      	blx	sl
 80061ee:	3001      	adds	r0, #1
 80061f0:	d0ab      	beq.n	800614a <_printf_i+0x166>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	079b      	lsls	r3, r3, #30
 80061f6:	d413      	bmi.n	8006220 <_printf_i+0x23c>
 80061f8:	68e0      	ldr	r0, [r4, #12]
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	4298      	cmp	r0, r3
 80061fe:	bfb8      	it	lt
 8006200:	4618      	movlt	r0, r3
 8006202:	e7a4      	b.n	800614e <_printf_i+0x16a>
 8006204:	2301      	movs	r3, #1
 8006206:	4632      	mov	r2, r6
 8006208:	4649      	mov	r1, r9
 800620a:	4640      	mov	r0, r8
 800620c:	47d0      	blx	sl
 800620e:	3001      	adds	r0, #1
 8006210:	d09b      	beq.n	800614a <_printf_i+0x166>
 8006212:	3501      	adds	r5, #1
 8006214:	68e3      	ldr	r3, [r4, #12]
 8006216:	9903      	ldr	r1, [sp, #12]
 8006218:	1a5b      	subs	r3, r3, r1
 800621a:	42ab      	cmp	r3, r5
 800621c:	dcf2      	bgt.n	8006204 <_printf_i+0x220>
 800621e:	e7eb      	b.n	80061f8 <_printf_i+0x214>
 8006220:	2500      	movs	r5, #0
 8006222:	f104 0619 	add.w	r6, r4, #25
 8006226:	e7f5      	b.n	8006214 <_printf_i+0x230>
 8006228:	08006805 	.word	0x08006805
 800622c:	08006816 	.word	0x08006816

08006230 <_sbrk_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	2300      	movs	r3, #0
 8006234:	4d05      	ldr	r5, [pc, #20]	; (800624c <_sbrk_r+0x1c>)
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fa fb66 	bl	800090c <_sbrk>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_sbrk_r+0x1a>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_sbrk_r+0x1a>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	200009e0 	.word	0x200009e0

08006250 <__sread>:
 8006250:	b510      	push	{r4, lr}
 8006252:	460c      	mov	r4, r1
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	f000 f8f8 	bl	800644c <_read_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	bfab      	itete	ge
 8006260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006262:	89a3      	ldrhlt	r3, [r4, #12]
 8006264:	181b      	addge	r3, r3, r0
 8006266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800626a:	bfac      	ite	ge
 800626c:	6563      	strge	r3, [r4, #84]	; 0x54
 800626e:	81a3      	strhlt	r3, [r4, #12]
 8006270:	bd10      	pop	{r4, pc}

08006272 <__swrite>:
 8006272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	461f      	mov	r7, r3
 8006278:	898b      	ldrh	r3, [r1, #12]
 800627a:	4605      	mov	r5, r0
 800627c:	05db      	lsls	r3, r3, #23
 800627e:	460c      	mov	r4, r1
 8006280:	4616      	mov	r6, r2
 8006282:	d505      	bpl.n	8006290 <__swrite+0x1e>
 8006284:	2302      	movs	r3, #2
 8006286:	2200      	movs	r2, #0
 8006288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628c:	f000 f868 	bl	8006360 <_lseek_r>
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	4632      	mov	r2, r6
 8006294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	4628      	mov	r0, r5
 800629c:	463b      	mov	r3, r7
 800629e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	f000 b817 	b.w	80062d8 <_write_r>

080062aa <__sseek>:
 80062aa:	b510      	push	{r4, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b2:	f000 f855 	bl	8006360 <_lseek_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	bf15      	itete	ne
 80062bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80062be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062c6:	81a3      	strheq	r3, [r4, #12]
 80062c8:	bf18      	it	ne
 80062ca:	81a3      	strhne	r3, [r4, #12]
 80062cc:	bd10      	pop	{r4, pc}

080062ce <__sclose>:
 80062ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d2:	f000 b813 	b.w	80062fc <_close_r>
	...

080062d8 <_write_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	2200      	movs	r2, #0
 80062e2:	4d05      	ldr	r5, [pc, #20]	; (80062f8 <_write_r+0x20>)
 80062e4:	602a      	str	r2, [r5, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f7fa fac4 	bl	8000874 <_write>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_write_r+0x1e>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_write_r+0x1e>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	200009e0 	.word	0x200009e0

080062fc <_close_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	2300      	movs	r3, #0
 8006300:	4d05      	ldr	r5, [pc, #20]	; (8006318 <_close_r+0x1c>)
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fa fad0 	bl	80008ac <_close>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_close_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_close_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200009e0 	.word	0x200009e0

0800631c <_fstat_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	2300      	movs	r3, #0
 8006320:	4d06      	ldr	r5, [pc, #24]	; (800633c <_fstat_r+0x20>)
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	f7fa faca 	bl	80008c2 <_fstat>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d102      	bne.n	8006338 <_fstat_r+0x1c>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	b103      	cbz	r3, 8006338 <_fstat_r+0x1c>
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	bf00      	nop
 800633c:	200009e0 	.word	0x200009e0

08006340 <_isatty_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	2300      	movs	r3, #0
 8006344:	4d05      	ldr	r5, [pc, #20]	; (800635c <_isatty_r+0x1c>)
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fa fac8 	bl	80008e0 <_isatty>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_isatty_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_isatty_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	200009e0 	.word	0x200009e0

08006360 <_lseek_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	2200      	movs	r2, #0
 800636a:	4d05      	ldr	r5, [pc, #20]	; (8006380 <_lseek_r+0x20>)
 800636c:	602a      	str	r2, [r5, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fa fac0 	bl	80008f4 <_lseek>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_lseek_r+0x1e>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_lseek_r+0x1e>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	200009e0 	.word	0x200009e0

08006384 <memchr>:
 8006384:	4603      	mov	r3, r0
 8006386:	b510      	push	{r4, lr}
 8006388:	b2c9      	uxtb	r1, r1
 800638a:	4402      	add	r2, r0
 800638c:	4293      	cmp	r3, r2
 800638e:	4618      	mov	r0, r3
 8006390:	d101      	bne.n	8006396 <memchr+0x12>
 8006392:	2000      	movs	r0, #0
 8006394:	e003      	b.n	800639e <memchr+0x1a>
 8006396:	7804      	ldrb	r4, [r0, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	428c      	cmp	r4, r1
 800639c:	d1f6      	bne.n	800638c <memchr+0x8>
 800639e:	bd10      	pop	{r4, pc}

080063a0 <memmove>:
 80063a0:	4288      	cmp	r0, r1
 80063a2:	b510      	push	{r4, lr}
 80063a4:	eb01 0402 	add.w	r4, r1, r2
 80063a8:	d902      	bls.n	80063b0 <memmove+0x10>
 80063aa:	4284      	cmp	r4, r0
 80063ac:	4623      	mov	r3, r4
 80063ae:	d807      	bhi.n	80063c0 <memmove+0x20>
 80063b0:	1e43      	subs	r3, r0, #1
 80063b2:	42a1      	cmp	r1, r4
 80063b4:	d008      	beq.n	80063c8 <memmove+0x28>
 80063b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063be:	e7f8      	b.n	80063b2 <memmove+0x12>
 80063c0:	4601      	mov	r1, r0
 80063c2:	4402      	add	r2, r0
 80063c4:	428a      	cmp	r2, r1
 80063c6:	d100      	bne.n	80063ca <memmove+0x2a>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063d2:	e7f7      	b.n	80063c4 <memmove+0x24>

080063d4 <__malloc_lock>:
 80063d4:	4801      	ldr	r0, [pc, #4]	; (80063dc <__malloc_lock+0x8>)
 80063d6:	f7ff b99d 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80063da:	bf00      	nop
 80063dc:	200009d4 	.word	0x200009d4

080063e0 <__malloc_unlock>:
 80063e0:	4801      	ldr	r0, [pc, #4]	; (80063e8 <__malloc_unlock+0x8>)
 80063e2:	f7ff b998 	b.w	8005716 <__retarget_lock_release_recursive>
 80063e6:	bf00      	nop
 80063e8:	200009d4 	.word	0x200009d4

080063ec <_realloc_r>:
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	4680      	mov	r8, r0
 80063f2:	4614      	mov	r4, r2
 80063f4:	460e      	mov	r6, r1
 80063f6:	b921      	cbnz	r1, 8006402 <_realloc_r+0x16>
 80063f8:	4611      	mov	r1, r2
 80063fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fe:	f7ff ba59 	b.w	80058b4 <_malloc_r>
 8006402:	b92a      	cbnz	r2, 8006410 <_realloc_r+0x24>
 8006404:	f7ff f9ee 	bl	80057e4 <_free_r>
 8006408:	4625      	mov	r5, r4
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006410:	f000 f82e 	bl	8006470 <_malloc_usable_size_r>
 8006414:	4284      	cmp	r4, r0
 8006416:	4607      	mov	r7, r0
 8006418:	d802      	bhi.n	8006420 <_realloc_r+0x34>
 800641a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800641e:	d812      	bhi.n	8006446 <_realloc_r+0x5a>
 8006420:	4621      	mov	r1, r4
 8006422:	4640      	mov	r0, r8
 8006424:	f7ff fa46 	bl	80058b4 <_malloc_r>
 8006428:	4605      	mov	r5, r0
 800642a:	2800      	cmp	r0, #0
 800642c:	d0ed      	beq.n	800640a <_realloc_r+0x1e>
 800642e:	42bc      	cmp	r4, r7
 8006430:	4622      	mov	r2, r4
 8006432:	4631      	mov	r1, r6
 8006434:	bf28      	it	cs
 8006436:	463a      	movcs	r2, r7
 8006438:	f7fe fe20 	bl	800507c <memcpy>
 800643c:	4631      	mov	r1, r6
 800643e:	4640      	mov	r0, r8
 8006440:	f7ff f9d0 	bl	80057e4 <_free_r>
 8006444:	e7e1      	b.n	800640a <_realloc_r+0x1e>
 8006446:	4635      	mov	r5, r6
 8006448:	e7df      	b.n	800640a <_realloc_r+0x1e>
	...

0800644c <_read_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4604      	mov	r4, r0
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	2200      	movs	r2, #0
 8006456:	4d05      	ldr	r5, [pc, #20]	; (800646c <_read_r+0x20>)
 8006458:	602a      	str	r2, [r5, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	f7fa f9ed 	bl	800083a <_read>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_read_r+0x1e>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_read_r+0x1e>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200009e0 	.word	0x200009e0

08006470 <_malloc_usable_size_r>:
 8006470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006474:	1f18      	subs	r0, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	bfbc      	itt	lt
 800647a:	580b      	ldrlt	r3, [r1, r0]
 800647c:	18c0      	addlt	r0, r0, r3
 800647e:	4770      	bx	lr

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
