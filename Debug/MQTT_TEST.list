
MQTT_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000649c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006988  08006988  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006988  08006988  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  200000f0  08006a80  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f0  08006a80  000209f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f12b  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea9  00000000  00000000  0002f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000320f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00032ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001990b  00000000  00000000  00033bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100c2  00000000  00000000  0004d4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b1c  00000000  00000000  0005d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e70d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000e712c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006590 	.word	0x08006590

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08006590 	.word	0x08006590

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <messageArrived>:
{
	(char*)"stdout-subscriber", 1, (char*)"\n", QOS1, "", "", (char*)"localhost", 1883, 0
};

void messageArrived(MessageData* md)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	MQTTMessage* message = md->message;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	627b      	str	r3, [r7, #36]	; 0x24
	MQTTString* topic = md->topicName;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	623b      	str	r3, [r7, #32]
	char msg_payload[10];
	char msg_topic[10];

	sprintf(msg_topic, "%.*s", (int)topic->lenstring.len,(char*)topic->lenstring.data);
 8000184:	6a3b      	ldr	r3, [r7, #32]
 8000186:	685a      	ldr	r2, [r3, #4]
 8000188:	6a3b      	ldr	r3, [r7, #32]
 800018a:	689b      	ldr	r3, [r3, #8]
 800018c:	f107 0008 	add.w	r0, r7, #8
 8000190:	491f      	ldr	r1, [pc, #124]	; (8000210 <messageArrived+0xa0>)
 8000192:	f005 f89f 	bl	80052d4 <siprintf>
	sprintf(msg_payload, "%.*s", (int)message->payloadlen, (char*)message->payload);
 8000196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000198:	68db      	ldr	r3, [r3, #12]
 800019a:	461a      	mov	r2, r3
 800019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	f107 0014 	add.w	r0, r7, #20
 80001a4:	491a      	ldr	r1, [pc, #104]	; (8000210 <messageArrived+0xa0>)
 80001a6:	f005 f895 	bl	80052d4 <siprintf>

	printf("%s\r\n", msg_payload);
 80001aa:	f107 0314 	add.w	r3, r7, #20
 80001ae:	4619      	mov	r1, r3
 80001b0:	4818      	ldr	r0, [pc, #96]	; (8000214 <messageArrived+0xa4>)
 80001b2:	f004 ffcd 	bl	8005150 <iprintf>
	printf("%s\r\n", msg_topic);
 80001b6:	f107 0308 	add.w	r3, r7, #8
 80001ba:	4619      	mov	r1, r3
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <messageArrived+0xa4>)
 80001be:	f004 ffc7 	bl	8005150 <iprintf>

	if(!strcmp(msg_topic, "cabina01/mesa")){
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	4914      	ldr	r1, [pc, #80]	; (8000218 <messageArrived+0xa8>)
 80001c8:	4618      	mov	r0, r3
 80001ca:	f7ff ffbf 	bl	800014c <strcmp>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d118      	bne.n	8000206 <messageArrived+0x96>
		if(!strcmp(msg_payload, "true"))
 80001d4:	f107 0314 	add.w	r3, r7, #20
 80001d8:	4910      	ldr	r1, [pc, #64]	; (800021c <messageArrived+0xac>)
 80001da:	4618      	mov	r0, r3
 80001dc:	f7ff ffb6 	bl	800014c <strcmp>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d103      	bne.n	80001ee <messageArrived+0x7e>
			printf("prende\r\n");
 80001e6:	480e      	ldr	r0, [pc, #56]	; (8000220 <messageArrived+0xb0>)
 80001e8:	f005 f838 	bl	800525c <puts>
		else if(!strcmp(msg_payload, "false"))
			printf("apaga\r\n");
	}
}
 80001ec:	e00b      	b.n	8000206 <messageArrived+0x96>
		else if(!strcmp(msg_payload, "false"))
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	490c      	ldr	r1, [pc, #48]	; (8000224 <messageArrived+0xb4>)
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffa9 	bl	800014c <strcmp>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d102      	bne.n	8000206 <messageArrived+0x96>
			printf("apaga\r\n");
 8000200:	4809      	ldr	r0, [pc, #36]	; (8000228 <messageArrived+0xb8>)
 8000202:	f005 f82b 	bl	800525c <puts>
}
 8000206:	bf00      	nop
 8000208:	3728      	adds	r7, #40	; 0x28
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	080065d0 	.word	0x080065d0
 8000214:	080065d8 	.word	0x080065d8
 8000218:	080065e0 	.word	0x080065e0
 800021c:	080065f0 	.word	0x080065f0
 8000220:	080065f8 	.word	0x080065f8
 8000224:	08006600 	.word	0x08006600
 8000228:	08006608 	.word	0x08006608

0800022c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000234:	1d39      	adds	r1, r7, #4
 8000236:	f04f 33ff 	mov.w	r3, #4294967295
 800023a:	2201      	movs	r2, #1
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <__io_putchar+0x20>)
 800023e:	f004 fdc7 	bl	8004dd0 <HAL_UART_Transmit>
  return ch;
 8000242:	687b      	ldr	r3, [r7, #4]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000164 	.word	0x20000164

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b0e0      	sub	sp, #384	; 0x180
 8000254:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f003 fdd1 	bl	8003dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f889 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f935 	bl	80004cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000262:	f000 f8cb 	bl	80003fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000266:	f000 f907 	bl	8000478 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  W5500Init();
 800026a:	f002 ffaf 	bl	80031cc <W5500Init>

  ctlnetwork(CN_SET_NETINFO, (void*) &WIZNETINFO);
 800026e:	493a      	ldr	r1, [pc, #232]	; (8000358 <main+0x108>)
 8000270:	2000      	movs	r0, #0
 8000272:	f003 f9b7 	bl	80035e4 <ctlnetwork>

  PHYStatusCheck();
 8000276:	f000 f975 	bl	8000564 <PHYStatusCheck>
  PrintPHYConf();
 800027a:	f000 f999 	bl	80005b0 <PrintPHYConf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Network n;
  Client c;
  unsigned char buf[100];
  int rc = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  n.my_socket = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  NewNetwork(&n);
 800028a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800028e:	4618      	mov	r0, r3
 8000290:	f001 f900 	bl	8001494 <NewNetwork>
  ConnectNetwork(&n, MQTTBroker, targetPort);
 8000294:	4b31      	ldr	r3, [pc, #196]	; (800035c <main+0x10c>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800029c:	4930      	ldr	r1, [pc, #192]	; (8000360 <main+0x110>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 f971 	bl	8001586 <ConnectNetwork>
  MQTTClient(&c,&n,1000,buf,100,tempBuffer,2048);
 80002a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80002ac:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80002b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002b4:	9202      	str	r2, [sp, #8]
 80002b6:	4a2b      	ldr	r2, [pc, #172]	; (8000364 <main+0x114>)
 80002b8:	9201      	str	r2, [sp, #4]
 80002ba:	2264      	movs	r2, #100	; 0x64
 80002bc:	9200      	str	r2, [sp, #0]
 80002be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002c2:	f000 fc25 	bl	8000b10 <MQTTClient>

  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80002c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002ce:	4a26      	ldr	r2, [pc, #152]	; (8000368 <main+0x118>)
 80002d0:	4618      	mov	r0, r3
 80002d2:	4611      	mov	r1, r2
 80002d4:	2358      	movs	r3, #88	; 0x58
 80002d6:	461a      	mov	r2, r3
 80002d8:	f004 ff24 	bl	8005124 <memcpy>
  data.willFlag = 0;
 80002dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002e4:	2200      	movs	r2, #0
 80002e6:	76da      	strb	r2, [r3, #27]
  data.MQTTVersion = 3;
 80002e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80002f0:	2203      	movs	r2, #3
 80002f2:	721a      	strb	r2, [r3, #8]
  data.clientID.cstring = opts.clientid;
 80002f4:	4b1d      	ldr	r3, [pc, #116]	; (800036c <main+0x11c>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80002fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000300:	60da      	str	r2, [r3, #12]
  data.keepAliveInterval = 60;
 8000302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800030a:	223c      	movs	r2, #60	; 0x3c
 800030c:	831a      	strh	r2, [r3, #24]
  data.cleansession = 1;
 800030e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000316:	2201      	movs	r2, #1
 8000318:	769a      	strb	r2, [r3, #26]

  rc = MQTTConnect(&c, &data);
 800031a:	1d3a      	adds	r2, r7, #4
 800031c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000320:	4611      	mov	r1, r2
 8000322:	4618      	mov	r0, r3
 8000324:	f000 ff20 	bl	8001168 <MQTTConnect>
 8000328:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

  subscriptionTopics(rc, c);
 800032c:	4668      	mov	r0, sp
 800032e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000332:	2250      	movs	r2, #80	; 0x50
 8000334:	4619      	mov	r1, r3
 8000336:	f004 fef5 	bl	8005124 <memcpy>
 800033a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800033e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000340:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8000344:	f000 f978 	bl	8000638 <subscriptionTopics>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MQTTYield(&c, 1000);
 8000348:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800034c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000350:	4618      	mov	r0, r3
 8000352:	f000 febb 	bl	80010cc <MQTTYield>
 8000356:	e7f7      	b.n	8000348 <main+0xf8>
 8000358:	20000000 	.word	0x20000000
 800035c:	2000001c 	.word	0x2000001c
 8000360:	20000018 	.word	0x20000018
 8000364:	200001ac 	.word	0x200001ac
 8000368:	08006620 	.word	0x08006620
 800036c:	20000020 	.word	0x20000020

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b090      	sub	sp, #64	; 0x40
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f004 fede 	bl	8005140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000392:	2301      	movs	r3, #1
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	2301      	movs	r3, #1
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	2302      	movs	r3, #2
 80003a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f004 f825 	bl	8004408 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c4:	f000 f998 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2101      	movs	r1, #1
 80003e2:	4618      	mov	r0, r3
 80003e4:	f004 fa92 	bl	800490c <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ee:	f000 f983 	bl	80006f8 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3740      	adds	r7, #64	; 0x40
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_SPI1_Init+0x74>)
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_SPI1_Init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_SPI1_Init+0x74>)
 8000408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_SPI1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_SPI1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_SPI1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_SPI1_Init+0x74>)
 8000428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_SPI1_Init+0x74>)
 8000430:	2208      	movs	r2, #8
 8000432:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_SPI1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043a:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_SPI1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_SPI1_Init+0x74>)
 8000448:	220a      	movs	r2, #10
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800044c:	4808      	ldr	r0, [pc, #32]	; (8000470 <MX_SPI1_Init+0x74>)
 800044e:	f004 fbeb 	bl	8004c28 <HAL_SPI_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000458:	f000 f94e 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <MX_SPI1_Init+0x74>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <MX_SPI1_Init+0x74>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800046a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000010c 	.word	0x2000010c
 8000474:	40013000 	.word	0x40013000

08000478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_USART2_UART_Init+0x50>)
 8000480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004b0:	f004 fc3e 	bl	8004d30 <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ba:	f000 f91d 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000164 	.word	0x20000164
 80004c8:	40004400 	.word	0x40004400

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <MX_GPIO_Init+0x90>)
 80004e6:	f043 0320 	orr.w	r3, r3, #32
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_GPIO_Init+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0320 	and.w	r3, r3, #32
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_GPIO_Init+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <MX_GPIO_Init+0x90>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_GPIO_Init+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_GPIO_Init+0x90>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <MX_GPIO_Init+0x90>)
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_GPIO_Init+0x90>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0308 	and.w	r3, r3, #8
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <MX_GPIO_Init+0x94>)
 8000530:	f003 ff52 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 8000534:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x94>)
 800054e:	f003 fdbf 	bl	80040d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00

08000564 <PHYStatusCheck>:

/* USER CODE BEGIN 4 */
void PHYStatusCheck(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 800056a:	480e      	ldr	r0, [pc, #56]	; (80005a4 <PHYStatusCheck+0x40>)
 800056c:	f004 fdf0 	bl	8005150 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	4619      	mov	r1, r3
 8000574:	200f      	movs	r0, #15
 8000576:	f002 ff53 	bl	8003420 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d106      	bne.n	800058e <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <PHYStatusCheck+0x44>)
 8000582:	f004 fde5 	bl	8005150 <iprintf>
			HAL_Delay(1500);
 8000586:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800058a:	f003 fc99 	bl	8003ec0 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0ea      	beq.n	800056a <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <PHYStatusCheck+0x48>)
 8000596:	f004 fddb 	bl	8005150 <iprintf>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	08006678 	.word	0x08006678
 80005a8:	080066a0 	.word	0x080066a0
 80005ac:	080066b4 	.word	0x080066b4

080005b0 <PrintPHYConf>:

void PrintPHYConf(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	4619      	mov	r1, r3
 80005ba:	200b      	movs	r0, #11
 80005bc:	f002 ff30 	bl	8003420 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 80005c0:	793b      	ldrb	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <PrintPHYConf+0x68>)
 80005c8:	f004 fdc2 	bl	8005150 <iprintf>
 80005cc:	e002      	b.n	80005d4 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <PrintPHYConf+0x6c>)
 80005d0:	f004 fdbe 	bl	8005150 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d103      	bne.n	80005e2 <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <PrintPHYConf+0x70>)
 80005dc:	f004 fdb8 	bl	8005150 <iprintf>
 80005e0:	e002      	b.n	80005e8 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 80005e2:	4810      	ldr	r0, [pc, #64]	; (8000624 <PrintPHYConf+0x74>)
 80005e4:	f004 fdb4 	bl	8005150 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d103      	bne.n	80005f6 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <PrintPHYConf+0x78>)
 80005f0:	f004 fdae 	bl	8005150 <iprintf>
 80005f4:	e002      	b.n	80005fc <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <PrintPHYConf+0x7c>)
 80005f8:	f004 fdaa 	bl	8005150 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d103      	bne.n	800060a <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <PrintPHYConf+0x80>)
 8000604:	f004 fda4 	bl	8005150 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000608:	e002      	b.n	8000610 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <PrintPHYConf+0x84>)
 800060c:	f004 fda0 	bl	8005150 <iprintf>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080066d0 	.word	0x080066d0
 800061c:	080066f4 	.word	0x080066f4
 8000620:	08006714 	.word	0x08006714
 8000624:	08006730 	.word	0x08006730
 8000628:	08006750 	.word	0x08006750
 800062c:	08006764 	.word	0x08006764
 8000630:	08006778 	.word	0x08006778
 8000634:	08006788 	.word	0x08006788

08000638 <subscriptionTopics>:

static void subscriptionTopics(int rc,Client c){
 8000638:	b084      	sub	sp, #16
 800063a:	b580      	push	{r7, lr}
 800063c:	b08e      	sub	sp, #56	; 0x38
 800063e:	af02      	add	r7, sp, #8
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (rc == SUCCESSS){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d134      	bne.n	80006ba <subscriptionTopics+0x82>
		printf("Success connection to MQTT Broker\r\n");
 8000650:	4821      	ldr	r0, [pc, #132]	; (80006d8 <subscriptionTopics+0xa0>)
 8000652:	f004 fe03 	bl	800525c <puts>
		for (int i=0; i<ncabinas; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800065a:	e028      	b.n	80006ae <subscriptionTopics+0x76>
			for (int j=0; j<2; j++){
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000660:	e01f      	b.n	80006a2 <subscriptionTopics+0x6a>
				char buf[30];
				snprintf(buf, 30, "cabina0%d/%s", i+1, topics[j]);
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	491d      	ldr	r1, [pc, #116]	; (80006dc <subscriptionTopics+0xa4>)
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800066e:	f107 0008 	add.w	r0, r7, #8
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4613      	mov	r3, r2
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <subscriptionTopics+0xa8>)
 8000678:	211e      	movs	r1, #30
 800067a:	f004 fdf7 	bl	800526c <sniprintf>
				printf("Subscribing to %s\r\n", buf);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	4817      	ldr	r0, [pc, #92]	; (80006e4 <subscriptionTopics+0xac>)
 8000686:	f004 fd63 	bl	8005150 <iprintf>
				MQTTSubscribe(&c, buf, opts.qos, messageArrived);
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <subscriptionTopics+0xb0>)
 800068c:	7b1a      	ldrb	r2, [r3, #12]
 800068e:	f107 0108 	add.w	r1, r7, #8
 8000692:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <subscriptionTopics+0xb4>)
 8000698:	f000 fdec 	bl	8001274 <MQTTSubscribe>
			for (int j=0; j<2; j++){
 800069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069e:	3301      	adds	r3, #1
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	dddc      	ble.n	8000662 <subscriptionTopics+0x2a>
		for (int i=0; i<ncabinas; i++){
 80006a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006aa:	3301      	adds	r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <subscriptionTopics+0xb8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbd1      	blt.n	800065c <subscriptionTopics+0x24>
			}
		}
	}
	else if(rc == FAILURE)
		printf("Failed connection to MQTT Broker\r\n");
}
 80006b8:	e006      	b.n	80006c8 <subscriptionTopics+0x90>
	else if(rc == FAILURE)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d102      	bne.n	80006c8 <subscriptionTopics+0x90>
		printf("Failed connection to MQTT Broker\r\n");
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <subscriptionTopics+0xbc>)
 80006c4:	f004 fdca 	bl	800525c <puts>
}
 80006c8:	bf00      	nop
 80006ca:	3730      	adds	r7, #48	; 0x30
 80006cc:	46bd      	mov	sp, r7
 80006ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d2:	b004      	add	sp, #16
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	0800679c 	.word	0x0800679c
 80006dc:	20000044 	.word	0x20000044
 80006e0:	080067c0 	.word	0x080067c0
 80006e4:	080067d0 	.word	0x080067d0
 80006e8:	20000020 	.word	0x20000020
 80006ec:	08000171 	.word	0x08000171
 80006f0:	2000004c 	.word	0x2000004c
 80006f4:	080067e4 	.word	0x080067e4

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_MspInit+0x60>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_MspInit+0x60>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <HAL_SPI_MspInit+0x88>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d12f      	bne.n	80007e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 800078e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_SPI_MspInit+0x8c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <HAL_SPI_MspInit+0x90>)
 80007cc:	f003 fc80 	bl	80040d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_SPI_MspInit+0x90>)
 80007e4:	f003 fc74 	bl	80040d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013000 	.word	0x40013000
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <HAL_UART_MspInit+0x88>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d12f      	bne.n	800087c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_UART_MspInit+0x8c>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <HAL_UART_MspInit+0x8c>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	61d3      	str	r3, [r2, #28]
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <HAL_UART_MspInit+0x8c>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_UART_MspInit+0x8c>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <HAL_UART_MspInit+0x8c>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_UART_MspInit+0x8c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800084c:	2304      	movs	r3, #4
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <HAL_UART_MspInit+0x90>)
 8000860:	f003 fc36 	bl	80040d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000864:	2308      	movs	r3, #8
 8000866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_UART_MspInit+0x90>)
 8000878:	f003 fc2a 	bl	80040d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40004400 	.word	0x40004400
 8000888:	40021000 	.word	0x40021000
 800088c:	40010800 	.word	0x40010800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MilliTimer_Handler();
 80008d6:	f000 fd73 	bl	80013c0 <MilliTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f003 fad5 	bl	8003e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e00a      	b.n	800090a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f4:	f3af 8000 	nop.w
 80008f8:	4601      	mov	r1, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	60ba      	str	r2, [r7, #8]
 8000900:	b2ca      	uxtb	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf0      	blt.n	80008f4 <_read+0x12>
  }

  return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e009      	b.n	8000942 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	60ba      	str	r2, [r7, #8]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc78 	bl	800022c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	3301      	adds	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	429a      	cmp	r2, r3
 8000948:	dbf1      	blt.n	800092e <_write+0x12>
  }
  return len;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_close>:

int _close(int file)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	605a      	str	r2, [r3, #4]
  return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <_isatty>:

int _isatty(int file)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f004 fb74 	bl	80050d0 <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20005000 	.word	0x20005000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	200009ac 	.word	0x200009ac
 8000a1c:	200009f0 	.word	0x200009f0

08000a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <NewMessageData>:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/

#include "MQTTClient.h"

void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessgage) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	605a      	str	r2, [r3, #4]
    md->message = aMessgage;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <getNextPacketId>:


int getNextPacketId(Client *c) {
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d003      	beq.n	8000a6a <getNextPacketId+0x1c>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	e000      	b.n	8000a6c <getNextPacketId+0x1e>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <sendPacket>:


int sendPacket(Client* c, int length, Timer* timer)
{
 8000a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	617b      	str	r3, [r7, #20]
        sent = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]

    while (sent < length && !expired(timer))
 8000a94:	e018      	b.n	8000ac8 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, left_ms(timer));
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a9a:	689c      	ldr	r4, [r3, #8]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	18d6      	adds	r6, r2, r3
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 fcd3 	bl	8001454 <left_ms>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	4631      	mov	r1, r6
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	47a0      	blx	r4
 8000ab8:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0e      	blt.n	8000ade <sendPacket+0x60>
            break;
        sent += rc;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
    while (sent < length && !expired(timer))
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	da07      	bge.n	8000ae0 <sendPacket+0x62>
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 fc83 	bl	80013dc <expired>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0dc      	beq.n	8000a96 <sendPacket+0x18>
 8000adc:	e000      	b.n	8000ae0 <sendPacket+0x62>
            break;
 8000ade:	bf00      	nop
    }
    if (sent == length)
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d10b      	bne.n	8000b00 <sendPacket+0x82>
    {
        countdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have SUCCESSSfully sent the packet
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4610      	mov	r0, r2
 8000af6:	f000 fc97 	bl	8001428 <countdown>
        rc = SUCCESSS;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e002      	b.n	8000b06 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	617b      	str	r3, [r7, #20]
    return rc;
 8000b06:	697b      	ldr	r3, [r7, #20]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b10 <MQTTClient>:


void MQTTClient(Client* c, Network* network, unsigned int command_timeout_ms, unsigned char* buf, size_t buf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e009      	b.n	8000b3e <MQTTClient+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	ddf2      	ble.n	8000b2a <MQTTClient+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	605a      	str	r2, [r3, #4]
    c->buf = buf;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	611a      	str	r2, [r3, #16]
    c->buf_size = buf_size;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a3a      	ldr	r2, [r7, #32]
 8000b54:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5a:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b60:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	64da      	str	r2, [r3, #76]	; 0x4c
    InitTimer(&c->ping_timer);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3354      	adds	r3, #84	; 0x54
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fc7f 	bl	800147c <InitTimer>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <decodePacket>:


int decodePacket(Client* c, int* value, int timeout)
{
 8000b86:	b590      	push	{r4, r7, lr}
 8000b88:	b08b      	sub	sp, #44	; 0x2c
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	3301      	adds	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	6a3a      	ldr	r2, [r7, #32]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dd03      	ble.n	8000bc0 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	61bb      	str	r3, [r7, #24]
            goto exit;
 8000bbe:	e021      	b.n	8000c04 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bc4:	685c      	ldr	r4, [r3, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000bca:	f107 0117 	add.w	r1, r7, #23
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	47a0      	blx	r4
 8000bd4:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d112      	bne.n	8000c02 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000be8:	fb01 f303 	mul.w	r3, r1, r3
 8000bec:	441a      	add	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	01db      	lsls	r3, r3, #7
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dbd1      	blt.n	8000ba4 <decodePacket+0x1e>
exit:
 8000c00:	e000      	b.n	8000c04 <decodePacket+0x7e>
            goto exit;
 8000c02:	bf00      	nop
    return len;
 8000c04:	6a3b      	ldr	r3, [r7, #32]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	372c      	adds	r7, #44	; 0x2c
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}

08000c0e <readPacket>:


int readPacket(Client* c, Timer* timer)
{
 8000c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c10:	b089      	sub	sp, #36	; 0x24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
    int len = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, left_ms(timer)) != 1)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c2e:	685c      	ldr	r4, [r3, #4]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	695e      	ldr	r6, [r3, #20]
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f000 fc0b 	bl	8001454 <left_ms>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2201      	movs	r2, #1
 8000c42:	4631      	mov	r1, r6
 8000c44:	4628      	mov	r0, r5
 8000c46:	47a0      	blx	r4
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d13b      	bne.n	8000cc6 <readPacket+0xb8>
        goto exit;

    len = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, left_ms(timer));
 8000c52:	68b8      	ldr	r0, [r7, #8]
 8000c54:	f000 fbfe 	bl	8001454 <left_ms>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f7ff ff90 	bl	8000b86 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 ff5a 	bl	8001b2a <MQTTPacket_encode>
 8000c76:	4602      	mov	r2, r0
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, left_ms(timer)) != rem_len))
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd16      	ble.n	8000cb2 <readPacket+0xa4>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c88:	685c      	ldr	r4, [r3, #4]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	18d6      	adds	r6, r2, r3
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	f000 fbda 	bl	8001454 <left_ms>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	47a0      	blx	r4
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d10b      	bne.n	8000cca <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8000cba:	7d3b      	ldrb	r3, [r7, #20]
 8000cbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	e002      	b.n	8000ccc <readPacket+0xbe>
        goto exit;
 8000cc6:	bf00      	nop
 8000cc8:	e000      	b.n	8000ccc <readPacket+0xbe>
        goto exit;
 8000cca:	bf00      	nop
exit:
    return rc;
 8000ccc:	69fb      	ldr	r3, [r7, #28]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cd6 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8000cf6:	e039      	b.n	8000d6c <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b2f      	cmp	r3, #47	; 0x2f
 8000cfe:	d103      	bne.n	8000d08 <isTopicMatched+0x32>
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b2f      	cmp	r3, #47	; 0x2f
 8000d06:	d13a      	bne.n	8000d7e <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b2b      	cmp	r3, #43	; 0x2b
 8000d0e:	d009      	beq.n	8000d24 <isTopicMatched+0x4e>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b23      	cmp	r3, #35	; 0x23
 8000d16:	d005      	beq.n	8000d24 <isTopicMatched+0x4e>
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d12e      	bne.n	8000d82 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b2b      	cmp	r3, #43	; 0x2b
 8000d2a:	d112      	bne.n	8000d52 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8000d32:	e005      	b.n	8000d40 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d20b      	bcs.n	8000d60 <isTopicMatched+0x8a>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d4e:	d1f1      	bne.n	8000d34 <isTopicMatched+0x5e>
 8000d50:	e006      	b.n	8000d60 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b23      	cmp	r3, #35	; 0x23
 8000d58:	d102      	bne.n	8000d60 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
        curf++;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
        curn++;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d007      	beq.n	8000d84 <isTopicMatched+0xae>
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3bd      	bcc.n	8000cf8 <isTopicMatched+0x22>
 8000d7c:	e002      	b.n	8000d84 <isTopicMatched+0xae>
            break;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <isTopicMatched+0xae>
            break;
 8000d82:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d105      	bne.n	8000d98 <isTopicMatched+0xc2>
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <isTopicMatched+0xc2>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <isTopicMatched+0xc4>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <deliverMessage>:


int deliverMessage(Client* c, MQTTString* topicName, MQTTMessage* message)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b08a      	sub	sp, #40	; 0x28
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
 8000dbc:	e03f      	b.n	8000e3e <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d034      	beq.n	8000e38 <deliverMessage+0x92>
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f001 f86f 	bl	8001ec0 <MQTTPacket_equals>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10c      	bne.n	8000e02 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3304      	adds	r3, #4
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4413      	add	r3, r2
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff6d 	bl	8000cd6 <isTopicMatched>
 8000dfc:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01a      	beq.n	8000e38 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	3304      	adds	r3, #4
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d012      	beq.n	8000e38 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fe06 	bl	8000a2c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3304      	adds	r3, #4
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f107 0218 	add.w	r2, r7, #24
 8000e30:	4610      	mov	r0, r2
 8000e32:	4798      	blx	r3
                rc = SUCCESSS;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	ddbc      	ble.n	8000dbe <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d112      	bne.n	8000e72 <deliverMessage+0xcc>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00e      	beq.n	8000e72 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fde5 	bl	8000a2c <NewMessageData>
        c->defaultMessageHandler(&md);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f107 0210 	add.w	r2, r7, #16
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4798      	blx	r3
        rc = SUCCESSS;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8000e72:	6a3b      	ldr	r3, [r7, #32]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <keepalive>:


int keepalive(Client* c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	617b      	str	r3, [r7, #20]
    if (c->keepAliveInterval == 0)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
        goto exit;
 8000e96:	e033      	b.n	8000f00 <keepalive+0x84>
    }

    if (expired(&c->ping_timer))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3354      	adds	r3, #84	; 0x54
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fa9d 	bl	80013dc <expired>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02a      	beq.n	8000efe <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f1b      	ldrb	r3, [r3, #28]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d126      	bne.n	8000efe <keepalive+0x82>
        {
            Timer timer;
            InitTimer(&timer);
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fae1 	bl	800147c <InitTimer>
            countdown_ms(&timer, 1000);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa9e 	bl	8001404 <countdown_ms>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f000 fd5d 	bl	8001992 <MQTTSerialize_pingreq>
 8000ed8:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dd0f      	ble.n	8000f00 <keepalive+0x84>
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fdc8 	bl	8000a7e <sendPacket>
 8000eee:	6178      	str	r0, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <keepalive+0x84>
                c->ping_outstanding = 1;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	771a      	strb	r2, [r3, #28]
 8000efc:	e000      	b.n	8000f00 <keepalive+0x84>
        }
    }

exit:
 8000efe:	bf00      	nop
    return rc;
 8000f00:	697b      	ldr	r3, [r7, #20]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <cycle>:


int cycle(Client* c, Timer* timer)
{
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0e:	b095      	sub	sp, #84	; 0x54
 8000f10:	af06      	add	r7, sp, #24
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8000f16:	6839      	ldr	r1, [r7, #0]
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fe78 	bl	8000c0e <readPacket>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8000f22:	2300      	movs	r3, #0
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8000f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f2c:	3b02      	subs	r3, #2
 8000f2e:	2b0b      	cmp	r3, #11
 8000f30:	f200 80bc 	bhi.w	80010ac <cycle+0x1a0>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <cycle+0x30>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	080010ad 	.word	0x080010ad
 8000f40:	08000f6d 	.word	0x08000f6d
 8000f44:	080010ad 	.word	0x080010ad
 8000f48:	0800102d 	.word	0x0800102d
 8000f4c:	080010ad 	.word	0x080010ad
 8000f50:	080010ad 	.word	0x080010ad
 8000f54:	080010ad 	.word	0x080010ad
 8000f58:	080010ad 	.word	0x080010ad
 8000f5c:	080010ad 	.word	0x080010ad
 8000f60:	080010ad 	.word	0x080010ad
 8000f64:	080010ad 	.word	0x080010ad
 8000f68:	0800109f 	.word	0x0800109f
            break;
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            if (MQTTDeserialize_publish((unsigned char*)&msg.dup, (int*)&msg.qos, (unsigned char*)&msg.retained, (unsigned short*)&msg.id, &topicName,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish((unsigned char*)&msg.dup, (int*)&msg.qos, (unsigned char*)&msg.retained, (unsigned short*)&msg.id, &topicName,
 8000f74:	4616      	mov	r6, r2
 8000f76:	f107 0210 	add.w	r2, r7, #16
 8000f7a:	1d15      	adds	r5, r2, #4
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	1c54      	adds	r4, r2, #1
 8000f82:	f107 0110 	add.w	r1, r7, #16
 8000f86:	f107 0210 	add.w	r2, r7, #16
 8000f8a:	1c90      	adds	r0, r2, #2
 8000f8c:	9604      	str	r6, [sp, #16]
 8000f8e:	9303      	str	r3, [sp, #12]
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	330c      	adds	r3, #12
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	462b      	mov	r3, r5
 8000fa8:	4622      	mov	r2, r4
 8000faa:	f000 fd01 	bl	80019b0 <MQTTDeserialize_publish>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d17f      	bne.n	80010b4 <cycle+0x1a8>
                goto exit;
            deliverMessage(c, &topicName, &msg);
 8000fb4:	f107 0210 	add.w	r2, r7, #16
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fef1 	bl	8000da6 <deliverMessage>
            if (msg.qos != QOS0)
 8000fc4:	7c3b      	ldrb	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06d      	beq.n	80010a6 <cycle+0x19a>
            {
                if (msg.qos == QOS1)
 8000fca:	7c3b      	ldrb	r3, [r7, #16]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10c      	bne.n	8000fea <cycle+0xde>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6918      	ldr	r0, [r3, #16]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	8abb      	ldrh	r3, [r7, #20]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	f000 ffa4 	bl	8001f2e <MQTTSerialize_ack>
 8000fe6:	6378      	str	r0, [r7, #52]	; 0x34
 8000fe8:	e00e      	b.n	8001008 <cycle+0xfc>
                else if (msg.qos == QOS2)
 8000fea:	7c3b      	ldrb	r3, [r7, #16]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d10b      	bne.n	8001008 <cycle+0xfc>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6918      	ldr	r0, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	8abb      	ldrh	r3, [r7, #20]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2205      	movs	r2, #5
 8001002:	f000 ff94 	bl	8001f2e <MQTTSerialize_ack>
 8001006:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8001008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100a:	2b00      	cmp	r3, #0
 800100c:	dc03      	bgt.n	8001016 <cycle+0x10a>
                    rc = FAILURE;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
 8001014:	e005      	b.n	8001022 <cycle+0x116>
                   else
                       rc = sendPacket(c, len, timer);
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fd2f 	bl	8000a7e <sendPacket>
 8001020:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d13d      	bne.n	80010a6 <cycle+0x19a>
                    goto exit; // there was a problem
 800102a:	e044      	b.n	80010b6 <cycle+0x1aa>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	695c      	ldr	r4, [r3, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f107 020e 	add.w	r2, r7, #14
 8001038:	f107 010d 	add.w	r1, r7, #13
 800103c:	f107 000c 	add.w	r0, r7, #12
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4623      	mov	r3, r4
 8001044:	f000 fd26 	bl	8001a94 <MQTTDeserialize_ack>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d003      	beq.n	8001056 <cycle+0x14a>
                rc = FAILURE;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
 8001054:	e01e      	b.n	8001094 <cycle+0x188>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6918      	ldr	r0, [r3, #16]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4619      	mov	r1, r3
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2206      	movs	r2, #6
 8001068:	f000 ff61 	bl	8001f2e <MQTTSerialize_ack>
 800106c:	6378      	str	r0, [r7, #52]	; 0x34
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	2b00      	cmp	r3, #0
 8001072:	dc03      	bgt.n	800107c <cycle+0x170>
                rc = FAILURE;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
 800107a:	e00b      	b.n	8001094 <cycle+0x188>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fcfc 	bl	8000a7e <sendPacket>
 8001086:	6338      	str	r0, [r7, #48]	; 0x30
 8001088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <cycle+0x188>
                rc = FAILURE; // there was a problem
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109a:	d106      	bne.n	80010aa <cycle+0x19e>
                goto exit; // there was a problem
 800109c:	e00b      	b.n	80010b6 <cycle+0x1aa>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	771a      	strb	r2, [r3, #28]
            break;
 80010a4:	e002      	b.n	80010ac <cycle+0x1a0>
            break;
 80010a6:	bf00      	nop
 80010a8:	e000      	b.n	80010ac <cycle+0x1a0>
            break;
 80010aa:	bf00      	nop
    }
    keepalive(c);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fee5 	bl	8000e7c <keepalive>
 80010b2:	e000      	b.n	80010b6 <cycle+0x1aa>
                goto exit;
 80010b4:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 80010b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <cycle+0x1b4>
        rc = packet_type;
 80010bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	373c      	adds	r7, #60	; 0x3c
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	bf00      	nop

080010cc <MQTTYield>:


int MQTTYield(Client* c, int timeout_ms)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
    Timer timer;

    InitTimer(&timer);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f9cc 	bl	800147c <InitTimer>
    countdown_ms(&timer, timeout_ms);
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f989 	bl	8001404 <countdown_ms>
    while (!expired(&timer))
 80010f2:	e00d      	b.n	8001110 <MQTTYield+0x44>
    {
        if (cycle(c, &timer) == FAILURE)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff06 	bl	8000f0c <cycle>
 8001100:	4603      	mov	r3, r0
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001106:	d103      	bne.n	8001110 <MQTTYield+0x44>
        {
            rc = FAILURE;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	617b      	str	r3, [r7, #20]
            break;
 800110e:	e007      	b.n	8001120 <MQTTYield+0x54>
    while (!expired(&timer))
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f961 	bl	80013dc <expired>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0e9      	beq.n	80010f4 <MQTTYield+0x28>
        }
    }
    return rc;
 8001120:	697b      	ldr	r3, [r7, #20]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <waitfor>:


// only used in single-threaded mode where one command at a time is in process
int waitfor(Client* c, int packet_type, Timer* timer)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	617b      	str	r3, [r7, #20]

    do
    {
        if (expired(timer))
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f94d 	bl	80013dc <expired>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d109      	bne.n	800115c <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff fede 	bl	8000f0c <cycle>
 8001150:	6178      	str	r0, [r7, #20]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	429a      	cmp	r2, r3
 8001158:	d1f0      	bne.n	800113c <waitfor+0x12>
 800115a:	e000      	b.n	800115e <waitfor+0x34>
            break; // we timed out
 800115c:	bf00      	nop

    return rc;
 800115e:	697b      	ldr	r3, [r7, #20]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MQTTConnect>:


int MQTTConnect(Client* c, MQTTPacket_connectData* options)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b09e      	sub	sp, #120	; 0x78
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8001178:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <MQTTConnect+0x108>)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4611      	mov	r1, r2
 8001180:	2258      	movs	r2, #88	; 0x58
 8001182:	4618      	mov	r0, r3
 8001184:	f003 ffce 	bl	8005124 <memcpy>
    int len = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	673b      	str	r3, [r7, #112]	; 0x70

    InitTimer(&connect_timer);
 800118c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f973 	bl	800147c <InitTimer>
    countdown_ms(&connect_timer, c->command_timeout_ms);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f92f 	bl	8001404 <countdown_ms>

    if (c->isconnected) // don't send connect packet again if we are already connected
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d150      	bne.n	8001250 <MQTTConnect+0xe8>
        goto exit;

    if (options == 0)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <MQTTConnect+0x52>
        options = &default_options; // set default options if none were supplied
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	8b1b      	ldrh	r3, [r3, #24]
 80011be:	461a      	mov	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
    countdown(&c->ping_timer, c->keepAliveInterval);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f000 f929 	bl	8001428 <countdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6918      	ldr	r0, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f000 fa5d 	bl	80016a0 <MQTTSerialize_connect>
 80011e6:	6738      	str	r0, [r7, #112]	; 0x70
 80011e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd32      	ble.n	8001254 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 80011ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011f2:	461a      	mov	r2, r3
 80011f4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fc41 	bl	8000a7e <sendPacket>
 80011fc:	6778      	str	r0, [r7, #116]	; 0x74
 80011fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001200:	2b00      	cmp	r3, #0
 8001202:	d129      	bne.n	8001258 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8001204:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001208:	461a      	mov	r2, r3
 800120a:	2102      	movs	r1, #2
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff8c 	bl	800112a <waitfor>
 8001212:	4603      	mov	r3, r0
 8001214:	2b02      	cmp	r3, #2
 8001216:	d117      	bne.n	8001248 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	73fb      	strb	r3, [r7, #15]
        char sessionPresent = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack((unsigned char*)&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f107 010f 	add.w	r1, r7, #15
 800122c:	f107 000e 	add.w	r0, r7, #14
 8001230:	f000 fb22 	bl	8001878 <MQTTDeserialize_connack>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d102      	bne.n	8001240 <MQTTConnect+0xd8>
            rc = connack_rc;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	677b      	str	r3, [r7, #116]	; 0x74
 800123e:	e00c      	b.n	800125a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	677b      	str	r3, [r7, #116]	; 0x74
 8001246:	e008      	b.n	800125a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	677b      	str	r3, [r7, #116]	; 0x74
 800124e:	e004      	b.n	800125a <MQTTConnect+0xf2>
        goto exit;
 8001250:	bf00      	nop
 8001252:	e002      	b.n	800125a <MQTTConnect+0xf2>
        goto exit;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8001258:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800125a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <MQTTConnect+0xfe>
        c->isconnected = 1;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	621a      	str	r2, [r3, #32]
    return rc;
 8001266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8001268:	4618      	mov	r0, r3
 800126a:	3778      	adds	r7, #120	; 0x78
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08006808 	.word	0x08006808

08001274 <MQTTSubscribe>:


int MQTTSubscribe(Client* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af04      	add	r7, sp, #16
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	623b      	str	r3, [r7, #32]

    InitTimer(&timer);
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f8ea 	bl	800147c <InitTimer>
    countdown_ms(&timer, c->command_timeout_ms);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f8a6 	bl	8001404 <countdown_ms>

    if (!c->isconnected)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d074      	beq.n	80013aa <MQTTSubscribe+0x136>
        goto exit;

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	691c      	ldr	r4, [r3, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	461d      	mov	r5, r3
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff fbbf 	bl	8000a4e <getNextPacketId>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	2301      	movs	r3, #1
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	4613      	mov	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	4629      	mov	r1, r5
 80012e8:	4620      	mov	r0, r4
 80012ea:	f000 fe9c 	bl	8002026 <MQTTSerialize_subscribe>
 80012ee:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dd5b      	ble.n	80013ae <MQTTSubscribe+0x13a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80012f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fa:	461a      	mov	r2, r3
 80012fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff fbbd 	bl	8000a7e <sendPacket>
 8001304:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d152      	bne.n	80013b2 <MQTTSubscribe+0x13e>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	461a      	mov	r2, r3
 8001312:	2109      	movs	r1, #9
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff ff08 	bl	800112a <waitfor>
 800131a:	4603      	mov	r3, r0
 800131c:	2b09      	cmp	r3, #9
 800131e:	d140      	bne.n	80013a2 <MQTTSubscribe+0x12e>
    {
        int count = 0, grantedQoS = -1;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	68d2      	ldr	r2, [r2, #12]
 8001332:	4614      	mov	r4, r2
 8001334:	f107 0118 	add.w	r1, r7, #24
 8001338:	f107 021c 	add.w	r2, r7, #28
 800133c:	f107 0016 	add.w	r0, r7, #22
 8001340:	9401      	str	r4, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	460b      	mov	r3, r1
 8001346:	2101      	movs	r1, #1
 8001348:	f000 fee9 	bl	800211e <MQTTDeserialize_suback>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <MQTTSubscribe+0xe2>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001358:	2b80      	cmp	r3, #128	; 0x80
 800135a:	d02b      	beq.n	80013b4 <MQTTSubscribe+0x140>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800135c:	2300      	movs	r3, #0
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001360:	e01b      	b.n	800139a <MQTTSubscribe+0x126>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001366:	3304      	adds	r3, #4
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d110      	bne.n	8001394 <MQTTSubscribe+0x120>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001376:	3304      	adds	r3, #4
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001384:	3304      	adds	r3, #4
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	609a      	str	r2, [r3, #8]
                    rc = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8001392:	e00f      	b.n	80013b4 <MQTTSubscribe+0x140>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001396:	3301      	adds	r3, #1
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139c:	2b04      	cmp	r3, #4
 800139e:	dde0      	ble.n	8001362 <MQTTSubscribe+0xee>
 80013a0:	e008      	b.n	80013b4 <MQTTSubscribe+0x140>
                }
            }
        }
    }
    else
        rc = FAILURE;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a8:	e004      	b.n	80013b4 <MQTTSubscribe+0x140>
        goto exit;
 80013aa:	bf00      	nop
 80013ac:	e002      	b.n	80013b4 <MQTTSubscribe+0x140>
        goto exit;
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <MQTTSubscribe+0x140>
        goto exit;             // there was a problem
 80013b2:	bf00      	nop

exit:
    return rc;
 80013b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3740      	adds	r7, #64	; 0x40
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080013c0 <MilliTimer_Handler>:
#include "wizchip_conf.h"
#include "socket.h"

unsigned long MilliTimer;

void MilliTimer_Handler(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	MilliTimer++;
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <MilliTimer_Handler+0x18>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <MilliTimer_Handler+0x18>)
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200009b0 	.word	0x200009b0

080013dc <expired>:

char expired(Timer* timer) {
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <expired+0x24>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	0fdb      	lsrs	r3, r3, #31
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	200009b0 	.word	0x200009b0

08001404 <countdown_ms>:


void countdown_ms(Timer* timer, unsigned int timeout) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <countdown_ms+0x20>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	441a      	add	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200009b0 	.word	0x200009b0

08001428 <countdown>:


void countdown(Timer* timer, unsigned int timeout) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001438:	fb03 f202 	mul.w	r2, r3, r2
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <countdown+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	441a      	add	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200009b0 	.word	0x200009b0

08001454 <left_ms>:


int left_ms(Timer* timer) {
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <left_ms+0x24>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	200009b0 	.word	0x200009b0

0800147c <InitTimer>:


void InitTimer(Timer* timer) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <NewNetwork>:


void NewNetwork(Network* n) {
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	n->my_socket = 0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
	n->mqttread = w5500_read;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <NewNetwork+0x2c>)
 80014a6:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5500_write;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <NewNetwork+0x30>)
 80014ac:	609a      	str	r2, [r3, #8]
	n->disconnect = w5500_disconnect;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <NewNetwork+0x34>)
 80014b2:	60da      	str	r2, [r3, #12]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	080014cd 	.word	0x080014cd
 80014c4:	08001525 	.word	0x08001525
 80014c8:	0800156b 	.word	0x0800156b

080014cc <w5500_read>:

int w5500_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	3301      	adds	r3, #1
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fe7f 	bl	80021ec <WIZCHIP_READ>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b17      	cmp	r3, #23
 80014f2:	d113      	bne.n	800151c <w5500_read+0x50>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f81b 	bl	8002536 <getSn_RX_RSR>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00a      	beq.n	800151c <w5500_read+0x50>
		return recv(n->my_socket, buffer, len);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	b292      	uxth	r2, r2
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fce2 	bl	8002edc <recv>
 8001518:	4603      	mov	r3, r0
 800151a:	e7ff      	b.n	800151c <w5500_read+0x50>
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <w5500_write>:

int w5500_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	3301      	adds	r3, #1
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fe53 	bl	80021ec <WIZCHIP_READ>
 8001546:	4603      	mov	r3, r0
 8001548:	2b17      	cmp	r3, #23
 800154a:	d10a      	bne.n	8001562 <w5500_write+0x3e>
		return send(n->my_socket, buffer, len);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	b292      	uxth	r2, r2
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fbc5 	bl	8002ce8 <send>
 800155e:	4603      	mov	r3, r0
 8001560:	e7ff      	b.n	8001562 <w5500_write+0x3e>
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <w5500_disconnect>:

void w5500_disconnect(Network* n)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fb3f 	bl	8002bfc <disconnect>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* ip, int port)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
	uint16_t myport = 12345;
 8001592:	f243 0339 	movw	r3, #12345	; 0x3039
 8001596:	82fb      	strh	r3, [r7, #22]

		if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	8afa      	ldrh	r2, [r7, #22]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2101      	movs	r1, #1
 80015a4:	f001 f8ca 	bl	800273c <socket>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <ConnectNetwork+0x32>
			return SOCK_ERROR;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e00e      	b.n	80015d6 <ConnectNetwork+0x50>

		if(connect(n->my_socket, ip, port) != SOCK_OK)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	b292      	uxth	r2, r2
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fa3d 	bl	8002a44 <connect>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d001      	beq.n	80015d4 <ConnectNetwork+0x4e>
			return SOCK_ERROR;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <ConnectNetwork+0x50>

		return SOCK_OK;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	int len = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7a1b      	ldrb	r3, [r3, #8]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d102      	bne.n	80015f8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80015f2:	230c      	movs	r3, #12
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e005      	b.n	8001604 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7a1b      	ldrb	r3, [r3, #8]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d101      	bne.n	8001604 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8001600:	230a      	movs	r3, #10
 8001602:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	330c      	adds	r3, #12
 8001608:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800160c:	f000 fc3f 	bl	8001e8e <MQTTstrlen>
 8001610:	4603      	mov	r3, r0
 8001612:	3302      	adds	r3, #2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7edb      	ldrb	r3, [r3, #27]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d013      	beq.n	800164a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3324      	adds	r3, #36	; 0x24
 8001626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800162a:	f000 fc30 	bl	8001e8e <MQTTstrlen>
 800162e:	4603      	mov	r3, r0
 8001630:	1c9c      	adds	r4, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3330      	adds	r3, #48	; 0x30
 8001636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800163a:	f000 fc28 	bl	8001e8e <MQTTstrlen>
 800163e:	4603      	mov	r3, r0
 8001640:	4423      	add	r3, r4
 8001642:	3302      	adds	r3, #2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <MQTTSerialize_connectLength+0x7c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3340      	adds	r3, #64	; 0x40
 800165e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001662:	f000 fc14 	bl	8001e8e <MQTTstrlen>
 8001666:	4603      	mov	r3, r0
 8001668:	3302      	adds	r3, #2
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <MQTTSerialize_connectLength+0xa2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	334c      	adds	r3, #76	; 0x4c
 8001684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001688:	f000 fc01 	bl	8001e8e <MQTTstrlen>
 800168c:	4603      	mov	r3, r0
 800168e:	3302      	adds	r3, #2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
	int len = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff8b 	bl	80015de <MQTTSerialize_connectLength>
 80016c8:	6238      	str	r0, [r7, #32]
 80016ca:	6a38      	ldr	r0, [r7, #32]
 80016cc:	f000 fa98 	bl	8001c00 <MQTTPacket_len>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	da03      	bge.n	80016e0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80016d8:	f06f 0301 	mvn.w	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80016de:	e0c2      	b.n	8001866 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80016e4:	7e3b      	ldrb	r3, [r7, #24]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f362 1307 	bfi	r3, r2, #4, #4
 80016ec:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80016ee:	7e3a      	ldrb	r2, [r7, #24]
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fb0f 	bl	8001d1a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	6a39      	ldr	r1, [r7, #32]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fa12 	bl	8001b2a <MQTTPacket_encode>
 8001706:	4602      	mov	r2, r0
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7a1b      	ldrb	r3, [r3, #8]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d10c      	bne.n	8001730 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4955      	ldr	r1, [pc, #340]	; (8001870 <MQTTSerialize_connect+0x1d0>)
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fb38 	bl	8001d92 <writeCString>
		writeChar(&ptr, (char) 4);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	2104      	movs	r1, #4
 8001728:	4618      	mov	r0, r3
 800172a:	f000 faf6 	bl	8001d1a <writeChar>
 800172e:	e00b      	b.n	8001748 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	494f      	ldr	r1, [pc, #316]	; (8001874 <MQTTSerialize_connect+0x1d4>)
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fb2b 	bl	8001d92 <writeCString>
		writeChar(&ptr, (char) 3);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2103      	movs	r1, #3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fae9 	bl	8001d1a <writeChar>
	}

	flags.all = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e9b      	ldrb	r3, [r3, #26]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	7d3b      	ldrb	r3, [r7, #20]
 8001758:	f362 0341 	bfi	r3, r2, #1, #1
 800175c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7edb      	ldrb	r3, [r3, #27]
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2da      	uxtb	r2, r3
 800176c:	7d3b      	ldrb	r3, [r7, #20]
 800176e:	f362 0382 	bfi	r3, r2, #2, #1
 8001772:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8001774:	7d3b      	ldrb	r3, [r7, #20]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	b2da      	uxtb	r2, r3
 800178c:	7d3b      	ldrb	r3, [r7, #20]
 800178e:	f362 03c4 	bfi	r3, r2, #3, #2
 8001792:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	7d3b      	ldrb	r3, [r7, #20]
 80017a2:	f362 1345 	bfi	r3, r2, #5, #1
 80017a6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <MQTTSerialize_connect+0x118>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80017b8:	7d3b      	ldrb	r3, [r7, #20]
 80017ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017be:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <MQTTSerialize_connect+0x130>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80017d0:	7d3b      	ldrb	r3, [r7, #20]
 80017d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d6:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80017d8:	7d3a      	ldrb	r2, [r7, #20]
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa9a 	bl	8001d1a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	8b1b      	ldrh	r3, [r3, #24]
 80017ea:	461a      	mov	r2, r3
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 faa5 	bl	8001d42 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f107 001c 	add.w	r0, r7, #28
 80017fe:	330c      	adds	r3, #12
 8001800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001802:	f000 fae5 	bl	8001dd0 <writeMQTTString>
	if (options->willFlag)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7edb      	ldrb	r3, [r3, #27]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f107 001c 	add.w	r0, r7, #28
 8001814:	3324      	adds	r3, #36	; 0x24
 8001816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001818:	f000 fada 	bl	8001dd0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f107 001c 	add.w	r0, r7, #28
 8001822:	3330      	adds	r3, #48	; 0x30
 8001824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001826:	f000 fad3 	bl	8001dd0 <writeMQTTString>
	}
	if (flags.bits.username)
 800182a:	7d3b      	ldrb	r3, [r7, #20]
 800182c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f107 001c 	add.w	r0, r7, #28
 800183c:	3340      	adds	r3, #64	; 0x40
 800183e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001840:	f000 fac6 	bl	8001dd0 <writeMQTTString>
	if (flags.bits.password)
 8001844:	7d3b      	ldrb	r3, [r7, #20]
 8001846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f107 001c 	add.w	r0, r7, #28
 8001856:	334c      	adds	r3, #76	; 0x4c
 8001858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185a:	f000 fab9 	bl	8001dd0 <writeMQTTString>

	rc = ptr - buf;
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001868:	4618      	mov	r0, r3
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	08006860 	.word	0x08006860
 8001874:	08006868 	.word	0x08006868

08001878 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fa28 	bl	8001cf4 <readChar>
 80018a4:	4603      	mov	r3, r0
 80018a6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80018a8:	7f3b      	ldrb	r3, [r7, #28]
 80018aa:	f023 030f 	bic.w	r3, r3, #15
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d12e      	bne.n	8001912 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f107 0214 	add.w	r2, r7, #20
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f9e9 	bl	8001c94 <MQTTPacket_decodeBuf>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4413      	add	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4413      	add	r3, r2
 80018d2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	dd1b      	ble.n	8001916 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fa06 	bl	8001cf4 <readChar>
 80018e8:	4603      	mov	r3, r0
 80018ea:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 80018ec:	7c3b      	ldrb	r3, [r7, #16]
 80018ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9f8 	bl	8001cf4 <readChar>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	e002      	b.n	8001918 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001912:	bf00      	nop
 8001914:	e000      	b.n	8001918 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001916:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800191a:	4618      	mov	r0, r3
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	4613      	mov	r3, r2
 800192e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	dc03      	bgt.n	800194c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001944:	f06f 0301 	mvn.w	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
		goto exit;
 800194a:	e01d      	b.n	8001988 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	b2da      	uxtb	r2, r3
 8001958:	7e3b      	ldrb	r3, [r7, #24]
 800195a:	f362 1307 	bfi	r3, r2, #4, #4
 800195e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001960:	7e3a      	ldrb	r2, [r7, #24]
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f9d6 	bl	8001d1a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f8d9 	bl	8001b2a <MQTTPacket_encode>
 8001978:	4602      	mov	r2, r0
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001988:	69fb      	ldr	r3, [r7, #28]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800199c:	220c      	movs	r2, #12
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffbe 	bl	8001922 <MQTTSerialize_zero>
 80019a6:	4603      	mov	r3, r0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80019c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f98c 	bl	8001cf4 <readChar>
 80019dc:	4603      	mov	r3, r0
 80019de:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 80019e0:	7f3b      	ldrb	r3, [r7, #28]
 80019e2:	f023 030f 	bic.w	r3, r3, #15
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b30      	cmp	r3, #48	; 0x30
 80019ea:	d14b      	bne.n	8001a84 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80019ec:	7f3b      	ldrb	r3, [r7, #28]
 80019ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80019fa:	7f3b      	ldrb	r3, [r7, #28]
 80019fc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001a08:	7f3b      	ldrb	r3, [r7, #28]
 8001a0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f107 0214 	add.w	r2, r7, #20
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f938 	bl	8001c94 <MQTTPacket_decodeBuf>
 8001a24:	6278      	str	r0, [r7, #36]	; 0x24
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8001a36:	f107 0318 	add.w	r3, r7, #24
 8001a3a:	6a3a      	ldr	r2, [r7, #32]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a40:	f000 f9f4 	bl	8001e2c <readMQTTLenString>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01e      	beq.n	8001a88 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db19      	blt.n	8001a88 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dd08      	ble.n	8001a6e <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8001a5c:	f107 0318 	add.w	r3, r7, #24
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f92d 	bl	8001cc0 <readInt>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6a3a      	ldr	r2, [r7, #32]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a76:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	601a      	str	r2, [r3, #0]
	rc = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e002      	b.n	8001a8a <MQTTDeserialize_publish+0xda>
		goto exit;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <MQTTDeserialize_publish+0xda>
		goto exit;
 8001a88:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f91c 	bl	8001cf4 <readChar>
 8001abc:	4603      	mov	r3, r0
 8001abe:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8001ac0:	7f3b      	ldrb	r3, [r7, #28]
 8001ac2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f107 0214 	add.w	r2, r7, #20
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f8d5 	bl	8001c94 <MQTTPacket_decodeBuf>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4413      	add	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4413      	add	r3, r2
 8001afa:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6a3a      	ldr	r2, [r7, #32]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	dd0b      	ble.n	8001b1e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f8d8 	bl	8001cc0 <readInt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e000      	b.n	8001b20 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8001b1e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	425a      	negs	r2, r3
 8001b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b44:	bf58      	it	pl
 8001b46:	4253      	negpl	r3, r2
 8001b48:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da00      	bge.n	8001b52 <MQTTPacket_encode+0x28>
 8001b50:	337f      	adds	r3, #127	; 0x7f
 8001b52:	11db      	asrs	r3, r3, #7
 8001b54:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	dd03      	ble.n	8001b64 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b62:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60fa      	str	r2, [r7, #12]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7afa      	ldrb	r2, [r7, #11]
 8001b72:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	dcde      	bgt.n	8001b38 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	dd03      	ble.n	8001bb8 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001bb6:	e01d      	b.n	8001bf4 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8001bb8:	f107 020b 	add.w	r2, r7, #11
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4798      	blx	r3
 8001bc4:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d112      	bne.n	8001bf2 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	441a      	add	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	01db      	lsls	r3, r3, #7
 8001be6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dbd6      	blt.n	8001b9e <MQTTPacket_decode+0x18>
exit:
 8001bf0:	e000      	b.n	8001bf4 <MQTTPacket_decode+0x6e>
			goto exit;
 8001bf2:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001bf4:	693b      	ldr	r3, [r7, #16]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b7f      	cmp	r3, #127	; 0x7f
 8001c12:	dc03      	bgt.n	8001c1c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	e012      	b.n	8001c42 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c22:	da03      	bge.n	8001c2c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3302      	adds	r3, #2
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	e00a      	b.n	8001c42 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <MQTTPacket_len+0x50>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	dc03      	bgt.n	8001c3c <MQTTPacket_len+0x3c>
		rem_len += 3;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3303      	adds	r3, #3
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	e002      	b.n	8001c42 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	607b      	str	r3, [r7, #4]
	return rem_len;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	001ffffe 	.word	0x001ffffe

08001c54 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e00a      	b.n	8001c7a <bufchar+0x26>
		*c = *bufptr++;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <bufchar+0x3c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4909      	ldr	r1, [pc, #36]	; (8001c90 <bufchar+0x3c>)
 8001c6c:	600a      	str	r2, [r1, #0]
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbf0      	blt.n	8001c64 <bufchar+0x10>
	return count;
 8001c82:	683b      	ldr	r3, [r7, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200009b4 	.word	0x200009b4

08001c94 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <MQTTPacket_decodeBuf+0x24>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MQTTPacket_decodeBuf+0x28>)
 8001ca8:	f7ff ff6d 	bl	8001b86 <MQTTPacket_decode>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200009b4 	.word	0x200009b4
 8001cbc:	08001c55 	.word	0x08001c55

08001cc0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	3201      	adds	r2, #1
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	1c9a      	adds	r2, r3, #2
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
	return len;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
	return c;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	da00      	bge.n	8001d54 <writeInt+0x12>
 8001d52:	33ff      	adds	r3, #255	; 0xff
 8001d54:	121b      	asrs	r3, r3, #8
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	bf58      	it	pl
 8001d74:	4253      	negpl	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f7fe f9df 	bl	8000160 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8001da6:	68f9      	ldr	r1, [r7, #12]
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffca 	bl	8001d42 <writeInt>
	memcpy(*pptr, string, len);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 f9b4 	bl	8005124 <memcpy>
	*pptr += len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4638      	mov	r0, r7
 8001dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	dd12      	ble.n	8001e0a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4619      	mov	r1, r3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ffaa 	bl	8001d42 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 f994 	bl	8005124 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	441a      	add	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001e08:	e00c      	b.n	8001e24 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff ffbc 	bl	8001d92 <writeCString>
}
 8001e1a:	e003      	b.n	8001e24 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff ff8f 	bl	8001d42 <writeInt>
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	dd1a      	ble.n	8001e7e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8001e48:	68b8      	ldr	r0, [r7, #8]
 8001e4a:	f7ff ff39 	bl	8001cc0 <readInt>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	6852      	ldr	r2, [r2, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d30c      	bcc.n	8001e7e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	6852      	ldr	r2, [r2, #4]
 8001e74:	441a      	add	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	601a      	str	r2, [r3, #0]
			rc = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8001e84:	697b      	ldr	r3, [r7, #20]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe f95a 	bl	8000160 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e001      	b.n	8001eb6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	617b      	str	r3, [r7, #20]
	return rc;
 8001eb6:	697b      	ldr	r3, [r7, #20]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
		blen = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe f93b 	bl	8000160 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e005      	b.n	8001efc <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	f7fe f92f 	bl	8000160 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d10a      	bne.n	8001f24 <MQTTPacket_equals+0x64>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	461a      	mov	r2, r3
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	6938      	ldr	r0, [r7, #16]
 8001f16:	f003 f9fd 	bl	8005314 <strncmp>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <MQTTPacket_equals+0x64>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <MQTTPacket_equals+0x66>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b088      	sub	sp, #32
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	dc03      	bgt.n	8001f5e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001f56:	f06f 0301 	mvn.w	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001f5c:	e037      	b.n	8001fce <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	7e3b      	ldrb	r3, [r7, #24]
 8001f68:	f362 1307 	bfi	r3, r2, #4, #4
 8001f6c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8001f6e:	79bb      	ldrb	r3, [r7, #6]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	7e3b      	ldrb	r3, [r7, #24]
 8001f78:	f362 03c3 	bfi	r3, r2, #3, #1
 8001f7c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	7e3b      	ldrb	r3, [r7, #24]
 8001f92:	f362 0342 	bfi	r3, r2, #1, #2
 8001f96:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001f98:	7e3a      	ldrb	r2, [r7, #24]
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff feba 	bl	8001d1a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fdbd 	bl	8001b2a <MQTTPacket_encode>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8001fb8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff febe 	bl	8001d42 <writeInt>
	rc = ptr - buf;
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001fce:	69fb      	ldr	r3, [r7, #28]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e013      	b.n	8002014 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002000:	f7ff ff45 	bl	8001e8e <MQTTstrlen>
 8002004:	4603      	mov	r3, r0
 8002006:	3303      	adds	r3, #3
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbe7      	blt.n	8001fec <MQTTSerialize_subscribeLength+0x14>
	return len;
 800201c:	68bb      	ldr	r3, [r7, #8]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b08a      	sub	sp, #40	; 0x28
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	4611      	mov	r1, r2
 8002032:	461a      	mov	r2, r3
 8002034:	460b      	mov	r3, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8002050:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002054:	f7ff ffc0 	bl	8001fd8 <MQTTSerialize_subscribeLength>
 8002058:	61f8      	str	r0, [r7, #28]
 800205a:	69f8      	ldr	r0, [r7, #28]
 800205c:	f7ff fdd0 	bl	8001c00 <MQTTPacket_len>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4293      	cmp	r3, r2
 8002066:	da03      	bge.n	8002070 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8002068:	f06f 0301 	mvn.w	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800206e:	e051      	b.n	8002114 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8002074:	7d3b      	ldrb	r3, [r7, #20]
 8002076:	2208      	movs	r2, #8
 8002078:	f362 1307 	bfi	r3, r2, #4, #4
 800207c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	7d3b      	ldrb	r3, [r7, #20]
 8002088:	f362 03c3 	bfi	r3, r2, #3, #1
 800208c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800208e:	7d3b      	ldrb	r3, [r7, #20]
 8002090:	2201      	movs	r2, #1
 8002092:	f362 0342 	bfi	r3, r2, #1, #2
 8002096:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8002098:	7d3a      	ldrb	r2, [r7, #20]
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe3a 	bl	8001d1a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	69f9      	ldr	r1, [r7, #28]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fd3d 	bl	8001b2a <MQTTPacket_encode>
 80020b0:	4602      	mov	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4413      	add	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 80020b8:	88ba      	ldrh	r2, [r7, #4]
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fe3e 	bl	8001d42 <writeInt>

	for (i = 0; i < count; ++i)
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	e01b      	b.n	8002104 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	461a      	mov	r2, r3
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	4413      	add	r3, r2
 80020dc:	f107 0018 	add.w	r0, r7, #24
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	f7ff fe75 	bl	8001dd0 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ec:	4413      	add	r3, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fe0e 	bl	8001d1a <writeChar>
	for (i = 0; i < count; ++i)
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	3301      	adds	r3, #1
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	429a      	cmp	r2, r3
 800210a:	dbdf      	blt.n	80020cc <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002116:	4618      	mov	r0, r3
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b08a      	sub	sp, #40	; 0x28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fdd7 	bl	8001cf4 <readChar>
 8002146:	4603      	mov	r3, r0
 8002148:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800214a:	7f3b      	ldrb	r3, [r7, #28]
 800214c:	f023 030f 	bic.w	r3, r3, #15
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b90      	cmp	r3, #144	; 0x90
 8002154:	d142      	bne.n	80021dc <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f107 0214 	add.w	r2, r7, #20
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fd98 	bl	8001c94 <MQTTPacket_decodeBuf>
 8002164:	6278      	str	r0, [r7, #36]	; 0x24
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4413      	add	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4413      	add	r3, r2
 8002174:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	dd2f      	ble.n	80021e0 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fd9b 	bl	8001cc0 <readInt>
 800218a:	4603      	mov	r3, r0
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8002198:	e019      	b.n	80021ce <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	da03      	bge.n	80021ac <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 80021aa:	e01a      	b.n	80021e2 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd9f 	bl	8001cf4 <readChar>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4618      	mov	r0, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6011      	str	r1, [r2, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	4602      	mov	r2, r0
 80021cc:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d8e1      	bhi.n	800219a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	e002      	b.n	80021e2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 80021e0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <WIZCHIP_READ+0x94>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <WIZCHIP_READ+0x94>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <WIZCHIP_READ+0x94>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <WIZCHIP_READ+0x24>
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <WIZCHIP_READ+0x94>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	d114      	bne.n	800223a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <WIZCHIP_READ+0x94>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	0c12      	lsrs	r2, r2, #16
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	4610      	mov	r0, r2
 800221c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <WIZCHIP_READ+0x94>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	0a12      	lsrs	r2, r2, #8
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	4610      	mov	r0, r2
 800222a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <WIZCHIP_READ+0x94>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4610      	mov	r0, r2
 8002236:	4798      	blx	r3
 8002238:	e011      	b.n	800225e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	b2db      	uxtb	r3, r3
 8002240:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	b2db      	uxtb	r3, r3
 8002248:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <WIZCHIP_READ+0x94>)
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	f107 020c 	add.w	r2, r7, #12
 8002258:	2103      	movs	r1, #3
 800225a:	4610      	mov	r0, r2
 800225c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <WIZCHIP_READ+0x94>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4798      	blx	r3
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <WIZCHIP_READ+0x94>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <WIZCHIP_READ+0x94>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	4798      	blx	r3
   return ret;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000058 	.word	0x20000058

08002284 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <WIZCHIP_WRITE+0x98>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <WIZCHIP_WRITE+0x98>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <WIZCHIP_WRITE+0x98>)
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d119      	bne.n	80022e0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <WIZCHIP_WRITE+0x98>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	0c12      	lsrs	r2, r2, #16
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4610      	mov	r0, r2
 80022b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <WIZCHIP_WRITE+0x98>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	0a12      	lsrs	r2, r2, #8
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <WIZCHIP_WRITE+0x98>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	4610      	mov	r0, r2
 80022d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <WIZCHIP_WRITE+0x98>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	4610      	mov	r0, r2
 80022dc:	4798      	blx	r3
 80022de:	e013      	b.n	8002308 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <WIZCHIP_WRITE+0x98>)
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	2104      	movs	r1, #4
 8002304:	4610      	mov	r0, r2
 8002306:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <WIZCHIP_WRITE+0x98>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800230e:	4b03      	ldr	r3, [pc, #12]	; (800231c <WIZCHIP_WRITE+0x98>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4798      	blx	r3
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000058 	.word	0x20000058

08002320 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <WIZCHIP_READ_BUF+0x2a>
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d126      	bne.n	8002398 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	0c12      	lsrs	r2, r2, #16
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	4610      	mov	r0, r2
 8002356:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	0a12      	lsrs	r2, r2, #8
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4610      	mov	r0, r2
 8002364:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	4610      	mov	r0, r2
 8002370:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	82fb      	strh	r3, [r7, #22]
 8002376:	e00a      	b.n	800238e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	8afa      	ldrh	r2, [r7, #22]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	188c      	adds	r4, r1, r2
 8002382:	4798      	blx	r3
 8002384:	4603      	mov	r3, r0
 8002386:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002388:	8afb      	ldrh	r3, [r7, #22]
 800238a:	3301      	adds	r3, #1
 800238c:	82fb      	strh	r3, [r7, #22]
 800238e:	8afa      	ldrh	r2, [r7, #22]
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3f0      	bcc.n	8002378 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002396:	e017      	b.n	80023c8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	b2db      	uxtb	r3, r3
 800239e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f107 0210 	add.w	r2, r7, #16
 80023b6:	2103      	movs	r1, #3
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	4611      	mov	r1, r2
 80023c4:	68b8      	ldr	r0, [r7, #8]
 80023c6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80023ce:	4b03      	ldr	r3, [pc, #12]	; (80023dc <WIZCHIP_READ_BUF+0xbc>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4798      	blx	r3
}
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	20000058 	.word	0x20000058

080023e0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d126      	bne.n	8002458 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	0c12      	lsrs	r2, r2, #16
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	4610      	mov	r0, r2
 8002416:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002418:	4b20      	ldr	r3, [pc, #128]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	0a12      	lsrs	r2, r2, #8
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4610      	mov	r0, r2
 8002424:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	4610      	mov	r0, r2
 8002430:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002432:	2300      	movs	r3, #0
 8002434:	82fb      	strh	r3, [r7, #22]
 8002436:	e00a      	b.n	800244e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	8afa      	ldrh	r2, [r7, #22]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	440a      	add	r2, r1
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	4610      	mov	r0, r2
 8002446:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	3301      	adds	r3, #1
 800244c:	82fb      	strh	r3, [r7, #22]
 800244e:	8afa      	ldrh	r2, [r7, #22]
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	429a      	cmp	r2, r3
 8002454:	d3f0      	bcc.n	8002438 <WIZCHIP_WRITE_BUF+0x58>
 8002456:	e017      	b.n	8002488 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	b2db      	uxtb	r3, r3
 800245e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b2db      	uxtb	r3, r3
 8002466:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	f107 0210 	add.w	r2, r7, #16
 8002476:	2103      	movs	r1, #3
 8002478:	4610      	mov	r0, r2
 800247a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	4611      	mov	r1, r2
 8002484:	68b8      	ldr	r0, [r7, #8]
 8002486:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800248e:	4b03      	ldr	r3, [pc, #12]	; (800249c <WIZCHIP_WRITE_BUF+0xbc>)
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4798      	blx	r3
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000058 	.word	0x20000058

080024a0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	81fb      	strh	r3, [r7, #14]
 80024ae:	2300      	movs	r3, #0
 80024b0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	3301      	adds	r3, #1
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fe94 	bl	80021ec <WIZCHIP_READ>
 80024c4:	4603      	mov	r3, r0
 80024c6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80024c8:	89bb      	ldrh	r3, [r7, #12]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b29c      	uxth	r4, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3301      	adds	r3, #1
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe86 	bl	80021ec <WIZCHIP_READ>
 80024e0:	4603      	mov	r3, r0
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4423      	add	r3, r4
 80024e6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80024e8:	89bb      	ldrh	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01a      	beq.n	8002524 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	3301      	adds	r3, #1
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe76 	bl	80021ec <WIZCHIP_READ>
 8002500:	4603      	mov	r3, r0
 8002502:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	b29c      	uxth	r4, r3
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	3301      	adds	r3, #1
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fe68 	bl	80021ec <WIZCHIP_READ>
 800251c:	4603      	mov	r3, r0
 800251e:	b29b      	uxth	r3, r3
 8002520:	4423      	add	r3, r4
 8002522:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002524:	89fa      	ldrh	r2, [r7, #14]
 8002526:	89bb      	ldrh	r3, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d1c2      	bne.n	80024b2 <getSn_TX_FSR+0x12>
   return val;
 800252c:	89fb      	ldrh	r3, [r7, #14]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}

08002536 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002536:	b590      	push	{r4, r7, lr}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002540:	2300      	movs	r3, #0
 8002542:	81fb      	strh	r3, [r7, #14]
 8002544:	2300      	movs	r3, #0
 8002546:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	3301      	adds	r3, #1
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fe49 	bl	80021ec <WIZCHIP_READ>
 800255a:	4603      	mov	r3, r0
 800255c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800255e:	89bb      	ldrh	r3, [r7, #12]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b29c      	uxth	r4, r3
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	3301      	adds	r3, #1
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe3b 	bl	80021ec <WIZCHIP_READ>
 8002576:	4603      	mov	r3, r0
 8002578:	b29b      	uxth	r3, r3
 800257a:	4423      	add	r3, r4
 800257c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800257e:	89bb      	ldrh	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01a      	beq.n	80025ba <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	3301      	adds	r3, #1
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fe2b 	bl	80021ec <WIZCHIP_READ>
 8002596:	4603      	mov	r3, r0
 8002598:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	b29c      	uxth	r4, r3
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	3301      	adds	r3, #1
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fe1d 	bl	80021ec <WIZCHIP_READ>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4423      	add	r3, r4
 80025b8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80025ba:	89fa      	ldrh	r2, [r7, #14]
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d1c2      	bne.n	8002548 <getSn_RX_RSR+0x12>
   return val;
 80025c2:	89fb      	ldrh	r3, [r7, #14]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	4613      	mov	r3, r2
 80025da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80025e4:	88bb      	ldrh	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d048      	beq.n	800267c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	3301      	adds	r3, #1
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fdf8 	bl	80021ec <WIZCHIP_READ>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29b      	uxth	r3, r3
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b29c      	uxth	r4, r3
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3301      	adds	r3, #1
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fdeb 	bl	80021ec <WIZCHIP_READ>
 8002616:	4603      	mov	r3, r0
 8002618:	b29b      	uxth	r3, r3
 800261a:	4423      	add	r3, r4
 800261c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	79fa      	ldrb	r2, [r7, #7]
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	3202      	adds	r2, #2
 8002628:	00d2      	lsls	r2, r2, #3
 800262a:	4413      	add	r3, r2
 800262c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800262e:	88bb      	ldrh	r3, [r7, #4]
 8002630:	461a      	mov	r2, r3
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f7ff fed3 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800263a:	89fa      	ldrh	r2, [r7, #14]
 800263c:	88bb      	ldrh	r3, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	3301      	adds	r3, #1
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800264e:	461a      	mov	r2, r3
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b29b      	uxth	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f7ff fe12 	bl	8002284 <WIZCHIP_WRITE>
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	3301      	adds	r3, #1
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800266c:	461a      	mov	r2, r3
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7ff fe05 	bl	8002284 <WIZCHIP_WRITE>
 800267a:	e000      	b.n	800267e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800267c:	bf00      	nop
}
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}

08002684 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d048      	beq.n	8002734 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	3301      	adds	r3, #1
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fd9c 	bl	80021ec <WIZCHIP_READ>
 80026b4:	4603      	mov	r3, r0
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b29c      	uxth	r4, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	3301      	adds	r3, #1
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fd8f 	bl	80021ec <WIZCHIP_READ>
 80026ce:	4603      	mov	r3, r0
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4423      	add	r3, r4
 80026d4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	79fa      	ldrb	r2, [r7, #7]
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	3203      	adds	r2, #3
 80026e0:	00d2      	lsls	r2, r2, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80026e6:	88bb      	ldrh	r3, [r7, #4]
 80026e8:	461a      	mov	r2, r3
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	68b8      	ldr	r0, [r7, #8]
 80026ee:	f7ff fe17 	bl	8002320 <WIZCHIP_READ_BUF>
   ptr += len;
 80026f2:	89fa      	ldrh	r2, [r7, #14]
 80026f4:	88bb      	ldrh	r3, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	3301      	adds	r3, #1
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002706:	461a      	mov	r2, r3
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29b      	uxth	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f7ff fdb6 	bl	8002284 <WIZCHIP_WRITE>
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	3301      	adds	r3, #1
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002724:	461a      	mov	r2, r3
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7ff fda9 	bl	8002284 <WIZCHIP_WRITE>
 8002732:	e000      	b.n	8002736 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002734:	bf00      	nop
}
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}

0800273c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	4604      	mov	r4, r0
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4623      	mov	r3, r4
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	4603      	mov	r3, r0
 8002750:	71bb      	strb	r3, [r7, #6]
 8002752:	460b      	mov	r3, r1
 8002754:	80bb      	strh	r3, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d902      	bls.n	8002766 <socket+0x2a>
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	e0f2      	b.n	800294c <socket+0x210>
	switch(protocol)
 8002766:	79bb      	ldrb	r3, [r7, #6]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d005      	beq.n	8002778 <socket+0x3c>
 800276c:	2b00      	cmp	r3, #0
 800276e:	dd11      	ble.n	8002794 <socket+0x58>
 8002770:	3b02      	subs	r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d80e      	bhi.n	8002794 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002776:	e011      	b.n	800279c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	2204      	movs	r2, #4
 800277e:	4619      	mov	r1, r3
 8002780:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002784:	f7ff fdcc 	bl	8002320 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <socket+0x5e>
 800278e:	f06f 0302 	mvn.w	r3, #2
 8002792:	e0db      	b.n	800294c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002794:	f06f 0304 	mvn.w	r3, #4
 8002798:	e0d8      	b.n	800294c <socket+0x210>
	    break;
 800279a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <socket+0x70>
 80027a6:	f06f 0305 	mvn.w	r3, #5
 80027aa:	e0cf      	b.n	800294c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d025      	beq.n	80027fe <socket+0xc2>
	{
   	switch(protocol)
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d002      	beq.n	80027be <socket+0x82>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d008      	beq.n	80027ce <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80027bc:	e024      	b.n	8002808 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d11c      	bne.n	8002802 <socket+0xc6>
 80027c8:	f06f 0305 	mvn.w	r3, #5
 80027cc:	e0be      	b.n	800294c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80027d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db02      	blt.n	80027e6 <socket+0xaa>
 80027e0:	f06f 0305 	mvn.w	r3, #5
 80027e4:	e0b2      	b.n	800294c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80027f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db06      	blt.n	8002806 <socket+0xca>
 80027f8:	f06f 0305 	mvn.w	r3, #5
 80027fc:	e0a6      	b.n	800294c <socket+0x210>
   	}
   }
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <socket+0xcc>
   	      break;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <socket+0xcc>
   	      break;
 8002806:	bf00      	nop
	close(sn);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f8ac 	bl	8002968 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3301      	adds	r3, #1
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4618      	mov	r0, r3
 800281a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281e:	f023 030f 	bic.w	r3, r3, #15
 8002822:	b25a      	sxtb	r2, r3
 8002824:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002828:	4313      	orrs	r3, r2
 800282a:	b25b      	sxtb	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4619      	mov	r1, r3
 8002830:	f7ff fd28 	bl	8002284 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002834:	88bb      	ldrh	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d110      	bne.n	800285c <socket+0x120>
	{
	   port = sock_any_port++;
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <socket+0x218>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	b291      	uxth	r1, r2
 8002842:	4a44      	ldr	r2, [pc, #272]	; (8002954 <socket+0x218>)
 8002844:	8011      	strh	r1, [r2, #0]
 8002846:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002848:	4b42      	ldr	r3, [pc, #264]	; (8002954 <socket+0x218>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002850:	4293      	cmp	r3, r2
 8002852:	d103      	bne.n	800285c <socket+0x120>
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <socket+0x218>)
 8002856:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800285a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3301      	adds	r3, #1
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002868:	461a      	mov	r2, r3
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29b      	uxth	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f7ff fd05 	bl	8002284 <WIZCHIP_WRITE>
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3301      	adds	r3, #1
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff fcf8 	bl	8002284 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	3301      	adds	r3, #1
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fcee 	bl	8002284 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80028a8:	bf00      	nop
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3301      	adds	r3, #1
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fc98 	bl	80021ec <WIZCHIP_READ>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f3      	bne.n	80028aa <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2201      	movs	r2, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <socket+0x21c>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	4013      	ands	r3, r2
 80028d8:	b21b      	sxth	r3, r3
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <socket+0x21c>)
 80028de:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	b21a      	sxth	r2, r3
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <socket+0x21c>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <socket+0x21c>)
 80028fc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2201      	movs	r2, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	b21b      	sxth	r3, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	b21a      	sxth	r2, r3
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <socket+0x220>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b21b      	sxth	r3, r3
 8002912:	4013      	ands	r3, r2
 8002914:	b21b      	sxth	r3, r3
 8002916:	b29a      	uxth	r2, r3
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <socket+0x220>)
 800291a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <socket+0x224>)
 8002920:	2100      	movs	r1, #0
 8002922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <socket+0x228>)
 800292a:	2100      	movs	r1, #0
 800292c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800292e:	bf00      	nop
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3301      	adds	r3, #1
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fc55 	bl	80021ec <WIZCHIP_READ>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f3      	beq.n	8002930 <socket+0x1f4>
   return (int8_t)sn;
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}
 8002954:	20000054 	.word	0x20000054
 8002958:	200009b8 	.word	0x200009b8
 800295c:	200009ba 	.word	0x200009ba
 8002960:	200009bc 	.word	0x200009bc
 8002964:	200009cc 	.word	0x200009cc

08002968 <close>:

int8_t close(uint8_t sn)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d902      	bls.n	800297e <close+0x16>
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	e055      	b.n	8002a2a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3301      	adds	r3, #1
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800298a:	2110      	movs	r1, #16
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fc79 	bl	8002284 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002992:	bf00      	nop
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	3301      	adds	r3, #1
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fc23 	bl	80021ec <WIZCHIP_READ>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f3      	bne.n	8002994 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	3301      	adds	r3, #1
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80029b8:	211f      	movs	r1, #31
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fc62 	bl	8002284 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	2201      	movs	r2, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <close+0xcc>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b21b      	sxth	r3, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	b29a      	uxth	r2, r3
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <close+0xcc>)
 80029dc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2201      	movs	r2, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <close+0xd0>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	4013      	ands	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <close+0xd0>)
 80029fa:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <close+0xd4>)
 8002a00:	2100      	movs	r1, #0
 8002a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <close+0xd8>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002a0e:	bf00      	nop
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	3301      	adds	r3, #1
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fbe5 	bl	80021ec <WIZCHIP_READ>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f3      	bne.n	8002a10 <close+0xa8>
	return SOCK_OK;
 8002a28:	2301      	movs	r3, #1
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200009b8 	.word	0x200009b8
 8002a38:	200009ba 	.word	0x200009ba
 8002a3c:	200009bc 	.word	0x200009bc
 8002a40:	200009cc 	.word	0x200009cc

08002a44 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
 8002a50:	4613      	mov	r3, r2
 8002a52:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d902      	bls.n	8002a60 <connect+0x1c>
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e0c6      	b.n	8002bee <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	3301      	adds	r3, #1
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fbbf 	bl	80021ec <WIZCHIP_READ>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <connect+0x3a>
 8002a78:	f06f 0304 	mvn.w	r3, #4
 8002a7c:	e0b7      	b.n	8002bee <connect+0x1aa>
   CHECK_SOCKINIT();
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	3301      	adds	r3, #1
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fbae 	bl	80021ec <WIZCHIP_READ>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b13      	cmp	r3, #19
 8002a94:	d002      	beq.n	8002a9c <connect+0x58>
 8002a96:	f06f 0302 	mvn.w	r3, #2
 8002a9a:	e0a8      	b.n	8002bee <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	3201      	adds	r2, #1
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	3202      	adds	r2, #2
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	3203      	adds	r2, #3
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d002      	beq.n	8002ada <connect+0x96>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <connect+0x9c>
 8002ada:	f06f 030b 	mvn.w	r3, #11
 8002ade:	e086      	b.n	8002bee <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002ae0:	88bb      	ldrh	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <connect+0xa8>
 8002ae6:	f06f 030a 	mvn.w	r3, #10
 8002aea:	e080      	b.n	8002bee <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	3301      	adds	r3, #1
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002af8:	2204      	movs	r2, #4
 8002afa:	6839      	ldr	r1, [r7, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fc6f 	bl	80023e0 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3301      	adds	r3, #1
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0e:	461a      	mov	r2, r3
 8002b10:	88bb      	ldrh	r3, [r7, #4]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f7ff fbb2 	bl	8002284 <WIZCHIP_WRITE>
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	3301      	adds	r3, #1
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	88bb      	ldrh	r3, [r7, #4]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7ff fba5 	bl	8002284 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3301      	adds	r3, #1
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b46:	2104      	movs	r1, #4
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fb9b 	bl	8002284 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002b4e:	bf00      	nop
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	3301      	adds	r3, #1
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fb45 	bl	80021ec <WIZCHIP_READ>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f3      	bne.n	8002b50 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <connect+0x1b4>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	fa42 f303 	asr.w	r3, r2, r3
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02b      	beq.n	8002bd4 <connect+0x190>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e036      	b.n	8002bee <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	3301      	adds	r3, #1
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fb2d 	bl	80021ec <WIZCHIP_READ>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ba8:	2108      	movs	r1, #8
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fb6a 	bl	8002284 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002bb0:	f06f 030c 	mvn.w	r3, #12
 8002bb4:	e01b      	b.n	8002bee <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3301      	adds	r3, #1
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fb12 	bl	80021ec <WIZCHIP_READ>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8002bce:	f06f 0303 	mvn.w	r3, #3
 8002bd2:	e00c      	b.n	8002bee <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fb03 	bl	80021ec <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b17      	cmp	r3, #23
 8002bea:	d1c9      	bne.n	8002b80 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200009b8 	.word	0x200009b8

08002bfc <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d902      	bls.n	8002c12 <disconnect+0x16>
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	e062      	b.n	8002cd8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	3301      	adds	r3, #1
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fae6 	bl	80021ec <WIZCHIP_READ>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d002      	beq.n	8002c30 <disconnect+0x34>
 8002c2a:	f06f 0304 	mvn.w	r3, #4
 8002c2e:	e053      	b.n	8002cd8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3301      	adds	r3, #1
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fb20 	bl	8002284 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002c44:	bf00      	nop
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff faca 	bl	80021ec <WIZCHIP_READ>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f3      	bne.n	8002c46 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2201      	movs	r2, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <disconnect+0xe4>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b21b      	sxth	r3, r3
 8002c72:	4013      	ands	r3, r2
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <disconnect+0xe4>)
 8002c7a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <disconnect+0xe8>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	fa42 f303 	asr.w	r3, r2, r3
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d016      	beq.n	8002cbe <disconnect+0xc2>
 8002c90:	2300      	movs	r3, #0
 8002c92:	e021      	b.n	8002cd8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3301      	adds	r3, #1
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff faa3 	bl	80021ec <WIZCHIP_READ>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <disconnect+0xc2>
	   {
	      close(sn);
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fe58 	bl	8002968 <close>
	      return SOCKERR_TIMEOUT;
 8002cb8:	f06f 030c 	mvn.w	r3, #12
 8002cbc:	e00c      	b.n	8002cd8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fa8e 	bl	80021ec <WIZCHIP_READ>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1de      	bne.n	8002c94 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200009ba 	.word	0x200009ba
 8002ce4:	200009b8 	.word	0x200009b8

08002ce8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	6039      	str	r1, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d902      	bls.n	8002d0c <send+0x24>
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e0de      	b.n	8002eca <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3301      	adds	r3, #1
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fa69 	bl	80021ec <WIZCHIP_READ>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d002      	beq.n	8002d2a <send+0x42>
 8002d24:	f06f 0304 	mvn.w	r3, #4
 8002d28:	e0cf      	b.n	8002eca <send+0x1e2>
   CHECK_SOCKDATA();
 8002d2a:	88bb      	ldrh	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <send+0x4e>
 8002d30:	f06f 030d 	mvn.w	r3, #13
 8002d34:	e0c9      	b.n	8002eca <send+0x1e2>
   tmp = getSn_SR(sn);
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fa52 	bl	80021ec <WIZCHIP_READ>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b17      	cmp	r3, #23
 8002d50:	d005      	beq.n	8002d5e <send+0x76>
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b1c      	cmp	r3, #28
 8002d56:	d002      	beq.n	8002d5e <send+0x76>
 8002d58:	f06f 0306 	mvn.w	r3, #6
 8002d5c:	e0b5      	b.n	8002eca <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <send+0x1ec>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	fa42 f303 	asr.w	r3, r2, r3
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d039      	beq.n	8002de6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	3301      	adds	r3, #1
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fa34 	bl	80021ec <WIZCHIP_READ>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d019      	beq.n	8002dca <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002da2:	2110      	movs	r1, #16
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fa6d 	bl	8002284 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2201      	movs	r2, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <send+0x1ec>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <send+0x1ec>)
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e00d      	b.n	8002de6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <send+0xfa>
      {
         close(sn);
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fdc6 	bl	8002968 <close>
         return SOCKERR_TIMEOUT;
 8002ddc:	f06f 030c 	mvn.w	r3, #12
 8002de0:	e073      	b.n	8002eca <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e071      	b.n	8002eca <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3301      	adds	r3, #1
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f9fa 	bl	80021ec <WIZCHIP_READ>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002e00:	88ba      	ldrh	r2, [r7, #4]
 8002e02:	89bb      	ldrh	r3, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d901      	bls.n	8002e0c <send+0x124>
 8002e08:	89bb      	ldrh	r3, [r7, #12]
 8002e0a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fb46 	bl	80024a0 <getSn_TX_FSR>
 8002e14:	4603      	mov	r3, r0
 8002e16:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f9e1 	bl	80021ec <WIZCHIP_READ>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b17      	cmp	r3, #23
 8002e32:	d009      	beq.n	8002e48 <send+0x160>
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b1c      	cmp	r3, #28
 8002e38:	d006      	beq.n	8002e48 <send+0x160>
      {
         close(sn);
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd93 	bl	8002968 <close>
         return SOCKERR_SOCKSTATUS;
 8002e42:	f06f 0306 	mvn.w	r3, #6
 8002e46:	e040      	b.n	8002eca <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <send+0x1f0>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	fa42 f303 	asr.w	r3, r2, r3
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <send+0x180>
 8002e5c:	88ba      	ldrh	r2, [r7, #4]
 8002e5e:	89bb      	ldrh	r3, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d901      	bls.n	8002e68 <send+0x180>
 8002e64:	2300      	movs	r3, #0
 8002e66:	e030      	b.n	8002eca <send+0x1e2>
      if(len <= freesize) break;
 8002e68:	88ba      	ldrh	r2, [r7, #4]
 8002e6a:	89bb      	ldrh	r3, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d900      	bls.n	8002e72 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002e70:	e7cc      	b.n	8002e0c <send+0x124>
      if(len <= freesize) break;
 8002e72:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002e74:	88ba      	ldrh	r2, [r7, #4]
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fba6 	bl	80025cc <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	3301      	adds	r3, #1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f9f8 	bl	8002284 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002e94:	bf00      	nop
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f9a2 	bl	80021ec <WIZCHIP_READ>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f3      	bne.n	8002e96 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <send+0x1ec>)
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b21b      	sxth	r3, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <send+0x1ec>)
 8002ec6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200009ba 	.word	0x200009ba
 8002ed8:	200009b8 	.word	0x200009b8

08002edc <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d902      	bls.n	8002f00 <recv+0x24>
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e09c      	b.n	800303a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3301      	adds	r3, #1
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f96f 	bl	80021ec <WIZCHIP_READ>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <recv+0x42>
 8002f18:	f06f 0304 	mvn.w	r3, #4
 8002f1c:	e08d      	b.n	800303a <recv+0x15e>
   CHECK_SOCKDATA();
 8002f1e:	88bb      	ldrh	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <recv+0x4e>
 8002f24:	f06f 030d 	mvn.w	r3, #13
 8002f28:	e087      	b.n	800303a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3301      	adds	r3, #1
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff f958 	bl	80021ec <WIZCHIP_READ>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002f44:	89ba      	ldrh	r2, [r7, #12]
 8002f46:	88bb      	ldrh	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d201      	bcs.n	8002f50 <recv+0x74>
 8002f4c:	89bb      	ldrh	r3, [r7, #12]
 8002f4e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff faef 	bl	8002536 <getSn_RX_RSR>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	3301      	adds	r3, #1
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f93f 	bl	80021ec <WIZCHIP_READ>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b17      	cmp	r3, #23
 8002f76:	d026      	beq.n	8002fc6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b1c      	cmp	r3, #28
 8002f7c:	d11c      	bne.n	8002fb8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002f7e:	89bb      	ldrh	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d133      	bne.n	8002fec <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fa8a 	bl	80024a0 <getSn_TX_FSR>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	461c      	mov	r4, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3301      	adds	r3, #1
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f925 	bl	80021ec <WIZCHIP_READ>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	d10d      	bne.n	8002fc6 <recv+0xea>
               {
                  close(sn);
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fcdb 	bl	8002968 <close>
                  return SOCKERR_SOCKSTATUS;
 8002fb2:	f06f 0306 	mvn.w	r3, #6
 8002fb6:	e040      	b.n	800303a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fcd4 	bl	8002968 <close>
               return SOCKERR_SOCKSTATUS;
 8002fc0:	f06f 0306 	mvn.w	r3, #6
 8002fc4:	e039      	b.n	800303a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <recv+0x168>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	fa42 f303 	asr.w	r3, r2, r3
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <recv+0x108>
 8002fda:	89bb      	ldrh	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <recv+0x108>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e02a      	b.n	800303a <recv+0x15e>
         if(recvsize != 0) break;
 8002fe4:	89bb      	ldrh	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002fea:	e7b1      	b.n	8002f50 <recv+0x74>
               if(recvsize != 0) break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <recv+0x116>
         if(recvsize != 0) break;
 8002ff0:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002ff2:	89ba      	ldrh	r2, [r7, #12]
 8002ff4:	88bb      	ldrh	r3, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d201      	bcs.n	8002ffe <recv+0x122>
 8002ffa:	89bb      	ldrh	r3, [r7, #12]
 8002ffc:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002ffe:	88ba      	ldrh	r2, [r7, #4]
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fb3d 	bl	8002684 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3301      	adds	r3, #1
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003016:	2140      	movs	r1, #64	; 0x40
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f933 	bl	8002284 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800301e:	bf00      	nop
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	3301      	adds	r3, #1
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f8dd 	bl	80021ec <WIZCHIP_READ>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f3      	bne.n	8003020 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003038:	88bb      	ldrh	r3, [r7, #4]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}
 8003042:	bf00      	nop
 8003044:	200009b8 	.word	0x200009b8

08003048 <SPIReadWrite>:
#include "wizchip_conf.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8003052:	bf00      	nop
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <SPIReadWrite+0x48>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d1f8      	bne.n	8003054 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <SPIReadWrite+0x48>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 800306c:	bf00      	nop
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <SPIReadWrite+0x48>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d1f8      	bne.n	800306e <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SPIReadWrite+0x48>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	2000010c 	.word	0x2000010c

08003094 <wizchip_select>:

void  wizchip_select(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <wizchip_select+0x14>)
 80030a0:	f001 f99a 	bl	80043d8 <HAL_GPIO_WritePin>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40010c00 	.word	0x40010c00

080030ac <wizchip_deselect>:

void  wizchip_deselect(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <wizchip_deselect+0x14>)
 80030b8:	f001 f98e 	bl	80043d8 <HAL_GPIO_WritePin>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40010c00 	.word	0x40010c00

080030c4 <wizchip_read>:

uint8_t wizchip_read()
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7ff ffbc 	bl	8003048 <SPIReadWrite>
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
	return rb;
 80030d4:	79fb      	ldrb	r3, [r7, #7]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ffac 	bl	8003048 <SPIReadWrite>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003104:	2300      	movs	r3, #0
 8003106:	81fb      	strh	r3, [r7, #14]
 8003108:	e00c      	b.n	8003124 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7ff ff9c 	bl	8003048 <SPIReadWrite>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3301      	adds	r3, #1
 800311c:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	3301      	adds	r3, #1
 8003122:	81fb      	strh	r3, [r7, #14]
 8003124:	89fa      	ldrh	r2, [r7, #14]
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	429a      	cmp	r2, r3
 800312a:	d3ee      	bcc.n	800310a <wizchip_readburst+0x12>
	}
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003142:	2300      	movs	r3, #0
 8003144:	81fb      	strh	r3, [r7, #14]
 8003146:	e00a      	b.n	800315e <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff7b 	bl	8003048 <SPIReadWrite>
		pBuf++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3301      	adds	r3, #1
 8003156:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	3301      	adds	r3, #1
 800315c:	81fb      	strh	r3, [r7, #14]
 800315e:	89fa      	ldrh	r2, [r7, #14]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3f0      	bcc.n	8003148 <wizchip_writeburst+0x12>
	}
}
 8003166:	bf00      	nop
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <W5500IOInit>:

void W5500IOInit()
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <W5500IOInit+0x54>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <W5500IOInit+0x54>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6193      	str	r3, [r2, #24]
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <W5500IOInit+0x54>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800319c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80031a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a2:	2301      	movs	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	4619      	mov	r1, r3
 80031b4:	4804      	ldr	r0, [pc, #16]	; (80031c8 <W5500IOInit+0x58>)
 80031b6:	f000 ff8b 	bl	80040d0 <HAL_GPIO_Init>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010c00 	.word	0x40010c00

080031cc <W5500Init>:

void W5500Init()
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <W5500Init+0x80>)
 80031d4:	463c      	mov	r4, r7
 80031d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 80031dc:	f7ff ffc8 	bl	8003170 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);//CS high by default
 80031e0:	2201      	movs	r2, #1
 80031e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031e6:	481a      	ldr	r0, [pc, #104]	; (8003250 <W5500Init+0x84>)
 80031e8:	f001 f8f6 	bl	80043d8 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031f2:	4817      	ldr	r0, [pc, #92]	; (8003250 <W5500Init+0x84>)
 80031f4:	f001 f8f0 	bl	80043d8 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80031f8:	2002      	movs	r0, #2
 80031fa:	f000 fe61 	bl	8003ec0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80031fe:	2201      	movs	r2, #1
 8003200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003204:	4812      	ldr	r0, [pc, #72]	; (8003250 <W5500Init+0x84>)
 8003206:	f001 f8e7 	bl	80043d8 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800320a:	4912      	ldr	r1, [pc, #72]	; (8003254 <W5500Init+0x88>)
 800320c:	4812      	ldr	r0, [pc, #72]	; (8003258 <W5500Init+0x8c>)
 800320e:	f000 f88b 	bl	8003328 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8003212:	4912      	ldr	r1, [pc, #72]	; (800325c <W5500Init+0x90>)
 8003214:	4812      	ldr	r0, [pc, #72]	; (8003260 <W5500Init+0x94>)
 8003216:	f000 f8ab 	bl	8003370 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 800321a:	4912      	ldr	r1, [pc, #72]	; (8003264 <W5500Init+0x98>)
 800321c:	4812      	ldr	r0, [pc, #72]	; (8003268 <W5500Init+0x9c>)
 800321e:	f000 f8d3 	bl	80033c8 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8003222:	463b      	mov	r3, r7
 8003224:	4619      	mov	r1, r3
 8003226:	2001      	movs	r0, #1
 8003228:	f000 f8fa 	bl	8003420 <ctlwizchip>
 800322c:	4603      	mov	r3, r0
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d103      	bne.n	800323c <W5500Init+0x70>
		printf("WIZCHIP Initialized Failed.\r\n");
 8003234:	480d      	ldr	r0, [pc, #52]	; (800326c <W5500Init+0xa0>)
 8003236:	f002 f811 	bl	800525c <puts>
		while (1);
 800323a:	e7fe      	b.n	800323a <W5500Init+0x6e>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 800323c:	480c      	ldr	r0, [pc, #48]	; (8003270 <W5500Init+0xa4>)
 800323e:	f002 f80d 	bl	800525c <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	bf00      	nop
 800324c:	080068b4 	.word	0x080068b4
 8003250:	40010c00 	.word	0x40010c00
 8003254:	080030ad 	.word	0x080030ad
 8003258:	08003095 	.word	0x08003095
 800325c:	080030df 	.word	0x080030df
 8003260:	080030c5 	.word	0x080030c5
 8003264:	08003137 	.word	0x08003137
 8003268:	080030f9 	.word	0x080030f9
 800326c:	08006870 	.word	0x08006870
 8003270:	08006890 	.word	0x08006890

08003274 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
 80032dc:	2300      	movs	r3, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	807b      	strh	r3, [r7, #2]
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
	...

08003328 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <reg_wizchip_cs_cbfunc+0x16>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <reg_wizchip_cs_cbfunc+0x3c>)
 8003340:	4a09      	ldr	r2, [pc, #36]	; (8003368 <reg_wizchip_cs_cbfunc+0x40>)
 8003342:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <reg_wizchip_cs_cbfunc+0x3c>)
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <reg_wizchip_cs_cbfunc+0x44>)
 8003348:	619a      	str	r2, [r3, #24]
 800334a:	e006      	b.n	800335a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <reg_wizchip_cs_cbfunc+0x3c>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <reg_wizchip_cs_cbfunc+0x3c>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6193      	str	r3, [r2, #24]
   }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20000058 	.word	0x20000058
 8003368:	0800328d 	.word	0x0800328d
 800336c:	08003299 	.word	0x08003299

08003370 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800337a:	bf00      	nop
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <reg_wizchip_spi_cbfunc+0x4c>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f9      	beq.n	800337c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <reg_wizchip_spi_cbfunc+0x24>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <reg_wizchip_spi_cbfunc+0x4c>)
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <reg_wizchip_spi_cbfunc+0x50>)
 8003398:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <reg_wizchip_spi_cbfunc+0x4c>)
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <reg_wizchip_spi_cbfunc+0x54>)
 800339e:	621a      	str	r2, [r3, #32]
 80033a0:	e006      	b.n	80033b0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80033a2:	4a06      	ldr	r2, [pc, #24]	; (80033bc <reg_wizchip_spi_cbfunc+0x4c>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <reg_wizchip_spi_cbfunc+0x4c>)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6213      	str	r3, [r2, #32]
   }
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000058 	.word	0x20000058
 80033c0:	080032d9 	.word	0x080032d9
 80033c4:	080032e7 	.word	0x080032e7

080033c8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80033d2:	bf00      	nop
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f9      	beq.n	80033d4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <reg_wizchip_spiburst_cbfunc+0x24>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <reg_wizchip_spiburst_cbfunc+0x50>)
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033f4:	4a09      	ldr	r2, [pc, #36]	; (800341c <reg_wizchip_spiburst_cbfunc+0x54>)
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
 80033f8:	e006      	b.n	8003408 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80033fa:	4a06      	ldr	r2, [pc, #24]	; (8003414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000058 	.word	0x20000058
 8003418:	080032fb 	.word	0x080032fb
 800341c:	08003311 	.word	0x08003311

08003420 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	f200 80c7 	bhi.w	80035ce <ctlwizchip+0x1ae>
 8003440:	a201      	add	r2, pc, #4	; (adr r2, 8003448 <ctlwizchip+0x28>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003489 	.word	0x08003489
 800344c:	0800348f 	.word	0x0800348f
 8003450:	080034bb 	.word	0x080034bb
 8003454:	080034af 	.word	0x080034af
 8003458:	080034c9 	.word	0x080034c9
 800345c:	080034d5 	.word	0x080034d5
 8003460:	080034e3 	.word	0x080034e3
 8003464:	08003509 	.word	0x08003509
 8003468:	0800352f 	.word	0x0800352f
 800346c:	08003573 	.word	0x08003573
 8003470:	08003579 	.word	0x08003579
 8003474:	08003581 	.word	0x08003581
 8003478:	080035d5 	.word	0x080035d5
 800347c:	08003589 	.word	0x08003589
 8003480:	08003597 	.word	0x08003597
 8003484:	080035b3 	.word	0x080035b3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003488:	f000 f8ea 	bl	8003660 <wizchip_sw_reset>
         break;
 800348c:	e0a3      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3308      	adds	r3, #8
 800349c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f927 	bl	80036f8 <wizchip_init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	e094      	b.n	80035d8 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f9ac 	bl	8003810 <wizchip_clrinterrupt>
         break;
 80034b8:	e08d      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80034ba:	f000 f9dd 	bl	8003878 <wizchip_getinterrupt>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	801a      	strh	r2, [r3, #0]
         break;
 80034c6:	e086      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f9f8 	bl	80038c2 <wizchip_setinterruptmask>
         break;         
 80034d2:	e080      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80034d4:	f000 fa10 	bl	80038f8 <wizchip_getinterruptmask>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	801a      	strh	r2, [r3, #0]
         break;
 80034e0:	e079      	b.n	80035d6 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80034f2:	f7fe fec7 	bl	8002284 <WIZCHIP_WRITE>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003502:	f7fe febf 	bl	8002284 <WIZCHIP_WRITE>
         break;
 8003506:	e066      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003508:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800350c:	f7fe fe6e 	bl	80021ec <WIZCHIP_READ>
 8003510:	4603      	mov	r3, r0
 8003512:	b29b      	uxth	r3, r3
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	b29c      	uxth	r4, r3
 8003518:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800351c:	f7fe fe66 	bl	80021ec <WIZCHIP_READ>
 8003520:	4603      	mov	r3, r0
 8003522:	b29b      	uxth	r3, r3
 8003524:	4423      	add	r3, r4
 8003526:	b29a      	uxth	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	801a      	strh	r2, [r3, #0]
         break;
 800352c:	e053      	b.n	80035d6 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <ctlwizchip+0x1c0>)
 8003530:	789a      	ldrb	r2, [r3, #2]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <ctlwizchip+0x1c0>)
 800353c:	78d2      	ldrb	r2, [r2, #3]
 800353e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	3302      	adds	r3, #2
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <ctlwizchip+0x1c0>)
 8003546:	7912      	ldrb	r2, [r2, #4]
 8003548:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3303      	adds	r3, #3
 800354e:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <ctlwizchip+0x1c0>)
 8003550:	7952      	ldrb	r2, [r2, #5]
 8003552:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	3304      	adds	r3, #4
 8003558:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <ctlwizchip+0x1c0>)
 800355a:	7992      	ldrb	r2, [r2, #6]
 800355c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3305      	adds	r3, #5
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <ctlwizchip+0x1c0>)
 8003564:	79d2      	ldrb	r2, [r2, #7]
 8003566:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	3306      	adds	r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
         break;
 8003570:	e031      	b.n	80035d6 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003572:	f000 fa13 	bl	800399c <wizphy_reset>
         break;
 8003576:	e02e      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	f000 fa36 	bl	80039ea <wizphy_setphyconf>
         break;
 800357e:	e02a      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f000 fa74 	bl	8003a6e <wizphy_getphyconf>
         break;
 8003586:	e026      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fad7 	bl	8003b40 <wizphy_setphypmode>
 8003592:	4603      	mov	r3, r0
 8003594:	e020      	b.n	80035d8 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003596:	f000 f9e8 	bl	800396a <wizphy_getphypmode>
 800359a:	4603      	mov	r3, r0
 800359c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2bff      	cmp	r3, #255	; 0xff
 80035a2:	d102      	bne.n	80035aa <ctlwizchip+0x18a>
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	e016      	b.n	80035d8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	7dfa      	ldrb	r2, [r7, #23]
 80035ae:	701a      	strb	r2, [r3, #0]
         break;
 80035b0:	e011      	b.n	80035d6 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80035b2:	f000 f9c4 	bl	800393e <wizphy_getphylink>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	2bff      	cmp	r3, #255	; 0xff
 80035be:	d102      	bne.n	80035c6 <ctlwizchip+0x1a6>
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	e008      	b.n	80035d8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	7dfa      	ldrb	r2, [r7, #23]
 80035ca:	701a      	strb	r2, [r3, #0]
         break;
 80035cc:	e003      	b.n	80035d6 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e001      	b.n	80035d8 <ctlwizchip+0x1b8>
         break;
 80035d4:	bf00      	nop
   }
   return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	20000058 	.word	0x20000058

080035e4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d82c      	bhi.n	8003650 <ctlnetwork+0x6c>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <ctlnetwork+0x18>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003615 	.word	0x08003615
 8003600:	0800361d 	.word	0x0800361d
 8003604:	08003625 	.word	0x08003625
 8003608:	08003633 	.word	0x08003633
 800360c:	08003641 	.word	0x08003641
 8003610:	08003649 	.word	0x08003649
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f000 fadd 	bl	8003bd4 <wizchip_setnetinfo>
         break;
 800361a:	e01c      	b.n	8003656 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	f000 fb19 	bl	8003c54 <wizchip_getnetinfo>
         break;
 8003622:	e018      	b.n	8003656 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fb53 	bl	8003cd4 <wizchip_setnetmode>
 800362e:	4603      	mov	r3, r0
 8003630:	e012      	b.n	8003658 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003632:	f000 fb71 	bl	8003d18 <wizchip_getnetmode>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	701a      	strb	r2, [r3, #0]
         break;
 800363e:	e00a      	b.n	8003656 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003640:	6838      	ldr	r0, [r7, #0]
 8003642:	f000 fb71 	bl	8003d28 <wizchip_settimeout>
         break;
 8003646:	e006      	b.n	8003656 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f000 fb8e 	bl	8003d6a <wizchip_gettimeout>
         break;
 800364e:	e002      	b.n	8003656 <ctlnetwork+0x72>
      default:
         return -1;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295
 8003654:	e000      	b.n	8003658 <ctlnetwork+0x74>
   }
   return 0;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	2206      	movs	r2, #6
 800366a:	4619      	mov	r1, r3
 800366c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003670:	f7fe fe56 	bl	8002320 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2204      	movs	r2, #4
 800367a:	4619      	mov	r1, r3
 800367c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003680:	f7fe fe4e 	bl	8002320 <WIZCHIP_READ_BUF>
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	2204      	movs	r2, #4
 800368a:	4619      	mov	r1, r3
 800368c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003690:	f7fe fe46 	bl	8002320 <WIZCHIP_READ_BUF>
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	2204      	movs	r2, #4
 800369a:	4619      	mov	r1, r3
 800369c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80036a0:	f7fe fe3e 	bl	8002320 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fe fdec 	bl	8002284 <WIZCHIP_WRITE>
   getMR(); // for delay
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fe fd9d 	bl	80021ec <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	2206      	movs	r2, #6
 80036b6:	4619      	mov	r1, r3
 80036b8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80036bc:	f7fe fe90 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	2204      	movs	r2, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036cc:	f7fe fe88 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80036d0:	f107 0310 	add.w	r3, r7, #16
 80036d4:	2204      	movs	r2, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80036dc:	f7fe fe80 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	2204      	movs	r2, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80036ec:	f7fe fe78 	bl	80023e0 <WIZCHIP_WRITE_BUF>
}
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003706:	f7ff ffab 	bl	8003660 <wizchip_sw_reset>
   if(txsize)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d03b      	beq.n	8003788 <wizchip_init+0x90>
   {
      tmp = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e015      	b.n	8003746 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	7bbb      	ldrb	r3, [r7, #14]
 8003726:	4413      	add	r3, r2
 8003728:	b2db      	uxtb	r3, r3
 800372a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800372c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003730:	2b10      	cmp	r3, #16
 8003732:	dd02      	ble.n	800373a <wizchip_init+0x42>
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	e066      	b.n	8003808 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	2b07      	cmp	r3, #7
 800374c:	dde5      	ble.n	800371a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e015      	b.n	8003780 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3301      	adds	r3, #1
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003762:	4618      	mov	r0, r3
 8003764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	f7fe fd88 	bl	8002284 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	3301      	adds	r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003784:	2b07      	cmp	r3, #7
 8003786:	dde5      	ble.n	8003754 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03b      	beq.n	8003806 <wizchip_init+0x10e>
   {
      tmp = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	e015      	b.n	80037c4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	4413      	add	r3, r2
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80037aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	dd02      	ble.n	80037b8 <wizchip_init+0xc0>
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	e027      	b.n	8003808 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c8:	2b07      	cmp	r3, #7
 80037ca:	dde5      	ble.n	8003798 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e015      	b.n	80037fe <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	3301      	adds	r3, #1
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80037e0:	4618      	mov	r0, r3
 80037e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fe fd49 	bl	8002284 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80037f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003802:	2b07      	cmp	r3, #7
 8003804:	dde5      	ble.n	80037d2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	b29b      	uxth	r3, r3
 8003824:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	f023 030f 	bic.w	r3, r3, #15
 800382c:	b2db      	uxtb	r3, r3
 800382e:	4619      	mov	r1, r3
 8003830:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003834:	f7fe fd26 	bl	8002284 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e014      	b.n	8003868 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800383e:	7bba      	ldrb	r2, [r7, #14]
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	fa42 f303 	asr.w	r3, r2, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <wizchip_clrinterrupt+0x52>
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	3301      	adds	r3, #1
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800385a:	211f      	movs	r1, #31
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fd11 	bl	8002284 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3301      	adds	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b07      	cmp	r3, #7
 800386c:	d9e7      	bls.n	800383e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800388a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800388e:	f7fe fcad 	bl	80021ec <WIZCHIP_READ>
 8003892:	4603      	mov	r3, r0
 8003894:	f023 030f 	bic.w	r3, r3, #15
 8003898:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800389a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800389e:	f7fe fca5 	bl	80021ec <WIZCHIP_READ>
 80038a2:	4603      	mov	r3, r0
 80038a4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80038a6:	79bb      	ldrb	r3, [r7, #6]
 80038a8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80038b8:	88bb      	ldrh	r3, [r7, #4]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	4619      	mov	r1, r3
 80038dc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80038e0:	f7fe fcd0 	bl	8002284 <WIZCHIP_WRITE>
   setSIMR(simr);
 80038e4:	7bbb      	ldrb	r3, [r7, #14]
 80038e6:	4619      	mov	r1, r3
 80038e8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80038ec:	f7fe fcca 	bl	8002284 <WIZCHIP_WRITE>
#endif   
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800390a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800390e:	f7fe fc6d 	bl	80021ec <WIZCHIP_READ>
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003916:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800391a:	f7fe fc67 	bl	80021ec <WIZCHIP_READ>
 800391e:	4603      	mov	r3, r0
 8003920:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003922:	79bb      	ldrb	r3, [r7, #6]
 8003924:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003926:	88bb      	ldrh	r3, [r7, #4]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b29a      	uxth	r2, r3
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4413      	add	r3, r2
 8003932:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003934:	88bb      	ldrh	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003944:	2300      	movs	r3, #0
 8003946:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003948:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800394c:	f7fe fc4e 	bl	80021ec <WIZCHIP_READ>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800395a:	2301      	movs	r3, #1
 800395c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003974:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003978:	f7fe fc38 	bl	80021ec <WIZCHIP_READ>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003982:	2b30      	cmp	r3, #48	; 0x30
 8003984:	d102      	bne.n	800398c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003986:	2301      	movs	r3, #1
 8003988:	71fb      	strb	r3, [r7, #7]
 800398a:	e001      	b.n	8003990 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800398c:	2300      	movs	r3, #0
 800398e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80039a2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039a6:	f7fe fc21 	bl	80021ec <WIZCHIP_READ>
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039be:	f7fe fc61 	bl	8002284 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80039c2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039c6:	f7fe fc11 	bl	80021ec <WIZCHIP_READ>
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039d4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	4619      	mov	r1, r3
 80039da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039de:	f7fe fc51 	bl	8002284 <WIZCHIP_WRITE>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d104      	bne.n	8003a08 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a04:	73fb      	strb	r3, [r7, #15]
 8003a06:	e003      	b.n	8003a10 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d104      	bne.n	8003a22 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e019      	b.n	8003a56 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	78db      	ldrb	r3, [r3, #3]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d10d      	bne.n	8003a46 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	789b      	ldrb	r3, [r3, #2]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d104      	bne.n	8003a3c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	f043 0318 	orr.w	r3, r3, #24
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e00c      	b.n	8003a56 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	f043 0308 	orr.w	r3, r3, #8
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e007      	b.n	8003a56 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	789b      	ldrb	r3, [r3, #2]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d103      	bne.n	8003a56 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	f043 0310 	orr.w	r3, r3, #16
 8003a54:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a5e:	f7fe fc11 	bl	8002284 <WIZCHIP_WRITE>
   wizphy_reset();
 8003a62:	f7ff ff9b 	bl	800399c <wizphy_reset>
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003a7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a7e:	f7fe fbb5 	bl	80021ec <WIZCHIP_READ>
 8003a82:	4603      	mov	r3, r0
 8003a84:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	119b      	asrs	r3, r3, #6
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d001      	beq.n	8003aa4 <wizphy_getphyconf+0x36>
 8003aa0:	2b38      	cmp	r3, #56	; 0x38
 8003aa2:	d103      	bne.n	8003aac <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	705a      	strb	r2, [r3, #1]
         break;
 8003aaa:	e003      	b.n	8003ab4 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	705a      	strb	r2, [r3, #1]
         break;
 8003ab2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aba:	3b10      	subs	r3, #16
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	bf8c      	ite	hi
 8003ac0:	2201      	movhi	r2, #1
 8003ac2:	2200      	movls	r2, #0
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	2a00      	cmp	r2, #0
 8003ac8:	d111      	bne.n	8003aee <wizphy_getphyconf+0x80>
 8003aca:	2201      	movs	r2, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	709a      	strb	r2, [r3, #2]
         break;
 8003aec:	e003      	b.n	8003af6 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	709a      	strb	r2, [r3, #2]
         break;
 8003af4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003afc:	3b08      	subs	r3, #8
 8003afe:	2b18      	cmp	r3, #24
 8003b00:	bf8c      	ite	hi
 8003b02:	2201      	movhi	r2, #1
 8003b04:	2200      	movls	r2, #0
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	2a00      	cmp	r2, #0
 8003b0a:	d111      	bne.n	8003b30 <wizphy_getphyconf+0xc2>
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	70da      	strb	r2, [r3, #3]
         break;
 8003b2e:	e003      	b.n	8003b38 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	70da      	strb	r2, [r3, #3]
         break;
 8003b36:	bf00      	nop
   }
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003b4e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b52:	f7fe fb4b 	bl	80021ec <WIZCHIP_READ>
 8003b56:	4603      	mov	r3, r0
 8003b58:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <wizphy_setphypmode+0x2a>
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	e030      	b.n	8003bcc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b70:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d104      	bne.n	8003b82 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e003      	b.n	8003b8a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003b88:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b92:	f7fe fb77 	bl	8002284 <WIZCHIP_WRITE>
   wizphy_reset();
 8003b96:	f7ff ff01 	bl	800399c <wizphy_reset>
   tmp = getPHYCFGR();
 8003b9a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b9e:	f7fe fb25 	bl	80021ec <WIZCHIP_READ>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <wizphy_setphypmode+0x88>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e008      	b.n	8003bcc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <wizphy_setphypmode+0x88>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e001      	b.n	8003bcc <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2206      	movs	r2, #6
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003be6:	f7fe fbfb 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	330e      	adds	r3, #14
 8003bee:	2204      	movs	r2, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bf6:	f7fe fbf3 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	330a      	adds	r3, #10
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003c06:	f7fe fbeb 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3306      	adds	r3, #6
 8003c0e:	2204      	movs	r2, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003c16:	f7fe fbe3 	bl	80023e0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7c9a      	ldrb	r2, [r3, #18]
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <wizchip_setnetinfo+0x78>)
 8003c20:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7cda      	ldrb	r2, [r3, #19]
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <wizchip_setnetinfo+0x78>)
 8003c28:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7d1a      	ldrb	r2, [r3, #20]
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <wizchip_setnetinfo+0x78>)
 8003c30:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7d5a      	ldrb	r2, [r3, #21]
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <wizchip_setnetinfo+0x78>)
 8003c38:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7d9a      	ldrb	r2, [r3, #22]
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <wizchip_setnetinfo+0x7c>)
 8003c40:	701a      	strb	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200009d4 	.word	0x200009d4
 8003c50:	200009d8 	.word	0x200009d8

08003c54 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2206      	movs	r2, #6
 8003c60:	4619      	mov	r1, r3
 8003c62:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003c66:	f7fe fb5b 	bl	8002320 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	330e      	adds	r3, #14
 8003c6e:	2204      	movs	r2, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c76:	f7fe fb53 	bl	8002320 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	330a      	adds	r3, #10
 8003c7e:	2204      	movs	r2, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003c86:	f7fe fb4b 	bl	8002320 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3306      	adds	r3, #6
 8003c8e:	2204      	movs	r2, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003c96:	f7fe fb43 	bl	8002320 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <wizchip_getnetinfo+0x78>)
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <wizchip_getnetinfo+0x78>)
 8003ca4:	785a      	ldrb	r2, [r3, #1]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <wizchip_getnetinfo+0x78>)
 8003cac:	789a      	ldrb	r2, [r3, #2]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <wizchip_getnetinfo+0x78>)
 8003cb4:	78da      	ldrb	r2, [r3, #3]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <wizchip_getnetinfo+0x7c>)
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	759a      	strb	r2, [r3, #22]
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200009d4 	.word	0x200009d4
 8003cd0:	200009d8 	.word	0x200009d8

08003cd4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <wizchip_setnetmode+0x1e>
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	e00e      	b.n	8003d10 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fe fa7a 	bl	80021ec <WIZCHIP_READ>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	4619      	mov	r1, r3
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f7fe fabb 	bl	8002284 <WIZCHIP_WRITE>
   return 0;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fe fa65 	bl	80021ec <WIZCHIP_READ>
 8003d22:	4603      	mov	r3, r0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003d3a:	f7fe faa3 	bl	8002284 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	885b      	ldrh	r3, [r3, #2]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003d4e:	f7fe fa99 	bl	8002284 <WIZCHIP_WRITE>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	885b      	ldrh	r3, [r3, #2]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003d5e:	f7fe fa91 	bl	8002284 <WIZCHIP_WRITE>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003d6a:	b590      	push	{r4, r7, lr}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003d72:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003d76:	f7fe fa39 	bl	80021ec <WIZCHIP_READ>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003d82:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003d86:	f7fe fa31 	bl	80021ec <WIZCHIP_READ>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	b29c      	uxth	r4, r3
 8003d92:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003d96:	f7fe fa29 	bl	80021ec <WIZCHIP_READ>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	4423      	add	r3, r4
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	805a      	strh	r2, [r3, #2]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd90      	pop	{r4, r7, pc}
	...

08003db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003db0:	f7fc fe36 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003db4:	480b      	ldr	r0, [pc, #44]	; (8003de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003db6:	490c      	ldr	r1, [pc, #48]	; (8003de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003db8:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8003dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dbc:	e002      	b.n	8003dc4 <LoopCopyDataInit>

08003dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dc2:	3304      	adds	r3, #4

08003dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc8:	d3f9      	bcc.n	8003dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003dcc:	4c09      	ldr	r4, [pc, #36]	; (8003df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dd0:	e001      	b.n	8003dd6 <LoopFillZerobss>

08003dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dd4:	3204      	adds	r2, #4

08003dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd8:	d3fb      	bcc.n	8003dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dda:	f001 f97f 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dde:	f7fc fa37 	bl	8000250 <main>
  bx lr
 8003de2:	4770      	bx	lr
  ldr r0, =_sdata
 8003de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003dec:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8003df0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003df4:	200009f0 	.word	0x200009f0

08003df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003df8:	e7fe      	b.n	8003df8 <ADC1_2_IRQHandler>
	...

08003dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_Init+0x28>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a07      	ldr	r2, [pc, #28]	; (8003e24 <HAL_Init+0x28>)
 8003e06:	f043 0310 	orr.w	r3, r3, #16
 8003e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e0c:	2003      	movs	r0, #3
 8003e0e:	f000 f92b 	bl	8004068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f000 f808 	bl	8003e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e18:	f7fc fc74 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40022000 	.word	0x40022000

08003e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_InitTick+0x54>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_InitTick+0x58>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f935 	bl	80040b6 <HAL_SYSTICK_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e00e      	b.n	8003e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d80a      	bhi.n	8003e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	f000 f90b 	bl	800407e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e68:	4a06      	ldr	r2, [pc, #24]	; (8003e84 <HAL_InitTick+0x5c>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000050 	.word	0x20000050
 8003e80:	20000088 	.word	0x20000088
 8003e84:	20000084 	.word	0x20000084

08003e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_IncTick+0x1c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_IncTick+0x20>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <HAL_IncTick+0x20>)
 8003e9a:	6013      	str	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	20000088 	.word	0x20000088
 8003ea8:	200009dc 	.word	0x200009dc

08003eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb0:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <HAL_GetTick+0x10>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	200009dc 	.word	0x200009dc

08003ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7ff fff0 	bl	8003eac <HAL_GetTick>
 8003ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d005      	beq.n	8003ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_Delay+0x44>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ee6:	bf00      	nop
 8003ee8:	f7ff ffe0 	bl	8003eac <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d8f7      	bhi.n	8003ee8 <HAL_Delay+0x28>
  {
  }
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000088 	.word	0x20000088

08003f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f24:	4013      	ands	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3a:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	60d3      	str	r3, [r2, #12]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <__NVIC_GetPriorityGrouping+0x18>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	f003 0307 	and.w	r3, r3, #7
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	db0a      	blt.n	8003f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	490c      	ldr	r1, [pc, #48]	; (8003fb8 <__NVIC_SetPriority+0x4c>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	0112      	lsls	r2, r2, #4
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f94:	e00a      	b.n	8003fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4908      	ldr	r1, [pc, #32]	; (8003fbc <__NVIC_SetPriority+0x50>)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	0112      	lsls	r2, r2, #4
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	440b      	add	r3, r1
 8003faa:	761a      	strb	r2, [r3, #24]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000e100 	.word	0xe000e100
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f1c3 0307 	rsb	r3, r3, #7
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	bf28      	it	cs
 8003fde:	2304      	movcs	r3, #4
 8003fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d902      	bls.n	8003ff0 <NVIC_EncodePriority+0x30>
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3b03      	subs	r3, #3
 8003fee:	e000      	b.n	8003ff2 <NVIC_EncodePriority+0x32>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43da      	mvns	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	401a      	ands	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004008:	f04f 31ff 	mov.w	r1, #4294967295
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43d9      	mvns	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004018:	4313      	orrs	r3, r2
         );
}
 800401a:	4618      	mov	r0, r3
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004034:	d301      	bcc.n	800403a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004036:	2301      	movs	r3, #1
 8004038:	e00f      	b.n	800405a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <SysTick_Config+0x40>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004042:	210f      	movs	r1, #15
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	f7ff ff90 	bl	8003f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <SysTick_Config+0x40>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <SysTick_Config+0x40>)
 8004054:	2207      	movs	r2, #7
 8004056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	e000e010 	.word	0xe000e010

08004068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff49 	bl	8003f08 <__NVIC_SetPriorityGrouping>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004090:	f7ff ff5e 	bl	8003f50 <__NVIC_GetPriorityGrouping>
 8004094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff ff90 	bl	8003fc0 <NVIC_EncodePriority>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff5f 	bl	8003f6c <__NVIC_SetPriority>
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ffb0 	bl	8004024 <SysTick_Config>
 80040c4:	4603      	mov	r3, r0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b08b      	sub	sp, #44	; 0x2c
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	e169      	b.n	80043b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040e4:	2201      	movs	r2, #1
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8158 	bne.w	80043b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a9a      	ldr	r2, [pc, #616]	; (8004370 <HAL_GPIO_Init+0x2a0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d05e      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 800410c:	4a98      	ldr	r2, [pc, #608]	; (8004370 <HAL_GPIO_Init+0x2a0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d875      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004112:	4a98      	ldr	r2, [pc, #608]	; (8004374 <HAL_GPIO_Init+0x2a4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d058      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004118:	4a96      	ldr	r2, [pc, #600]	; (8004374 <HAL_GPIO_Init+0x2a4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d86f      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800411e:	4a96      	ldr	r2, [pc, #600]	; (8004378 <HAL_GPIO_Init+0x2a8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d052      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004124:	4a94      	ldr	r2, [pc, #592]	; (8004378 <HAL_GPIO_Init+0x2a8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d869      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800412a:	4a94      	ldr	r2, [pc, #592]	; (800437c <HAL_GPIO_Init+0x2ac>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04c      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004130:	4a92      	ldr	r2, [pc, #584]	; (800437c <HAL_GPIO_Init+0x2ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d863      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004136:	4a92      	ldr	r2, [pc, #584]	; (8004380 <HAL_GPIO_Init+0x2b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d046      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 800413c:	4a90      	ldr	r2, [pc, #576]	; (8004380 <HAL_GPIO_Init+0x2b0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d85d      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004142:	2b12      	cmp	r3, #18
 8004144:	d82a      	bhi.n	800419c <HAL_GPIO_Init+0xcc>
 8004146:	2b12      	cmp	r3, #18
 8004148:	d859      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <HAL_GPIO_Init+0x80>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	080041cb 	.word	0x080041cb
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080041b7 	.word	0x080041b7
 800415c:	080041f9 	.word	0x080041f9
 8004160:	080041ff 	.word	0x080041ff
 8004164:	080041ff 	.word	0x080041ff
 8004168:	080041ff 	.word	0x080041ff
 800416c:	080041ff 	.word	0x080041ff
 8004170:	080041ff 	.word	0x080041ff
 8004174:	080041ff 	.word	0x080041ff
 8004178:	080041ff 	.word	0x080041ff
 800417c:	080041ff 	.word	0x080041ff
 8004180:	080041ff 	.word	0x080041ff
 8004184:	080041ff 	.word	0x080041ff
 8004188:	080041ff 	.word	0x080041ff
 800418c:	080041ff 	.word	0x080041ff
 8004190:	080041ff 	.word	0x080041ff
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041c1 	.word	0x080041c1
 800419c:	4a79      	ldr	r2, [pc, #484]	; (8004384 <HAL_GPIO_Init+0x2b4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041a2:	e02c      	b.n	80041fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	623b      	str	r3, [r7, #32]
          break;
 80041aa:	e029      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	3304      	adds	r3, #4
 80041b2:	623b      	str	r3, [r7, #32]
          break;
 80041b4:	e024      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	3308      	adds	r3, #8
 80041bc:	623b      	str	r3, [r7, #32]
          break;
 80041be:	e01f      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	330c      	adds	r3, #12
 80041c6:	623b      	str	r3, [r7, #32]
          break;
 80041c8:	e01a      	b.n	8004200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041d2:	2304      	movs	r3, #4
 80041d4:	623b      	str	r3, [r7, #32]
          break;
 80041d6:	e013      	b.n	8004200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041e0:	2308      	movs	r3, #8
 80041e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	611a      	str	r2, [r3, #16]
          break;
 80041ea:	e009      	b.n	8004200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041ec:	2308      	movs	r3, #8
 80041ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	615a      	str	r2, [r3, #20]
          break;
 80041f6:	e003      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
          break;
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x130>
          break;
 80041fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2bff      	cmp	r3, #255	; 0xff
 8004204:	d801      	bhi.n	800420a <HAL_GPIO_Init+0x13a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	e001      	b.n	800420e <HAL_GPIO_Init+0x13e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2bff      	cmp	r3, #255	; 0xff
 8004214:	d802      	bhi.n	800421c <HAL_GPIO_Init+0x14c>
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	e002      	b.n	8004222 <HAL_GPIO_Init+0x152>
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	3b08      	subs	r3, #8
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	210f      	movs	r1, #15
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	6a39      	ldr	r1, [r7, #32]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80b1 	beq.w	80043b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004250:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <HAL_GPIO_Init+0x2b8>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a4c      	ldr	r2, [pc, #304]	; (8004388 <HAL_GPIO_Init+0x2b8>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_GPIO_Init+0x2b8>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004268:	4a48      	ldr	r2, [pc, #288]	; (800438c <HAL_GPIO_Init+0x2bc>)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	089b      	lsrs	r3, r3, #2
 800426e:	3302      	adds	r3, #2
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	220f      	movs	r2, #15
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a40      	ldr	r2, [pc, #256]	; (8004390 <HAL_GPIO_Init+0x2c0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_GPIO_Init+0x1ec>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_GPIO_Init+0x2c4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00d      	beq.n	80042b8 <HAL_GPIO_Init+0x1e8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3e      	ldr	r2, [pc, #248]	; (8004398 <HAL_GPIO_Init+0x2c8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <HAL_GPIO_Init+0x1e4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3d      	ldr	r2, [pc, #244]	; (800439c <HAL_GPIO_Init+0x2cc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_GPIO_Init+0x1e0>
 80042ac:	2303      	movs	r3, #3
 80042ae:	e006      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b0:	2304      	movs	r3, #4
 80042b2:	e004      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e002      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042bc:	2300      	movs	r3, #0
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	f002 0203 	and.w	r2, r2, #3
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	4093      	lsls	r3, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042ce:	492f      	ldr	r1, [pc, #188]	; (800438c <HAL_GPIO_Init+0x2bc>)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	3302      	adds	r3, #2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	492c      	ldr	r1, [pc, #176]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4928      	ldr	r1, [pc, #160]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004300:	4013      	ands	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	4922      	ldr	r1, [pc, #136]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
 800431c:	e006      	b.n	800432c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	43db      	mvns	r3, r3
 8004326:	491e      	ldr	r1, [pc, #120]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004328:	4013      	ands	r3, r2
 800432a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	4918      	ldr	r1, [pc, #96]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	43db      	mvns	r3, r3
 800434e:	4914      	ldr	r1, [pc, #80]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004350:	4013      	ands	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d021      	beq.n	80043a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
 800436c:	e021      	b.n	80043b2 <HAL_GPIO_Init+0x2e2>
 800436e:	bf00      	nop
 8004370:	10320000 	.word	0x10320000
 8004374:	10310000 	.word	0x10310000
 8004378:	10220000 	.word	0x10220000
 800437c:	10210000 	.word	0x10210000
 8004380:	10120000 	.word	0x10120000
 8004384:	10110000 	.word	0x10110000
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	40010800 	.word	0x40010800
 8004394:	40010c00 	.word	0x40010c00
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_GPIO_Init+0x304>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	4909      	ldr	r1, [pc, #36]	; (80043d4 <HAL_GPIO_Init+0x304>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f47f ae8e 	bne.w	80040e4 <HAL_GPIO_Init+0x14>
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	372c      	adds	r7, #44	; 0x2c
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e272      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004434:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
 8004440:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b89      	ldr	r3, [pc, #548]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x12c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e24c      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x76>
 8004470:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x98>
 8004486:	4b7b      	ldr	r3, [pc, #492]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7a      	ldr	r2, [pc, #488]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b78      	ldr	r3, [pc, #480]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xbc>
 80044aa:	4b72      	ldr	r3, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a71      	ldr	r2, [pc, #452]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044c4:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6a      	ldr	r2, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a67      	ldr	r2, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7ff fce2 	bl	8003eac <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7ff fcde 	bl	8003eac <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e200      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe4>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7ff fcce 	bl	8003eac <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7ff fcca 	bl	8003eac <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1ec      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x10c>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
 800455a:	4b46      	ldr	r3, [pc, #280]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b43      	ldr	r3, [pc, #268]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c0      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4939      	ldr	r1, [pc, #228]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_OscConfig+0x270>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7ff fc83 	bl	8003eac <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7ff fc7f 	bl	8003eac <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4927      	ldr	r1, [pc, #156]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x270>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7ff fc62 	bl	8003eac <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7ff fc5e 	bl	8003eac <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e180      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03a      	beq.n	800468c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d019      	beq.n	8004652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7ff fc42 	bl	8003eac <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462c:	f7ff fc3e 	bl	8003eac <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e160      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800464a:	2001      	movs	r0, #1
 800464c:	f000 face 	bl	8004bec <RCC_Delay>
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7ff fc28 	bl	8003eac <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465e:	e00f      	b.n	8004680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004660:	f7ff fc24 	bl	8003eac <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d908      	bls.n	8004680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e146      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	42420000 	.word	0x42420000
 800467c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	4b92      	ldr	r3, [pc, #584]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e9      	bne.n	8004660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a6 	beq.w	80047e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b8b      	ldr	r3, [pc, #556]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4a87      	ldr	r2, [pc, #540]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	61d3      	str	r3, [r2, #28]
 80046b6:	4b85      	ldr	r3, [pc, #532]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c6:	4b82      	ldr	r3, [pc, #520]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d118      	bne.n	8004704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d2:	4b7f      	ldr	r3, [pc, #508]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7e      	ldr	r2, [pc, #504]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046de:	f7ff fbe5 	bl	8003eac <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7ff fbe1 	bl	8003eac <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	; 0x64
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e103      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b75      	ldr	r3, [pc, #468]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x312>
 800470c:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a6e      	ldr	r2, [pc, #440]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6213      	str	r3, [r2, #32]
 8004718:	e02d      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x334>
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a69      	ldr	r2, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6213      	str	r3, [r2, #32]
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a66      	ldr	r2, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x356>
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a5d      	ldr	r2, [pc, #372]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800475e:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a5a      	ldr	r2, [pc, #360]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6213      	str	r3, [r2, #32]
 800476a:	4b58      	ldr	r3, [pc, #352]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a57      	ldr	r2, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7ff fb95 	bl	8003eac <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7ff fb91 	bl	8003eac <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0b1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCC_OscConfig+0x37e>
 80047a8:	e014      	b.n	80047d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7ff fb7f 	bl	8003eac <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7ff fb7b 	bl	8003eac <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e09b      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4a3b      	ldr	r2, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d061      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d146      	bne.n	8004892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7ff fb4f 	bl	8003eac <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7ff fb4b 	bl	8003eac <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e06d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4921      	ldr	r1, [pc, #132]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484c:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a19      	ldr	r1, [r3, #32]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	430b      	orrs	r3, r1
 800485e:	491b      	ldr	r1, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7ff fb1f 	bl	8003eac <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7ff fb1b 	bl	8003eac <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x46a>
 8004890:	e035      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7ff fb08 	bl	8003eac <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7ff fb04 	bl	8003eac <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e026      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x498>
 80048be:	e01e      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e019      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x500>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d0      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d910      	bls.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4965      	ldr	r1, [pc, #404]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a58      	ldr	r2, [pc, #352]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a52      	ldr	r2, [pc, #328]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800498a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d040      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e073      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06b      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4936      	ldr	r1, [pc, #216]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7ff fa56 	bl	8003eac <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7ff fa52 	bl	8003eac <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e053      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d210      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 0207 	bic.w	r2, r3, #7
 8004a42:	4922      	ldr	r1, [pc, #136]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCC_ClockConfig+0x1d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff f9b4 	bl	8003e28 <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	080068c4 	.word	0x080068c4
 8004ad8:	20000050 	.word	0x20000050
 8004adc:	20000084 	.word	0x20000084

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004afa:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x30>
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x36>
 8004b0e:	e027      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b12:	613b      	str	r3, [r7, #16]
      break;
 8004b14:	e027      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	0c9b      	lsrs	r3, r3, #18
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0c5b      	lsrs	r3, r3, #17
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a0d      	ldr	r2, [pc, #52]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b42:	fb03 f202 	mul.w	r2, r3, r2
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e004      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b54:	fb02 f303 	mul.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	613b      	str	r3, [r7, #16]
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b62:	613b      	str	r3, [r7, #16]
      break;
 8004b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b66:	693b      	ldr	r3, [r7, #16]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	007a1200 	.word	0x007a1200
 8004b7c:	080068dc 	.word	0x080068dc
 8004b80:	080068ec 	.word	0x080068ec
 8004b84:	003d0900 	.word	0x003d0900

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b02      	ldr	r3, [pc, #8]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	20000050 	.word	0x20000050

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff2 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	080068d4 	.word	0x080068d4

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bc8:	f7ff ffde 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	0adb      	lsrs	r3, r3, #11
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	080068d4 	.word	0x080068d4

08004bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <RCC_Delay+0x34>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <RCC_Delay+0x38>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a5b      	lsrs	r3, r3, #9
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c08:	bf00      	nop
  }
  while (Delay --);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	60fa      	str	r2, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f9      	bne.n	8004c08 <RCC_Delay+0x1c>
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	20000050 	.word	0x20000050
 8004c24:	10624dd3 	.word	0x10624dd3

08004c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e076      	b.n	8004d28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	d009      	beq.n	8004c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
 8004c52:	e005      	b.n	8004c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fb fd74 	bl	8000768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	ea42 0103 	orr.w	r1, r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	0c1a      	lsrs	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f002 0204 	and.w	r2, r2, #4
 8004d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e042      	b.n	8004dc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fb fd50 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2224      	movs	r2, #36	; 0x24
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f91d 	bl	8004fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d16d      	bne.n	8004ecc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_UART_Transmit+0x2c>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e066      	b.n	8004ece <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2221      	movs	r2, #33	; 0x21
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e0e:	f7ff f84d 	bl	8003eac <HAL_GetTick>
 8004e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	88fa      	ldrh	r2, [r7, #6]
 8004e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e28:	d108      	bne.n	8004e3c <HAL_UART_Transmit+0x6c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	e003      	b.n	8004e44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e44:	e02a      	b.n	8004e9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f840 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e036      	b.n	8004ece <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	3302      	adds	r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e007      	b.n	8004e8e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1cf      	bne.n	8004e46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f810 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b090      	sub	sp, #64	; 0x40
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee6:	e050      	b.n	8004f8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d04c      	beq.n	8004f8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef6:	f7fe ffd9 	bl	8003eac <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d241      	bcs.n	8004f8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f26:	637a      	str	r2, [r7, #52]	; 0x34
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3314      	adds	r3, #20
 8004f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3314      	adds	r3, #20
 8004f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f5a:	623a      	str	r2, [r7, #32]
 8004f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e00f      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4013      	ands	r3, r2
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d09f      	beq.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3740      	adds	r7, #64	; 0x40
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fee:	f023 030c 	bic.w	r3, r3, #12
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <UART_SetConfig+0x114>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7ff fdd2 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	e002      	b.n	800502a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005024:	f7ff fdba 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 8005028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009a      	lsls	r2, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <UART_SetConfig+0x118>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	0119      	lsls	r1, r3, #4
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009a      	lsls	r2, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005060:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <UART_SetConfig+0x118>)
 8005062:	fba3 0302 	umull	r0, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2064      	movs	r0, #100	; 0x64
 800506a:	fb00 f303 	mul.w	r3, r0, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	3332      	adds	r3, #50	; 0x32
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <UART_SetConfig+0x118>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005080:	4419      	add	r1, r3
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009a      	lsls	r2, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <UART_SetConfig+0x118>)
 800509a:	fba3 0302 	umull	r0, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	2064      	movs	r0, #100	; 0x64
 80050a2:	fb00 f303 	mul.w	r3, r0, r3
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	3332      	adds	r3, #50	; 0x32
 80050ac:	4a07      	ldr	r2, [pc, #28]	; (80050cc <UART_SetConfig+0x118>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	f003 020f 	and.w	r2, r3, #15
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	440a      	add	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40013800 	.word	0x40013800
 80050cc:	51eb851f 	.word	0x51eb851f

080050d0 <__errno>:
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <__errno+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	2000008c 	.word	0x2000008c

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	2600      	movs	r6, #0
 80050e0:	4d0c      	ldr	r5, [pc, #48]	; (8005114 <__libc_init_array+0x38>)
 80050e2:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	f001 fa50 	bl	8006590 <_init>
 80050f0:	2600      	movs	r6, #0
 80050f2:	4d0a      	ldr	r5, [pc, #40]	; (800511c <__libc_init_array+0x40>)
 80050f4:	4c0a      	ldr	r4, [pc, #40]	; (8005120 <__libc_init_array+0x44>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f855 3b04 	ldr.w	r3, [r5], #4
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f855 3b04 	ldr.w	r3, [r5], #4
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	08006988 	.word	0x08006988
 8005118:	08006988 	.word	0x08006988
 800511c:	08006988 	.word	0x08006988
 8005120:	0800698c 	.word	0x0800698c

08005124 <memcpy>:
 8005124:	440a      	add	r2, r1
 8005126:	4291      	cmp	r1, r2
 8005128:	f100 33ff 	add.w	r3, r0, #4294967295
 800512c:	d100      	bne.n	8005130 <memcpy+0xc>
 800512e:	4770      	bx	lr
 8005130:	b510      	push	{r4, lr}
 8005132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005136:	4291      	cmp	r1, r2
 8005138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800513c:	d1f9      	bne.n	8005132 <memcpy+0xe>
 800513e:	bd10      	pop	{r4, pc}

08005140 <memset>:
 8005140:	4603      	mov	r3, r0
 8005142:	4402      	add	r2, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <iprintf>:
 8005150:	b40f      	push	{r0, r1, r2, r3}
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <iprintf+0x2c>)
 8005154:	b513      	push	{r0, r1, r4, lr}
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	b124      	cbz	r4, 8005164 <iprintf+0x14>
 800515a:	69a3      	ldr	r3, [r4, #24]
 800515c:	b913      	cbnz	r3, 8005164 <iprintf+0x14>
 800515e:	4620      	mov	r0, r4
 8005160:	f000 fac2 	bl	80056e8 <__sinit>
 8005164:	ab05      	add	r3, sp, #20
 8005166:	4620      	mov	r0, r4
 8005168:	9a04      	ldr	r2, [sp, #16]
 800516a:	68a1      	ldr	r1, [r4, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	f000 fe21 	bl	8005db4 <_vfiprintf_r>
 8005172:	b002      	add	sp, #8
 8005174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005178:	b004      	add	sp, #16
 800517a:	4770      	bx	lr
 800517c:	2000008c 	.word	0x2000008c

08005180 <_puts_r>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	460e      	mov	r6, r1
 8005184:	4605      	mov	r5, r0
 8005186:	b118      	cbz	r0, 8005190 <_puts_r+0x10>
 8005188:	6983      	ldr	r3, [r0, #24]
 800518a:	b90b      	cbnz	r3, 8005190 <_puts_r+0x10>
 800518c:	f000 faac 	bl	80056e8 <__sinit>
 8005190:	69ab      	ldr	r3, [r5, #24]
 8005192:	68ac      	ldr	r4, [r5, #8]
 8005194:	b913      	cbnz	r3, 800519c <_puts_r+0x1c>
 8005196:	4628      	mov	r0, r5
 8005198:	f000 faa6 	bl	80056e8 <__sinit>
 800519c:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <_puts_r+0xd0>)
 800519e:	429c      	cmp	r4, r3
 80051a0:	d120      	bne.n	80051e4 <_puts_r+0x64>
 80051a2:	686c      	ldr	r4, [r5, #4]
 80051a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a6:	07db      	lsls	r3, r3, #31
 80051a8:	d405      	bmi.n	80051b6 <_puts_r+0x36>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	0598      	lsls	r0, r3, #22
 80051ae:	d402      	bmi.n	80051b6 <_puts_r+0x36>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f000 fb37 	bl	8005824 <__retarget_lock_acquire_recursive>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	0719      	lsls	r1, r3, #28
 80051ba:	d51d      	bpl.n	80051f8 <_puts_r+0x78>
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	b1db      	cbz	r3, 80051f8 <_puts_r+0x78>
 80051c0:	3e01      	subs	r6, #1
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051c8:	3b01      	subs	r3, #1
 80051ca:	60a3      	str	r3, [r4, #8]
 80051cc:	bb39      	cbnz	r1, 800521e <_puts_r+0x9e>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da38      	bge.n	8005244 <_puts_r+0xc4>
 80051d2:	4622      	mov	r2, r4
 80051d4:	210a      	movs	r1, #10
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 f8b0 	bl	800533c <__swbuf_r>
 80051dc:	3001      	adds	r0, #1
 80051de:	d011      	beq.n	8005204 <_puts_r+0x84>
 80051e0:	250a      	movs	r5, #10
 80051e2:	e011      	b.n	8005208 <_puts_r+0x88>
 80051e4:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <_puts_r+0xd4>)
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d101      	bne.n	80051ee <_puts_r+0x6e>
 80051ea:	68ac      	ldr	r4, [r5, #8]
 80051ec:	e7da      	b.n	80051a4 <_puts_r+0x24>
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <_puts_r+0xd8>)
 80051f0:	429c      	cmp	r4, r3
 80051f2:	bf08      	it	eq
 80051f4:	68ec      	ldreq	r4, [r5, #12]
 80051f6:	e7d5      	b.n	80051a4 <_puts_r+0x24>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 f8f0 	bl	80053e0 <__swsetup_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	d0dd      	beq.n	80051c0 <_puts_r+0x40>
 8005204:	f04f 35ff 	mov.w	r5, #4294967295
 8005208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800520a:	07da      	lsls	r2, r3, #31
 800520c:	d405      	bmi.n	800521a <_puts_r+0x9a>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	059b      	lsls	r3, r3, #22
 8005212:	d402      	bmi.n	800521a <_puts_r+0x9a>
 8005214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005216:	f000 fb06 	bl	8005826 <__retarget_lock_release_recursive>
 800521a:	4628      	mov	r0, r5
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	2b00      	cmp	r3, #0
 8005220:	da04      	bge.n	800522c <_puts_r+0xac>
 8005222:	69a2      	ldr	r2, [r4, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	dc06      	bgt.n	8005236 <_puts_r+0xb6>
 8005228:	290a      	cmp	r1, #10
 800522a:	d004      	beq.n	8005236 <_puts_r+0xb6>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	6022      	str	r2, [r4, #0]
 8005232:	7019      	strb	r1, [r3, #0]
 8005234:	e7c5      	b.n	80051c2 <_puts_r+0x42>
 8005236:	4622      	mov	r2, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f87f 	bl	800533c <__swbuf_r>
 800523e:	3001      	adds	r0, #1
 8005240:	d1bf      	bne.n	80051c2 <_puts_r+0x42>
 8005242:	e7df      	b.n	8005204 <_puts_r+0x84>
 8005244:	250a      	movs	r5, #10
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	6022      	str	r2, [r4, #0]
 800524c:	701d      	strb	r5, [r3, #0]
 800524e:	e7db      	b.n	8005208 <_puts_r+0x88>
 8005250:	08006914 	.word	0x08006914
 8005254:	08006934 	.word	0x08006934
 8005258:	080068f4 	.word	0x080068f4

0800525c <puts>:
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <puts+0xc>)
 800525e:	4601      	mov	r1, r0
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	f7ff bf8d 	b.w	8005180 <_puts_r>
 8005266:	bf00      	nop
 8005268:	2000008c 	.word	0x2000008c

0800526c <sniprintf>:
 800526c:	b40c      	push	{r2, r3}
 800526e:	b530      	push	{r4, r5, lr}
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <sniprintf+0x64>)
 8005272:	1e0c      	subs	r4, r1, #0
 8005274:	681d      	ldr	r5, [r3, #0]
 8005276:	b09d      	sub	sp, #116	; 0x74
 8005278:	da08      	bge.n	800528c <sniprintf+0x20>
 800527a:	238b      	movs	r3, #139	; 0x8b
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	b01d      	add	sp, #116	; 0x74
 8005284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005288:	b002      	add	sp, #8
 800528a:	4770      	bx	lr
 800528c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005290:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005294:	bf0c      	ite	eq
 8005296:	4623      	moveq	r3, r4
 8005298:	f104 33ff 	addne.w	r3, r4, #4294967295
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a4:	9002      	str	r0, [sp, #8]
 80052a6:	9006      	str	r0, [sp, #24]
 80052a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052ac:	4628      	mov	r0, r5
 80052ae:	ab21      	add	r3, sp, #132	; 0x84
 80052b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052b2:	a902      	add	r1, sp, #8
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	f000 fc55 	bl	8005b64 <_svfiprintf_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	bfbc      	itt	lt
 80052be:	238b      	movlt	r3, #139	; 0x8b
 80052c0:	602b      	strlt	r3, [r5, #0]
 80052c2:	2c00      	cmp	r4, #0
 80052c4:	d0dd      	beq.n	8005282 <sniprintf+0x16>
 80052c6:	2200      	movs	r2, #0
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e7d9      	b.n	8005282 <sniprintf+0x16>
 80052ce:	bf00      	nop
 80052d0:	2000008c 	.word	0x2000008c

080052d4 <siprintf>:
 80052d4:	b40e      	push	{r1, r2, r3}
 80052d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052da:	b500      	push	{lr}
 80052dc:	b09c      	sub	sp, #112	; 0x70
 80052de:	ab1d      	add	r3, sp, #116	; 0x74
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	9006      	str	r0, [sp, #24]
 80052e4:	9107      	str	r1, [sp, #28]
 80052e6:	9104      	str	r1, [sp, #16]
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <siprintf+0x38>)
 80052ea:	4909      	ldr	r1, [pc, #36]	; (8005310 <siprintf+0x3c>)
 80052ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f0:	9105      	str	r1, [sp, #20]
 80052f2:	6800      	ldr	r0, [r0, #0]
 80052f4:	a902      	add	r1, sp, #8
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	f000 fc34 	bl	8005b64 <_svfiprintf_r>
 80052fc:	2200      	movs	r2, #0
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	b01c      	add	sp, #112	; 0x70
 8005304:	f85d eb04 	ldr.w	lr, [sp], #4
 8005308:	b003      	add	sp, #12
 800530a:	4770      	bx	lr
 800530c:	2000008c 	.word	0x2000008c
 8005310:	ffff0208 	.word	0xffff0208

08005314 <strncmp>:
 8005314:	4603      	mov	r3, r0
 8005316:	b510      	push	{r4, lr}
 8005318:	b172      	cbz	r2, 8005338 <strncmp+0x24>
 800531a:	3901      	subs	r1, #1
 800531c:	1884      	adds	r4, r0, r2
 800531e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005322:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005326:	4290      	cmp	r0, r2
 8005328:	d101      	bne.n	800532e <strncmp+0x1a>
 800532a:	42a3      	cmp	r3, r4
 800532c:	d101      	bne.n	8005332 <strncmp+0x1e>
 800532e:	1a80      	subs	r0, r0, r2
 8005330:	bd10      	pop	{r4, pc}
 8005332:	2800      	cmp	r0, #0
 8005334:	d1f3      	bne.n	800531e <strncmp+0xa>
 8005336:	e7fa      	b.n	800532e <strncmp+0x1a>
 8005338:	4610      	mov	r0, r2
 800533a:	e7f9      	b.n	8005330 <strncmp+0x1c>

0800533c <__swbuf_r>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	460e      	mov	r6, r1
 8005340:	4614      	mov	r4, r2
 8005342:	4605      	mov	r5, r0
 8005344:	b118      	cbz	r0, 800534e <__swbuf_r+0x12>
 8005346:	6983      	ldr	r3, [r0, #24]
 8005348:	b90b      	cbnz	r3, 800534e <__swbuf_r+0x12>
 800534a:	f000 f9cd 	bl	80056e8 <__sinit>
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <__swbuf_r+0x98>)
 8005350:	429c      	cmp	r4, r3
 8005352:	d12b      	bne.n	80053ac <__swbuf_r+0x70>
 8005354:	686c      	ldr	r4, [r5, #4]
 8005356:	69a3      	ldr	r3, [r4, #24]
 8005358:	60a3      	str	r3, [r4, #8]
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	071a      	lsls	r2, r3, #28
 800535e:	d52f      	bpl.n	80053c0 <__swbuf_r+0x84>
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	b36b      	cbz	r3, 80053c0 <__swbuf_r+0x84>
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	6820      	ldr	r0, [r4, #0]
 8005368:	b2f6      	uxtb	r6, r6
 800536a:	1ac0      	subs	r0, r0, r3
 800536c:	6963      	ldr	r3, [r4, #20]
 800536e:	4637      	mov	r7, r6
 8005370:	4283      	cmp	r3, r0
 8005372:	dc04      	bgt.n	800537e <__swbuf_r+0x42>
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f922 	bl	80055c0 <_fflush_r>
 800537c:	bb30      	cbnz	r0, 80053cc <__swbuf_r+0x90>
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	3001      	adds	r0, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	6022      	str	r2, [r4, #0]
 800538c:	701e      	strb	r6, [r3, #0]
 800538e:	6963      	ldr	r3, [r4, #20]
 8005390:	4283      	cmp	r3, r0
 8005392:	d004      	beq.n	800539e <__swbuf_r+0x62>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	07db      	lsls	r3, r3, #31
 8005398:	d506      	bpl.n	80053a8 <__swbuf_r+0x6c>
 800539a:	2e0a      	cmp	r6, #10
 800539c:	d104      	bne.n	80053a8 <__swbuf_r+0x6c>
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 f90d 	bl	80055c0 <_fflush_r>
 80053a6:	b988      	cbnz	r0, 80053cc <__swbuf_r+0x90>
 80053a8:	4638      	mov	r0, r7
 80053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <__swbuf_r+0x9c>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d101      	bne.n	80053b6 <__swbuf_r+0x7a>
 80053b2:	68ac      	ldr	r4, [r5, #8]
 80053b4:	e7cf      	b.n	8005356 <__swbuf_r+0x1a>
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <__swbuf_r+0xa0>)
 80053b8:	429c      	cmp	r4, r3
 80053ba:	bf08      	it	eq
 80053bc:	68ec      	ldreq	r4, [r5, #12]
 80053be:	e7ca      	b.n	8005356 <__swbuf_r+0x1a>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f80c 	bl	80053e0 <__swsetup_r>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d0cb      	beq.n	8005364 <__swbuf_r+0x28>
 80053cc:	f04f 37ff 	mov.w	r7, #4294967295
 80053d0:	e7ea      	b.n	80053a8 <__swbuf_r+0x6c>
 80053d2:	bf00      	nop
 80053d4:	08006914 	.word	0x08006914
 80053d8:	08006934 	.word	0x08006934
 80053dc:	080068f4 	.word	0x080068f4

080053e0 <__swsetup_r>:
 80053e0:	4b32      	ldr	r3, [pc, #200]	; (80054ac <__swsetup_r+0xcc>)
 80053e2:	b570      	push	{r4, r5, r6, lr}
 80053e4:	681d      	ldr	r5, [r3, #0]
 80053e6:	4606      	mov	r6, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	b125      	cbz	r5, 80053f6 <__swsetup_r+0x16>
 80053ec:	69ab      	ldr	r3, [r5, #24]
 80053ee:	b913      	cbnz	r3, 80053f6 <__swsetup_r+0x16>
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 f979 	bl	80056e8 <__sinit>
 80053f6:	4b2e      	ldr	r3, [pc, #184]	; (80054b0 <__swsetup_r+0xd0>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	d10f      	bne.n	800541c <__swsetup_r+0x3c>
 80053fc:	686c      	ldr	r4, [r5, #4]
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005404:	0719      	lsls	r1, r3, #28
 8005406:	d42c      	bmi.n	8005462 <__swsetup_r+0x82>
 8005408:	06dd      	lsls	r5, r3, #27
 800540a:	d411      	bmi.n	8005430 <__swsetup_r+0x50>
 800540c:	2309      	movs	r3, #9
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005414:	f04f 30ff 	mov.w	r0, #4294967295
 8005418:	81a3      	strh	r3, [r4, #12]
 800541a:	e03e      	b.n	800549a <__swsetup_r+0xba>
 800541c:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <__swsetup_r+0xd4>)
 800541e:	429c      	cmp	r4, r3
 8005420:	d101      	bne.n	8005426 <__swsetup_r+0x46>
 8005422:	68ac      	ldr	r4, [r5, #8]
 8005424:	e7eb      	b.n	80053fe <__swsetup_r+0x1e>
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <__swsetup_r+0xd8>)
 8005428:	429c      	cmp	r4, r3
 800542a:	bf08      	it	eq
 800542c:	68ec      	ldreq	r4, [r5, #12]
 800542e:	e7e6      	b.n	80053fe <__swsetup_r+0x1e>
 8005430:	0758      	lsls	r0, r3, #29
 8005432:	d512      	bpl.n	800545a <__swsetup_r+0x7a>
 8005434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005436:	b141      	cbz	r1, 800544a <__swsetup_r+0x6a>
 8005438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800543c:	4299      	cmp	r1, r3
 800543e:	d002      	beq.n	8005446 <__swsetup_r+0x66>
 8005440:	4630      	mov	r0, r6
 8005442:	f000 fa57 	bl	80058f4 <_free_r>
 8005446:	2300      	movs	r3, #0
 8005448:	6363      	str	r3, [r4, #52]	; 0x34
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	2300      	movs	r3, #0
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f043 0308 	orr.w	r3, r3, #8
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	b94b      	cbnz	r3, 800547a <__swsetup_r+0x9a>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800546c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005470:	d003      	beq.n	800547a <__swsetup_r+0x9a>
 8005472:	4621      	mov	r1, r4
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f9fd 	bl	8005874 <__smakebuf_r>
 800547a:	89a0      	ldrh	r0, [r4, #12]
 800547c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005480:	f010 0301 	ands.w	r3, r0, #1
 8005484:	d00a      	beq.n	800549c <__swsetup_r+0xbc>
 8005486:	2300      	movs	r3, #0
 8005488:	60a3      	str	r3, [r4, #8]
 800548a:	6963      	ldr	r3, [r4, #20]
 800548c:	425b      	negs	r3, r3
 800548e:	61a3      	str	r3, [r4, #24]
 8005490:	6923      	ldr	r3, [r4, #16]
 8005492:	b943      	cbnz	r3, 80054a6 <__swsetup_r+0xc6>
 8005494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005498:	d1ba      	bne.n	8005410 <__swsetup_r+0x30>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	0781      	lsls	r1, r0, #30
 800549e:	bf58      	it	pl
 80054a0:	6963      	ldrpl	r3, [r4, #20]
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	e7f4      	b.n	8005490 <__swsetup_r+0xb0>
 80054a6:	2000      	movs	r0, #0
 80054a8:	e7f7      	b.n	800549a <__swsetup_r+0xba>
 80054aa:	bf00      	nop
 80054ac:	2000008c 	.word	0x2000008c
 80054b0:	08006914 	.word	0x08006914
 80054b4:	08006934 	.word	0x08006934
 80054b8:	080068f4 	.word	0x080068f4

080054bc <__sflush_r>:
 80054bc:	898a      	ldrh	r2, [r1, #12]
 80054be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c0:	4605      	mov	r5, r0
 80054c2:	0710      	lsls	r0, r2, #28
 80054c4:	460c      	mov	r4, r1
 80054c6:	d457      	bmi.n	8005578 <__sflush_r+0xbc>
 80054c8:	684b      	ldr	r3, [r1, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	dc04      	bgt.n	80054d8 <__sflush_r+0x1c>
 80054ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc01      	bgt.n	80054d8 <__sflush_r+0x1c>
 80054d4:	2000      	movs	r0, #0
 80054d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054da:	2e00      	cmp	r6, #0
 80054dc:	d0fa      	beq.n	80054d4 <__sflush_r+0x18>
 80054de:	2300      	movs	r3, #0
 80054e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054e4:	682f      	ldr	r7, [r5, #0]
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	d032      	beq.n	8005550 <__sflush_r+0x94>
 80054ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	075a      	lsls	r2, r3, #29
 80054f0:	d505      	bpl.n	80054fe <__sflush_r+0x42>
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	1ac0      	subs	r0, r0, r3
 80054f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054f8:	b10b      	cbz	r3, 80054fe <__sflush_r+0x42>
 80054fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054fc:	1ac0      	subs	r0, r0, r3
 80054fe:	2300      	movs	r3, #0
 8005500:	4602      	mov	r2, r0
 8005502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005504:	4628      	mov	r0, r5
 8005506:	6a21      	ldr	r1, [r4, #32]
 8005508:	47b0      	blx	r6
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	d106      	bne.n	800551e <__sflush_r+0x62>
 8005510:	6829      	ldr	r1, [r5, #0]
 8005512:	291d      	cmp	r1, #29
 8005514:	d82c      	bhi.n	8005570 <__sflush_r+0xb4>
 8005516:	4a29      	ldr	r2, [pc, #164]	; (80055bc <__sflush_r+0x100>)
 8005518:	40ca      	lsrs	r2, r1
 800551a:	07d6      	lsls	r6, r2, #31
 800551c:	d528      	bpl.n	8005570 <__sflush_r+0xb4>
 800551e:	2200      	movs	r2, #0
 8005520:	6062      	str	r2, [r4, #4]
 8005522:	6922      	ldr	r2, [r4, #16]
 8005524:	04d9      	lsls	r1, r3, #19
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	d504      	bpl.n	8005534 <__sflush_r+0x78>
 800552a:	1c42      	adds	r2, r0, #1
 800552c:	d101      	bne.n	8005532 <__sflush_r+0x76>
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	b903      	cbnz	r3, 8005534 <__sflush_r+0x78>
 8005532:	6560      	str	r0, [r4, #84]	; 0x54
 8005534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005536:	602f      	str	r7, [r5, #0]
 8005538:	2900      	cmp	r1, #0
 800553a:	d0cb      	beq.n	80054d4 <__sflush_r+0x18>
 800553c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005540:	4299      	cmp	r1, r3
 8005542:	d002      	beq.n	800554a <__sflush_r+0x8e>
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f9d5 	bl	80058f4 <_free_r>
 800554a:	2000      	movs	r0, #0
 800554c:	6360      	str	r0, [r4, #52]	; 0x34
 800554e:	e7c2      	b.n	80054d6 <__sflush_r+0x1a>
 8005550:	6a21      	ldr	r1, [r4, #32]
 8005552:	2301      	movs	r3, #1
 8005554:	4628      	mov	r0, r5
 8005556:	47b0      	blx	r6
 8005558:	1c41      	adds	r1, r0, #1
 800555a:	d1c7      	bne.n	80054ec <__sflush_r+0x30>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0c4      	beq.n	80054ec <__sflush_r+0x30>
 8005562:	2b1d      	cmp	r3, #29
 8005564:	d001      	beq.n	800556a <__sflush_r+0xae>
 8005566:	2b16      	cmp	r3, #22
 8005568:	d101      	bne.n	800556e <__sflush_r+0xb2>
 800556a:	602f      	str	r7, [r5, #0]
 800556c:	e7b2      	b.n	80054d4 <__sflush_r+0x18>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	e7ae      	b.n	80054d6 <__sflush_r+0x1a>
 8005578:	690f      	ldr	r7, [r1, #16]
 800557a:	2f00      	cmp	r7, #0
 800557c:	d0aa      	beq.n	80054d4 <__sflush_r+0x18>
 800557e:	0793      	lsls	r3, r2, #30
 8005580:	bf18      	it	ne
 8005582:	2300      	movne	r3, #0
 8005584:	680e      	ldr	r6, [r1, #0]
 8005586:	bf08      	it	eq
 8005588:	694b      	ldreq	r3, [r1, #20]
 800558a:	1bf6      	subs	r6, r6, r7
 800558c:	600f      	str	r7, [r1, #0]
 800558e:	608b      	str	r3, [r1, #8]
 8005590:	2e00      	cmp	r6, #0
 8005592:	dd9f      	ble.n	80054d4 <__sflush_r+0x18>
 8005594:	4633      	mov	r3, r6
 8005596:	463a      	mov	r2, r7
 8005598:	4628      	mov	r0, r5
 800559a:	6a21      	ldr	r1, [r4, #32]
 800559c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80055a0:	47e0      	blx	ip
 80055a2:	2800      	cmp	r0, #0
 80055a4:	dc06      	bgt.n	80055b4 <__sflush_r+0xf8>
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	e790      	b.n	80054d6 <__sflush_r+0x1a>
 80055b4:	4407      	add	r7, r0
 80055b6:	1a36      	subs	r6, r6, r0
 80055b8:	e7ea      	b.n	8005590 <__sflush_r+0xd4>
 80055ba:	bf00      	nop
 80055bc:	20400001 	.word	0x20400001

080055c0 <_fflush_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	690b      	ldr	r3, [r1, #16]
 80055c4:	4605      	mov	r5, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	b913      	cbnz	r3, 80055d0 <_fflush_r+0x10>
 80055ca:	2500      	movs	r5, #0
 80055cc:	4628      	mov	r0, r5
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	b118      	cbz	r0, 80055da <_fflush_r+0x1a>
 80055d2:	6983      	ldr	r3, [r0, #24]
 80055d4:	b90b      	cbnz	r3, 80055da <_fflush_r+0x1a>
 80055d6:	f000 f887 	bl	80056e8 <__sinit>
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <_fflush_r+0x6c>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d11b      	bne.n	8005618 <_fflush_r+0x58>
 80055e0:	686c      	ldr	r4, [r5, #4]
 80055e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0ef      	beq.n	80055ca <_fflush_r+0xa>
 80055ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055ec:	07d0      	lsls	r0, r2, #31
 80055ee:	d404      	bmi.n	80055fa <_fflush_r+0x3a>
 80055f0:	0599      	lsls	r1, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_fflush_r+0x3a>
 80055f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f6:	f000 f915 	bl	8005824 <__retarget_lock_acquire_recursive>
 80055fa:	4628      	mov	r0, r5
 80055fc:	4621      	mov	r1, r4
 80055fe:	f7ff ff5d 	bl	80054bc <__sflush_r>
 8005602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005604:	4605      	mov	r5, r0
 8005606:	07da      	lsls	r2, r3, #31
 8005608:	d4e0      	bmi.n	80055cc <_fflush_r+0xc>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	059b      	lsls	r3, r3, #22
 800560e:	d4dd      	bmi.n	80055cc <_fflush_r+0xc>
 8005610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005612:	f000 f908 	bl	8005826 <__retarget_lock_release_recursive>
 8005616:	e7d9      	b.n	80055cc <_fflush_r+0xc>
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <_fflush_r+0x70>)
 800561a:	429c      	cmp	r4, r3
 800561c:	d101      	bne.n	8005622 <_fflush_r+0x62>
 800561e:	68ac      	ldr	r4, [r5, #8]
 8005620:	e7df      	b.n	80055e2 <_fflush_r+0x22>
 8005622:	4b04      	ldr	r3, [pc, #16]	; (8005634 <_fflush_r+0x74>)
 8005624:	429c      	cmp	r4, r3
 8005626:	bf08      	it	eq
 8005628:	68ec      	ldreq	r4, [r5, #12]
 800562a:	e7da      	b.n	80055e2 <_fflush_r+0x22>
 800562c:	08006914 	.word	0x08006914
 8005630:	08006934 	.word	0x08006934
 8005634:	080068f4 	.word	0x080068f4

08005638 <std>:
 8005638:	2300      	movs	r3, #0
 800563a:	b510      	push	{r4, lr}
 800563c:	4604      	mov	r4, r0
 800563e:	e9c0 3300 	strd	r3, r3, [r0]
 8005642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005646:	6083      	str	r3, [r0, #8]
 8005648:	8181      	strh	r1, [r0, #12]
 800564a:	6643      	str	r3, [r0, #100]	; 0x64
 800564c:	81c2      	strh	r2, [r0, #14]
 800564e:	6183      	str	r3, [r0, #24]
 8005650:	4619      	mov	r1, r3
 8005652:	2208      	movs	r2, #8
 8005654:	305c      	adds	r0, #92	; 0x5c
 8005656:	f7ff fd73 	bl	8005140 <memset>
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <std+0x38>)
 800565c:	6224      	str	r4, [r4, #32]
 800565e:	6263      	str	r3, [r4, #36]	; 0x24
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <std+0x3c>)
 8005662:	62a3      	str	r3, [r4, #40]	; 0x28
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <std+0x40>)
 8005666:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <std+0x44>)
 800566a:	6323      	str	r3, [r4, #48]	; 0x30
 800566c:	bd10      	pop	{r4, pc}
 800566e:	bf00      	nop
 8005670:	08006361 	.word	0x08006361
 8005674:	08006383 	.word	0x08006383
 8005678:	080063bb 	.word	0x080063bb
 800567c:	080063df 	.word	0x080063df

08005680 <_cleanup_r>:
 8005680:	4901      	ldr	r1, [pc, #4]	; (8005688 <_cleanup_r+0x8>)
 8005682:	f000 b8af 	b.w	80057e4 <_fwalk_reent>
 8005686:	bf00      	nop
 8005688:	080055c1 	.word	0x080055c1

0800568c <__sfmoreglue>:
 800568c:	2268      	movs	r2, #104	; 0x68
 800568e:	b570      	push	{r4, r5, r6, lr}
 8005690:	1e4d      	subs	r5, r1, #1
 8005692:	4355      	muls	r5, r2
 8005694:	460e      	mov	r6, r1
 8005696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800569a:	f000 f993 	bl	80059c4 <_malloc_r>
 800569e:	4604      	mov	r4, r0
 80056a0:	b140      	cbz	r0, 80056b4 <__sfmoreglue+0x28>
 80056a2:	2100      	movs	r1, #0
 80056a4:	e9c0 1600 	strd	r1, r6, [r0]
 80056a8:	300c      	adds	r0, #12
 80056aa:	60a0      	str	r0, [r4, #8]
 80056ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056b0:	f7ff fd46 	bl	8005140 <memset>
 80056b4:	4620      	mov	r0, r4
 80056b6:	bd70      	pop	{r4, r5, r6, pc}

080056b8 <__sfp_lock_acquire>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__sfp_lock_acquire+0x8>)
 80056ba:	f000 b8b3 	b.w	8005824 <__retarget_lock_acquire_recursive>
 80056be:	bf00      	nop
 80056c0:	200009e1 	.word	0x200009e1

080056c4 <__sfp_lock_release>:
 80056c4:	4801      	ldr	r0, [pc, #4]	; (80056cc <__sfp_lock_release+0x8>)
 80056c6:	f000 b8ae 	b.w	8005826 <__retarget_lock_release_recursive>
 80056ca:	bf00      	nop
 80056cc:	200009e1 	.word	0x200009e1

080056d0 <__sinit_lock_acquire>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__sinit_lock_acquire+0x8>)
 80056d2:	f000 b8a7 	b.w	8005824 <__retarget_lock_acquire_recursive>
 80056d6:	bf00      	nop
 80056d8:	200009e2 	.word	0x200009e2

080056dc <__sinit_lock_release>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__sinit_lock_release+0x8>)
 80056de:	f000 b8a2 	b.w	8005826 <__retarget_lock_release_recursive>
 80056e2:	bf00      	nop
 80056e4:	200009e2 	.word	0x200009e2

080056e8 <__sinit>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	f7ff fff0 	bl	80056d0 <__sinit_lock_acquire>
 80056f0:	69a3      	ldr	r3, [r4, #24]
 80056f2:	b11b      	cbz	r3, 80056fc <__sinit+0x14>
 80056f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f8:	f7ff bff0 	b.w	80056dc <__sinit_lock_release>
 80056fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005700:	6523      	str	r3, [r4, #80]	; 0x50
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <__sinit+0x68>)
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <__sinit+0x6c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	62a2      	str	r2, [r4, #40]	; 0x28
 800570a:	42a3      	cmp	r3, r4
 800570c:	bf08      	it	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	4620      	mov	r0, r4
 8005712:	bf08      	it	eq
 8005714:	61a3      	streq	r3, [r4, #24]
 8005716:	f000 f81f 	bl	8005758 <__sfp>
 800571a:	6060      	str	r0, [r4, #4]
 800571c:	4620      	mov	r0, r4
 800571e:	f000 f81b 	bl	8005758 <__sfp>
 8005722:	60a0      	str	r0, [r4, #8]
 8005724:	4620      	mov	r0, r4
 8005726:	f000 f817 	bl	8005758 <__sfp>
 800572a:	2200      	movs	r2, #0
 800572c:	2104      	movs	r1, #4
 800572e:	60e0      	str	r0, [r4, #12]
 8005730:	6860      	ldr	r0, [r4, #4]
 8005732:	f7ff ff81 	bl	8005638 <std>
 8005736:	2201      	movs	r2, #1
 8005738:	2109      	movs	r1, #9
 800573a:	68a0      	ldr	r0, [r4, #8]
 800573c:	f7ff ff7c 	bl	8005638 <std>
 8005740:	2202      	movs	r2, #2
 8005742:	2112      	movs	r1, #18
 8005744:	68e0      	ldr	r0, [r4, #12]
 8005746:	f7ff ff77 	bl	8005638 <std>
 800574a:	2301      	movs	r3, #1
 800574c:	61a3      	str	r3, [r4, #24]
 800574e:	e7d1      	b.n	80056f4 <__sinit+0xc>
 8005750:	080068f0 	.word	0x080068f0
 8005754:	08005681 	.word	0x08005681

08005758 <__sfp>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	4607      	mov	r7, r0
 800575c:	f7ff ffac 	bl	80056b8 <__sfp_lock_acquire>
 8005760:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <__sfp+0x84>)
 8005762:	681e      	ldr	r6, [r3, #0]
 8005764:	69b3      	ldr	r3, [r6, #24]
 8005766:	b913      	cbnz	r3, 800576e <__sfp+0x16>
 8005768:	4630      	mov	r0, r6
 800576a:	f7ff ffbd 	bl	80056e8 <__sinit>
 800576e:	3648      	adds	r6, #72	; 0x48
 8005770:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005774:	3b01      	subs	r3, #1
 8005776:	d503      	bpl.n	8005780 <__sfp+0x28>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	b30b      	cbz	r3, 80057c0 <__sfp+0x68>
 800577c:	6836      	ldr	r6, [r6, #0]
 800577e:	e7f7      	b.n	8005770 <__sfp+0x18>
 8005780:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005784:	b9d5      	cbnz	r5, 80057bc <__sfp+0x64>
 8005786:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <__sfp+0x88>)
 8005788:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800578c:	60e3      	str	r3, [r4, #12]
 800578e:	6665      	str	r5, [r4, #100]	; 0x64
 8005790:	f000 f847 	bl	8005822 <__retarget_lock_init_recursive>
 8005794:	f7ff ff96 	bl	80056c4 <__sfp_lock_release>
 8005798:	2208      	movs	r2, #8
 800579a:	4629      	mov	r1, r5
 800579c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057a4:	6025      	str	r5, [r4, #0]
 80057a6:	61a5      	str	r5, [r4, #24]
 80057a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057ac:	f7ff fcc8 	bl	8005140 <memset>
 80057b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b8:	4620      	mov	r0, r4
 80057ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057bc:	3468      	adds	r4, #104	; 0x68
 80057be:	e7d9      	b.n	8005774 <__sfp+0x1c>
 80057c0:	2104      	movs	r1, #4
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ff62 	bl	800568c <__sfmoreglue>
 80057c8:	4604      	mov	r4, r0
 80057ca:	6030      	str	r0, [r6, #0]
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d1d5      	bne.n	800577c <__sfp+0x24>
 80057d0:	f7ff ff78 	bl	80056c4 <__sfp_lock_release>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	e7ee      	b.n	80057b8 <__sfp+0x60>
 80057da:	bf00      	nop
 80057dc:	080068f0 	.word	0x080068f0
 80057e0:	ffff0001 	.word	0xffff0001

080057e4 <_fwalk_reent>:
 80057e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e8:	4606      	mov	r6, r0
 80057ea:	4688      	mov	r8, r1
 80057ec:	2700      	movs	r7, #0
 80057ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057f6:	f1b9 0901 	subs.w	r9, r9, #1
 80057fa:	d505      	bpl.n	8005808 <_fwalk_reent+0x24>
 80057fc:	6824      	ldr	r4, [r4, #0]
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d1f7      	bne.n	80057f2 <_fwalk_reent+0xe>
 8005802:	4638      	mov	r0, r7
 8005804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005808:	89ab      	ldrh	r3, [r5, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d907      	bls.n	800581e <_fwalk_reent+0x3a>
 800580e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005812:	3301      	adds	r3, #1
 8005814:	d003      	beq.n	800581e <_fwalk_reent+0x3a>
 8005816:	4629      	mov	r1, r5
 8005818:	4630      	mov	r0, r6
 800581a:	47c0      	blx	r8
 800581c:	4307      	orrs	r7, r0
 800581e:	3568      	adds	r5, #104	; 0x68
 8005820:	e7e9      	b.n	80057f6 <_fwalk_reent+0x12>

08005822 <__retarget_lock_init_recursive>:
 8005822:	4770      	bx	lr

08005824 <__retarget_lock_acquire_recursive>:
 8005824:	4770      	bx	lr

08005826 <__retarget_lock_release_recursive>:
 8005826:	4770      	bx	lr

08005828 <__swhatbuf_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	4614      	mov	r4, r2
 8005832:	2900      	cmp	r1, #0
 8005834:	461d      	mov	r5, r3
 8005836:	b096      	sub	sp, #88	; 0x58
 8005838:	da08      	bge.n	800584c <__swhatbuf_r+0x24>
 800583a:	2200      	movs	r2, #0
 800583c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005840:	602a      	str	r2, [r5, #0]
 8005842:	061a      	lsls	r2, r3, #24
 8005844:	d410      	bmi.n	8005868 <__swhatbuf_r+0x40>
 8005846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800584a:	e00e      	b.n	800586a <__swhatbuf_r+0x42>
 800584c:	466a      	mov	r2, sp
 800584e:	f000 fded 	bl	800642c <_fstat_r>
 8005852:	2800      	cmp	r0, #0
 8005854:	dbf1      	blt.n	800583a <__swhatbuf_r+0x12>
 8005856:	9a01      	ldr	r2, [sp, #4]
 8005858:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800585c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005860:	425a      	negs	r2, r3
 8005862:	415a      	adcs	r2, r3
 8005864:	602a      	str	r2, [r5, #0]
 8005866:	e7ee      	b.n	8005846 <__swhatbuf_r+0x1e>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	2000      	movs	r0, #0
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	b016      	add	sp, #88	; 0x58
 8005870:	bd70      	pop	{r4, r5, r6, pc}
	...

08005874 <__smakebuf_r>:
 8005874:	898b      	ldrh	r3, [r1, #12]
 8005876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005878:	079d      	lsls	r5, r3, #30
 800587a:	4606      	mov	r6, r0
 800587c:	460c      	mov	r4, r1
 800587e:	d507      	bpl.n	8005890 <__smakebuf_r+0x1c>
 8005880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	2301      	movs	r3, #1
 800588a:	6163      	str	r3, [r4, #20]
 800588c:	b002      	add	sp, #8
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	466a      	mov	r2, sp
 8005892:	ab01      	add	r3, sp, #4
 8005894:	f7ff ffc8 	bl	8005828 <__swhatbuf_r>
 8005898:	9900      	ldr	r1, [sp, #0]
 800589a:	4605      	mov	r5, r0
 800589c:	4630      	mov	r0, r6
 800589e:	f000 f891 	bl	80059c4 <_malloc_r>
 80058a2:	b948      	cbnz	r0, 80058b8 <__smakebuf_r+0x44>
 80058a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a8:	059a      	lsls	r2, r3, #22
 80058aa:	d4ef      	bmi.n	800588c <__smakebuf_r+0x18>
 80058ac:	f023 0303 	bic.w	r3, r3, #3
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	e7e3      	b.n	8005880 <__smakebuf_r+0xc>
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <__smakebuf_r+0x7c>)
 80058ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	6020      	str	r0, [r4, #0]
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	81a3      	strh	r3, [r4, #12]
 80058c6:	9b00      	ldr	r3, [sp, #0]
 80058c8:	6120      	str	r0, [r4, #16]
 80058ca:	6163      	str	r3, [r4, #20]
 80058cc:	9b01      	ldr	r3, [sp, #4]
 80058ce:	b15b      	cbz	r3, 80058e8 <__smakebuf_r+0x74>
 80058d0:	4630      	mov	r0, r6
 80058d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d6:	f000 fdbb 	bl	8006450 <_isatty_r>
 80058da:	b128      	cbz	r0, 80058e8 <__smakebuf_r+0x74>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	89a0      	ldrh	r0, [r4, #12]
 80058ea:	4305      	orrs	r5, r0
 80058ec:	81a5      	strh	r5, [r4, #12]
 80058ee:	e7cd      	b.n	800588c <__smakebuf_r+0x18>
 80058f0:	08005681 	.word	0x08005681

080058f4 <_free_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4605      	mov	r5, r0
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d040      	beq.n	800597e <_free_r+0x8a>
 80058fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005900:	1f0c      	subs	r4, r1, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	bfb8      	it	lt
 8005906:	18e4      	addlt	r4, r4, r3
 8005908:	f000 fdec 	bl	80064e4 <__malloc_lock>
 800590c:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <_free_r+0x8c>)
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	b933      	cbnz	r3, 8005920 <_free_r+0x2c>
 8005912:	6063      	str	r3, [r4, #4]
 8005914:	6014      	str	r4, [r2, #0]
 8005916:	4628      	mov	r0, r5
 8005918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591c:	f000 bde8 	b.w	80064f0 <__malloc_unlock>
 8005920:	42a3      	cmp	r3, r4
 8005922:	d908      	bls.n	8005936 <_free_r+0x42>
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	1821      	adds	r1, r4, r0
 8005928:	428b      	cmp	r3, r1
 800592a:	bf01      	itttt	eq
 800592c:	6819      	ldreq	r1, [r3, #0]
 800592e:	685b      	ldreq	r3, [r3, #4]
 8005930:	1809      	addeq	r1, r1, r0
 8005932:	6021      	streq	r1, [r4, #0]
 8005934:	e7ed      	b.n	8005912 <_free_r+0x1e>
 8005936:	461a      	mov	r2, r3
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b10b      	cbz	r3, 8005940 <_free_r+0x4c>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d9fa      	bls.n	8005936 <_free_r+0x42>
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	1850      	adds	r0, r2, r1
 8005944:	42a0      	cmp	r0, r4
 8005946:	d10b      	bne.n	8005960 <_free_r+0x6c>
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	4401      	add	r1, r0
 800594c:	1850      	adds	r0, r2, r1
 800594e:	4283      	cmp	r3, r0
 8005950:	6011      	str	r1, [r2, #0]
 8005952:	d1e0      	bne.n	8005916 <_free_r+0x22>
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4401      	add	r1, r0
 800595a:	6011      	str	r1, [r2, #0]
 800595c:	6053      	str	r3, [r2, #4]
 800595e:	e7da      	b.n	8005916 <_free_r+0x22>
 8005960:	d902      	bls.n	8005968 <_free_r+0x74>
 8005962:	230c      	movs	r3, #12
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	e7d6      	b.n	8005916 <_free_r+0x22>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	1821      	adds	r1, r4, r0
 800596c:	428b      	cmp	r3, r1
 800596e:	bf01      	itttt	eq
 8005970:	6819      	ldreq	r1, [r3, #0]
 8005972:	685b      	ldreq	r3, [r3, #4]
 8005974:	1809      	addeq	r1, r1, r0
 8005976:	6021      	streq	r1, [r4, #0]
 8005978:	6063      	str	r3, [r4, #4]
 800597a:	6054      	str	r4, [r2, #4]
 800597c:	e7cb      	b.n	8005916 <_free_r+0x22>
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	200009e4 	.word	0x200009e4

08005984 <sbrk_aligned>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4e0e      	ldr	r6, [pc, #56]	; (80059c0 <sbrk_aligned+0x3c>)
 8005988:	460c      	mov	r4, r1
 800598a:	6831      	ldr	r1, [r6, #0]
 800598c:	4605      	mov	r5, r0
 800598e:	b911      	cbnz	r1, 8005996 <sbrk_aligned+0x12>
 8005990:	f000 fcd6 	bl	8006340 <_sbrk_r>
 8005994:	6030      	str	r0, [r6, #0]
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fcd1 	bl	8006340 <_sbrk_r>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	d00a      	beq.n	80059b8 <sbrk_aligned+0x34>
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d007      	beq.n	80059bc <sbrk_aligned+0x38>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fcc6 	bl	8006340 <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d101      	bne.n	80059bc <sbrk_aligned+0x38>
 80059b8:	f04f 34ff 	mov.w	r4, #4294967295
 80059bc:	4620      	mov	r0, r4
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	200009e8 	.word	0x200009e8

080059c4 <_malloc_r>:
 80059c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c8:	1ccd      	adds	r5, r1, #3
 80059ca:	f025 0503 	bic.w	r5, r5, #3
 80059ce:	3508      	adds	r5, #8
 80059d0:	2d0c      	cmp	r5, #12
 80059d2:	bf38      	it	cc
 80059d4:	250c      	movcc	r5, #12
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	4607      	mov	r7, r0
 80059da:	db01      	blt.n	80059e0 <_malloc_r+0x1c>
 80059dc:	42a9      	cmp	r1, r5
 80059de:	d905      	bls.n	80059ec <_malloc_r+0x28>
 80059e0:	230c      	movs	r3, #12
 80059e2:	2600      	movs	r6, #0
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4630      	mov	r0, r6
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ec:	4e2e      	ldr	r6, [pc, #184]	; (8005aa8 <_malloc_r+0xe4>)
 80059ee:	f000 fd79 	bl	80064e4 <__malloc_lock>
 80059f2:	6833      	ldr	r3, [r6, #0]
 80059f4:	461c      	mov	r4, r3
 80059f6:	bb34      	cbnz	r4, 8005a46 <_malloc_r+0x82>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	f7ff ffc2 	bl	8005984 <sbrk_aligned>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	4604      	mov	r4, r0
 8005a04:	d14d      	bne.n	8005aa2 <_malloc_r+0xde>
 8005a06:	6834      	ldr	r4, [r6, #0]
 8005a08:	4626      	mov	r6, r4
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d140      	bne.n	8005a90 <_malloc_r+0xcc>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	4631      	mov	r1, r6
 8005a12:	4638      	mov	r0, r7
 8005a14:	eb04 0803 	add.w	r8, r4, r3
 8005a18:	f000 fc92 	bl	8006340 <_sbrk_r>
 8005a1c:	4580      	cmp	r8, r0
 8005a1e:	d13a      	bne.n	8005a96 <_malloc_r+0xd2>
 8005a20:	6821      	ldr	r1, [r4, #0]
 8005a22:	3503      	adds	r5, #3
 8005a24:	1a6d      	subs	r5, r5, r1
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	4638      	mov	r0, r7
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7ff ffa5 	bl	8005984 <sbrk_aligned>
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d02b      	beq.n	8005a96 <_malloc_r+0xd2>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	442b      	add	r3, r5
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	e00e      	b.n	8005a64 <_malloc_r+0xa0>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	1b52      	subs	r2, r2, r5
 8005a4a:	d41e      	bmi.n	8005a8a <_malloc_r+0xc6>
 8005a4c:	2a0b      	cmp	r2, #11
 8005a4e:	d916      	bls.n	8005a7e <_malloc_r+0xba>
 8005a50:	1961      	adds	r1, r4, r5
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	6025      	str	r5, [r4, #0]
 8005a56:	bf18      	it	ne
 8005a58:	6059      	strne	r1, [r3, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	bf08      	it	eq
 8005a5e:	6031      	streq	r1, [r6, #0]
 8005a60:	5162      	str	r2, [r4, r5]
 8005a62:	604b      	str	r3, [r1, #4]
 8005a64:	4638      	mov	r0, r7
 8005a66:	f104 060b 	add.w	r6, r4, #11
 8005a6a:	f000 fd41 	bl	80064f0 <__malloc_unlock>
 8005a6e:	f026 0607 	bic.w	r6, r6, #7
 8005a72:	1d23      	adds	r3, r4, #4
 8005a74:	1af2      	subs	r2, r6, r3
 8005a76:	d0b6      	beq.n	80059e6 <_malloc_r+0x22>
 8005a78:	1b9b      	subs	r3, r3, r6
 8005a7a:	50a3      	str	r3, [r4, r2]
 8005a7c:	e7b3      	b.n	80059e6 <_malloc_r+0x22>
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	bf0c      	ite	eq
 8005a84:	6032      	streq	r2, [r6, #0]
 8005a86:	605a      	strne	r2, [r3, #4]
 8005a88:	e7ec      	b.n	8005a64 <_malloc_r+0xa0>
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	6864      	ldr	r4, [r4, #4]
 8005a8e:	e7b2      	b.n	80059f6 <_malloc_r+0x32>
 8005a90:	4634      	mov	r4, r6
 8005a92:	6876      	ldr	r6, [r6, #4]
 8005a94:	e7b9      	b.n	8005a0a <_malloc_r+0x46>
 8005a96:	230c      	movs	r3, #12
 8005a98:	4638      	mov	r0, r7
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	f000 fd28 	bl	80064f0 <__malloc_unlock>
 8005aa0:	e7a1      	b.n	80059e6 <_malloc_r+0x22>
 8005aa2:	6025      	str	r5, [r4, #0]
 8005aa4:	e7de      	b.n	8005a64 <_malloc_r+0xa0>
 8005aa6:	bf00      	nop
 8005aa8:	200009e4 	.word	0x200009e4

08005aac <__ssputs_r>:
 8005aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	688e      	ldr	r6, [r1, #8]
 8005ab2:	4682      	mov	sl, r0
 8005ab4:	429e      	cmp	r6, r3
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4690      	mov	r8, r2
 8005aba:	461f      	mov	r7, r3
 8005abc:	d838      	bhi.n	8005b30 <__ssputs_r+0x84>
 8005abe:	898a      	ldrh	r2, [r1, #12]
 8005ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ac4:	d032      	beq.n	8005b2c <__ssputs_r+0x80>
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	6909      	ldr	r1, [r1, #16]
 8005aca:	3301      	adds	r3, #1
 8005acc:	eba5 0901 	sub.w	r9, r5, r1
 8005ad0:	6965      	ldr	r5, [r4, #20]
 8005ad2:	444b      	add	r3, r9
 8005ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005adc:	106d      	asrs	r5, r5, #1
 8005ade:	429d      	cmp	r5, r3
 8005ae0:	bf38      	it	cc
 8005ae2:	461d      	movcc	r5, r3
 8005ae4:	0553      	lsls	r3, r2, #21
 8005ae6:	d531      	bpl.n	8005b4c <__ssputs_r+0xa0>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7ff ff6b 	bl	80059c4 <_malloc_r>
 8005aee:	4606      	mov	r6, r0
 8005af0:	b950      	cbnz	r0, 8005b08 <__ssputs_r+0x5c>
 8005af2:	230c      	movs	r3, #12
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	f8ca 3000 	str.w	r3, [sl]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	464a      	mov	r2, r9
 8005b0a:	6921      	ldr	r1, [r4, #16]
 8005b0c:	f7ff fb0a 	bl	8005124 <memcpy>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	6126      	str	r6, [r4, #16]
 8005b1e:	444e      	add	r6, r9
 8005b20:	6026      	str	r6, [r4, #0]
 8005b22:	463e      	mov	r6, r7
 8005b24:	6165      	str	r5, [r4, #20]
 8005b26:	eba5 0509 	sub.w	r5, r5, r9
 8005b2a:	60a5      	str	r5, [r4, #8]
 8005b2c:	42be      	cmp	r6, r7
 8005b2e:	d900      	bls.n	8005b32 <__ssputs_r+0x86>
 8005b30:	463e      	mov	r6, r7
 8005b32:	4632      	mov	r2, r6
 8005b34:	4641      	mov	r1, r8
 8005b36:	6820      	ldr	r0, [r4, #0]
 8005b38:	f000 fcba 	bl	80064b0 <memmove>
 8005b3c:	68a3      	ldr	r3, [r4, #8]
 8005b3e:	2000      	movs	r0, #0
 8005b40:	1b9b      	subs	r3, r3, r6
 8005b42:	60a3      	str	r3, [r4, #8]
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	4433      	add	r3, r6
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	e7db      	b.n	8005b04 <__ssputs_r+0x58>
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	f000 fcd5 	bl	80064fc <_realloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d1e1      	bne.n	8005b1c <__ssputs_r+0x70>
 8005b58:	4650      	mov	r0, sl
 8005b5a:	6921      	ldr	r1, [r4, #16]
 8005b5c:	f7ff feca 	bl	80058f4 <_free_r>
 8005b60:	e7c7      	b.n	8005af2 <__ssputs_r+0x46>
	...

08005b64 <_svfiprintf_r>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	4698      	mov	r8, r3
 8005b6a:	898b      	ldrh	r3, [r1, #12]
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	460d      	mov	r5, r1
 8005b72:	4614      	mov	r4, r2
 8005b74:	b09d      	sub	sp, #116	; 0x74
 8005b76:	d50e      	bpl.n	8005b96 <_svfiprintf_r+0x32>
 8005b78:	690b      	ldr	r3, [r1, #16]
 8005b7a:	b963      	cbnz	r3, 8005b96 <_svfiprintf_r+0x32>
 8005b7c:	2140      	movs	r1, #64	; 0x40
 8005b7e:	f7ff ff21 	bl	80059c4 <_malloc_r>
 8005b82:	6028      	str	r0, [r5, #0]
 8005b84:	6128      	str	r0, [r5, #16]
 8005b86:	b920      	cbnz	r0, 8005b92 <_svfiprintf_r+0x2e>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	e0d1      	b.n	8005d36 <_svfiprintf_r+0x1d2>
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	616b      	str	r3, [r5, #20]
 8005b96:	2300      	movs	r3, #0
 8005b98:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9a:	2320      	movs	r3, #32
 8005b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba0:	2330      	movs	r3, #48	; 0x30
 8005ba2:	f04f 0901 	mov.w	r9, #1
 8005ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005baa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d50 <_svfiprintf_r+0x1ec>
 8005bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	469a      	mov	sl, r3
 8005bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bba:	b10a      	cbz	r2, 8005bc0 <_svfiprintf_r+0x5c>
 8005bbc:	2a25      	cmp	r2, #37	; 0x25
 8005bbe:	d1f9      	bne.n	8005bb4 <_svfiprintf_r+0x50>
 8005bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc4:	d00b      	beq.n	8005bde <_svfiprintf_r+0x7a>
 8005bc6:	465b      	mov	r3, fp
 8005bc8:	4622      	mov	r2, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f7ff ff6d 	bl	8005aac <__ssputs_r>
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f000 80aa 	beq.w	8005d2c <_svfiprintf_r+0x1c8>
 8005bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bda:	445a      	add	r2, fp
 8005bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bde:	f89a 3000 	ldrb.w	r3, [sl]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80a2 	beq.w	8005d2c <_svfiprintf_r+0x1c8>
 8005be8:	2300      	movs	r3, #0
 8005bea:	f04f 32ff 	mov.w	r2, #4294967295
 8005bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf2:	f10a 0a01 	add.w	sl, sl, #1
 8005bf6:	9304      	str	r3, [sp, #16]
 8005bf8:	9307      	str	r3, [sp, #28]
 8005bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8005c00:	4654      	mov	r4, sl
 8005c02:	2205      	movs	r2, #5
 8005c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c08:	4851      	ldr	r0, [pc, #324]	; (8005d50 <_svfiprintf_r+0x1ec>)
 8005c0a:	f000 fc43 	bl	8006494 <memchr>
 8005c0e:	9a04      	ldr	r2, [sp, #16]
 8005c10:	b9d8      	cbnz	r0, 8005c4a <_svfiprintf_r+0xe6>
 8005c12:	06d0      	lsls	r0, r2, #27
 8005c14:	bf44      	itt	mi
 8005c16:	2320      	movmi	r3, #32
 8005c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c1c:	0711      	lsls	r1, r2, #28
 8005c1e:	bf44      	itt	mi
 8005c20:	232b      	movmi	r3, #43	; 0x2b
 8005c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c26:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c2c:	d015      	beq.n	8005c5a <_svfiprintf_r+0xf6>
 8005c2e:	4654      	mov	r4, sl
 8005c30:	2000      	movs	r0, #0
 8005c32:	f04f 0c0a 	mov.w	ip, #10
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	4621      	mov	r1, r4
 8005c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c3e:	3b30      	subs	r3, #48	; 0x30
 8005c40:	2b09      	cmp	r3, #9
 8005c42:	d94e      	bls.n	8005ce2 <_svfiprintf_r+0x17e>
 8005c44:	b1b0      	cbz	r0, 8005c74 <_svfiprintf_r+0x110>
 8005c46:	9207      	str	r2, [sp, #28]
 8005c48:	e014      	b.n	8005c74 <_svfiprintf_r+0x110>
 8005c4a:	eba0 0308 	sub.w	r3, r0, r8
 8005c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c52:	4313      	orrs	r3, r2
 8005c54:	46a2      	mov	sl, r4
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	e7d2      	b.n	8005c00 <_svfiprintf_r+0x9c>
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	1d19      	adds	r1, r3, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	9103      	str	r1, [sp, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bfbb      	ittet	lt
 8005c66:	425b      	neglt	r3, r3
 8005c68:	f042 0202 	orrlt.w	r2, r2, #2
 8005c6c:	9307      	strge	r3, [sp, #28]
 8005c6e:	9307      	strlt	r3, [sp, #28]
 8005c70:	bfb8      	it	lt
 8005c72:	9204      	strlt	r2, [sp, #16]
 8005c74:	7823      	ldrb	r3, [r4, #0]
 8005c76:	2b2e      	cmp	r3, #46	; 0x2e
 8005c78:	d10c      	bne.n	8005c94 <_svfiprintf_r+0x130>
 8005c7a:	7863      	ldrb	r3, [r4, #1]
 8005c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c7e:	d135      	bne.n	8005cec <_svfiprintf_r+0x188>
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	3402      	adds	r4, #2
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	9203      	str	r2, [sp, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfb8      	it	lt
 8005c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005d54 <_svfiprintf_r+0x1f0>
 8005c98:	2203      	movs	r2, #3
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	7821      	ldrb	r1, [r4, #0]
 8005c9e:	f000 fbf9 	bl	8006494 <memchr>
 8005ca2:	b140      	cbz	r0, 8005cb6 <_svfiprintf_r+0x152>
 8005ca4:	2340      	movs	r3, #64	; 0x40
 8005ca6:	eba0 000a 	sub.w	r0, r0, sl
 8005caa:	fa03 f000 	lsl.w	r0, r3, r0
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	3401      	adds	r4, #1
 8005cb2:	4303      	orrs	r3, r0
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cba:	2206      	movs	r2, #6
 8005cbc:	4826      	ldr	r0, [pc, #152]	; (8005d58 <_svfiprintf_r+0x1f4>)
 8005cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc2:	f000 fbe7 	bl	8006494 <memchr>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d038      	beq.n	8005d3c <_svfiprintf_r+0x1d8>
 8005cca:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <_svfiprintf_r+0x1f8>)
 8005ccc:	bb1b      	cbnz	r3, 8005d16 <_svfiprintf_r+0x1b2>
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	3307      	adds	r3, #7
 8005cd2:	f023 0307 	bic.w	r3, r3, #7
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	9303      	str	r3, [sp, #12]
 8005cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cdc:	4433      	add	r3, r6
 8005cde:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce0:	e767      	b.n	8005bb2 <_svfiprintf_r+0x4e>
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cea:	e7a5      	b.n	8005c38 <_svfiprintf_r+0xd4>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f04f 0c0a 	mov.w	ip, #10
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	3401      	adds	r4, #1
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cfe:	3a30      	subs	r2, #48	; 0x30
 8005d00:	2a09      	cmp	r2, #9
 8005d02:	d903      	bls.n	8005d0c <_svfiprintf_r+0x1a8>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0c5      	beq.n	8005c94 <_svfiprintf_r+0x130>
 8005d08:	9105      	str	r1, [sp, #20]
 8005d0a:	e7c3      	b.n	8005c94 <_svfiprintf_r+0x130>
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	2301      	movs	r3, #1
 8005d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d14:	e7f0      	b.n	8005cf8 <_svfiprintf_r+0x194>
 8005d16:	ab03      	add	r3, sp, #12
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	462a      	mov	r2, r5
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <_svfiprintf_r+0x1fc>)
 8005d20:	a904      	add	r1, sp, #16
 8005d22:	f3af 8000 	nop.w
 8005d26:	1c42      	adds	r2, r0, #1
 8005d28:	4606      	mov	r6, r0
 8005d2a:	d1d6      	bne.n	8005cda <_svfiprintf_r+0x176>
 8005d2c:	89ab      	ldrh	r3, [r5, #12]
 8005d2e:	065b      	lsls	r3, r3, #25
 8005d30:	f53f af2c 	bmi.w	8005b8c <_svfiprintf_r+0x28>
 8005d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d36:	b01d      	add	sp, #116	; 0x74
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	ab03      	add	r3, sp, #12
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	462a      	mov	r2, r5
 8005d42:	4638      	mov	r0, r7
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <_svfiprintf_r+0x1fc>)
 8005d46:	a904      	add	r1, sp, #16
 8005d48:	f000 f9d4 	bl	80060f4 <_printf_i>
 8005d4c:	e7eb      	b.n	8005d26 <_svfiprintf_r+0x1c2>
 8005d4e:	bf00      	nop
 8005d50:	08006954 	.word	0x08006954
 8005d54:	0800695a 	.word	0x0800695a
 8005d58:	0800695e 	.word	0x0800695e
 8005d5c:	00000000 	.word	0x00000000
 8005d60:	08005aad 	.word	0x08005aad

08005d64 <__sfputc_r>:
 8005d64:	6893      	ldr	r3, [r2, #8]
 8005d66:	b410      	push	{r4}
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	6093      	str	r3, [r2, #8]
 8005d6e:	da07      	bge.n	8005d80 <__sfputc_r+0x1c>
 8005d70:	6994      	ldr	r4, [r2, #24]
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	db01      	blt.n	8005d7a <__sfputc_r+0x16>
 8005d76:	290a      	cmp	r1, #10
 8005d78:	d102      	bne.n	8005d80 <__sfputc_r+0x1c>
 8005d7a:	bc10      	pop	{r4}
 8005d7c:	f7ff bade 	b.w	800533c <__swbuf_r>
 8005d80:	6813      	ldr	r3, [r2, #0]
 8005d82:	1c58      	adds	r0, r3, #1
 8005d84:	6010      	str	r0, [r2, #0]
 8005d86:	7019      	strb	r1, [r3, #0]
 8005d88:	4608      	mov	r0, r1
 8005d8a:	bc10      	pop	{r4}
 8005d8c:	4770      	bx	lr

08005d8e <__sfputs_r>:
 8005d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d90:	4606      	mov	r6, r0
 8005d92:	460f      	mov	r7, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	18d5      	adds	r5, r2, r3
 8005d98:	42ac      	cmp	r4, r5
 8005d9a:	d101      	bne.n	8005da0 <__sfputs_r+0x12>
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e007      	b.n	8005db0 <__sfputs_r+0x22>
 8005da0:	463a      	mov	r2, r7
 8005da2:	4630      	mov	r0, r6
 8005da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da8:	f7ff ffdc 	bl	8005d64 <__sfputc_r>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d1f3      	bne.n	8005d98 <__sfputs_r+0xa>
 8005db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005db4 <_vfiprintf_r>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	460d      	mov	r5, r1
 8005dba:	4614      	mov	r4, r2
 8005dbc:	4698      	mov	r8, r3
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	b09d      	sub	sp, #116	; 0x74
 8005dc2:	b118      	cbz	r0, 8005dcc <_vfiprintf_r+0x18>
 8005dc4:	6983      	ldr	r3, [r0, #24]
 8005dc6:	b90b      	cbnz	r3, 8005dcc <_vfiprintf_r+0x18>
 8005dc8:	f7ff fc8e 	bl	80056e8 <__sinit>
 8005dcc:	4b89      	ldr	r3, [pc, #548]	; (8005ff4 <_vfiprintf_r+0x240>)
 8005dce:	429d      	cmp	r5, r3
 8005dd0:	d11b      	bne.n	8005e0a <_vfiprintf_r+0x56>
 8005dd2:	6875      	ldr	r5, [r6, #4]
 8005dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd6:	07d9      	lsls	r1, r3, #31
 8005dd8:	d405      	bmi.n	8005de6 <_vfiprintf_r+0x32>
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	059a      	lsls	r2, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_vfiprintf_r+0x32>
 8005de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de2:	f7ff fd1f 	bl	8005824 <__retarget_lock_acquire_recursive>
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	071b      	lsls	r3, r3, #28
 8005dea:	d501      	bpl.n	8005df0 <_vfiprintf_r+0x3c>
 8005dec:	692b      	ldr	r3, [r5, #16]
 8005dee:	b9eb      	cbnz	r3, 8005e2c <_vfiprintf_r+0x78>
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7ff faf4 	bl	80053e0 <__swsetup_r>
 8005df8:	b1c0      	cbz	r0, 8005e2c <_vfiprintf_r+0x78>
 8005dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dfc:	07dc      	lsls	r4, r3, #31
 8005dfe:	d50e      	bpl.n	8005e1e <_vfiprintf_r+0x6a>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	b01d      	add	sp, #116	; 0x74
 8005e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0a:	4b7b      	ldr	r3, [pc, #492]	; (8005ff8 <_vfiprintf_r+0x244>)
 8005e0c:	429d      	cmp	r5, r3
 8005e0e:	d101      	bne.n	8005e14 <_vfiprintf_r+0x60>
 8005e10:	68b5      	ldr	r5, [r6, #8]
 8005e12:	e7df      	b.n	8005dd4 <_vfiprintf_r+0x20>
 8005e14:	4b79      	ldr	r3, [pc, #484]	; (8005ffc <_vfiprintf_r+0x248>)
 8005e16:	429d      	cmp	r5, r3
 8005e18:	bf08      	it	eq
 8005e1a:	68f5      	ldreq	r5, [r6, #12]
 8005e1c:	e7da      	b.n	8005dd4 <_vfiprintf_r+0x20>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	0598      	lsls	r0, r3, #22
 8005e22:	d4ed      	bmi.n	8005e00 <_vfiprintf_r+0x4c>
 8005e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e26:	f7ff fcfe 	bl	8005826 <__retarget_lock_release_recursive>
 8005e2a:	e7e9      	b.n	8005e00 <_vfiprintf_r+0x4c>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e30:	2320      	movs	r3, #32
 8005e32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e36:	2330      	movs	r3, #48	; 0x30
 8005e38:	f04f 0901 	mov.w	r9, #1
 8005e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006000 <_vfiprintf_r+0x24c>
 8005e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e48:	4623      	mov	r3, r4
 8005e4a:	469a      	mov	sl, r3
 8005e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e50:	b10a      	cbz	r2, 8005e56 <_vfiprintf_r+0xa2>
 8005e52:	2a25      	cmp	r2, #37	; 0x25
 8005e54:	d1f9      	bne.n	8005e4a <_vfiprintf_r+0x96>
 8005e56:	ebba 0b04 	subs.w	fp, sl, r4
 8005e5a:	d00b      	beq.n	8005e74 <_vfiprintf_r+0xc0>
 8005e5c:	465b      	mov	r3, fp
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff93 	bl	8005d8e <__sfputs_r>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f000 80aa 	beq.w	8005fc2 <_vfiprintf_r+0x20e>
 8005e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e70:	445a      	add	r2, fp
 8005e72:	9209      	str	r2, [sp, #36]	; 0x24
 8005e74:	f89a 3000 	ldrb.w	r3, [sl]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80a2 	beq.w	8005fc2 <_vfiprintf_r+0x20e>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f04f 32ff 	mov.w	r2, #4294967295
 8005e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e88:	f10a 0a01 	add.w	sl, sl, #1
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	9307      	str	r3, [sp, #28]
 8005e90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e94:	931a      	str	r3, [sp, #104]	; 0x68
 8005e96:	4654      	mov	r4, sl
 8005e98:	2205      	movs	r2, #5
 8005e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9e:	4858      	ldr	r0, [pc, #352]	; (8006000 <_vfiprintf_r+0x24c>)
 8005ea0:	f000 faf8 	bl	8006494 <memchr>
 8005ea4:	9a04      	ldr	r2, [sp, #16]
 8005ea6:	b9d8      	cbnz	r0, 8005ee0 <_vfiprintf_r+0x12c>
 8005ea8:	06d1      	lsls	r1, r2, #27
 8005eaa:	bf44      	itt	mi
 8005eac:	2320      	movmi	r3, #32
 8005eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb2:	0713      	lsls	r3, r2, #28
 8005eb4:	bf44      	itt	mi
 8005eb6:	232b      	movmi	r3, #43	; 0x2b
 8005eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec2:	d015      	beq.n	8005ef0 <_vfiprintf_r+0x13c>
 8005ec4:	4654      	mov	r4, sl
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f04f 0c0a 	mov.w	ip, #10
 8005ecc:	9a07      	ldr	r2, [sp, #28]
 8005ece:	4621      	mov	r1, r4
 8005ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ed4:	3b30      	subs	r3, #48	; 0x30
 8005ed6:	2b09      	cmp	r3, #9
 8005ed8:	d94e      	bls.n	8005f78 <_vfiprintf_r+0x1c4>
 8005eda:	b1b0      	cbz	r0, 8005f0a <_vfiprintf_r+0x156>
 8005edc:	9207      	str	r2, [sp, #28]
 8005ede:	e014      	b.n	8005f0a <_vfiprintf_r+0x156>
 8005ee0:	eba0 0308 	sub.w	r3, r0, r8
 8005ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	46a2      	mov	sl, r4
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	e7d2      	b.n	8005e96 <_vfiprintf_r+0xe2>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	1d19      	adds	r1, r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	9103      	str	r1, [sp, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfbb      	ittet	lt
 8005efc:	425b      	neglt	r3, r3
 8005efe:	f042 0202 	orrlt.w	r2, r2, #2
 8005f02:	9307      	strge	r3, [sp, #28]
 8005f04:	9307      	strlt	r3, [sp, #28]
 8005f06:	bfb8      	it	lt
 8005f08:	9204      	strlt	r2, [sp, #16]
 8005f0a:	7823      	ldrb	r3, [r4, #0]
 8005f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f0e:	d10c      	bne.n	8005f2a <_vfiprintf_r+0x176>
 8005f10:	7863      	ldrb	r3, [r4, #1]
 8005f12:	2b2a      	cmp	r3, #42	; 0x2a
 8005f14:	d135      	bne.n	8005f82 <_vfiprintf_r+0x1ce>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	3402      	adds	r4, #2
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	9203      	str	r2, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfb8      	it	lt
 8005f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f28:	9305      	str	r3, [sp, #20]
 8005f2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006004 <_vfiprintf_r+0x250>
 8005f2e:	2203      	movs	r2, #3
 8005f30:	4650      	mov	r0, sl
 8005f32:	7821      	ldrb	r1, [r4, #0]
 8005f34:	f000 faae 	bl	8006494 <memchr>
 8005f38:	b140      	cbz	r0, 8005f4c <_vfiprintf_r+0x198>
 8005f3a:	2340      	movs	r3, #64	; 0x40
 8005f3c:	eba0 000a 	sub.w	r0, r0, sl
 8005f40:	fa03 f000 	lsl.w	r0, r3, r0
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	3401      	adds	r4, #1
 8005f48:	4303      	orrs	r3, r0
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	2206      	movs	r2, #6
 8005f52:	482d      	ldr	r0, [pc, #180]	; (8006008 <_vfiprintf_r+0x254>)
 8005f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f58:	f000 fa9c 	bl	8006494 <memchr>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d03f      	beq.n	8005fe0 <_vfiprintf_r+0x22c>
 8005f60:	4b2a      	ldr	r3, [pc, #168]	; (800600c <_vfiprintf_r+0x258>)
 8005f62:	bb1b      	cbnz	r3, 8005fac <_vfiprintf_r+0x1f8>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	3307      	adds	r3, #7
 8005f68:	f023 0307 	bic.w	r3, r3, #7
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	9303      	str	r3, [sp, #12]
 8005f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f72:	443b      	add	r3, r7
 8005f74:	9309      	str	r3, [sp, #36]	; 0x24
 8005f76:	e767      	b.n	8005e48 <_vfiprintf_r+0x94>
 8005f78:	460c      	mov	r4, r1
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f80:	e7a5      	b.n	8005ece <_vfiprintf_r+0x11a>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f04f 0c0a 	mov.w	ip, #10
 8005f88:	4619      	mov	r1, r3
 8005f8a:	3401      	adds	r4, #1
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f94:	3a30      	subs	r2, #48	; 0x30
 8005f96:	2a09      	cmp	r2, #9
 8005f98:	d903      	bls.n	8005fa2 <_vfiprintf_r+0x1ee>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0c5      	beq.n	8005f2a <_vfiprintf_r+0x176>
 8005f9e:	9105      	str	r1, [sp, #20]
 8005fa0:	e7c3      	b.n	8005f2a <_vfiprintf_r+0x176>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005faa:	e7f0      	b.n	8005f8e <_vfiprintf_r+0x1da>
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4b16      	ldr	r3, [pc, #88]	; (8006010 <_vfiprintf_r+0x25c>)
 8005fb6:	a904      	add	r1, sp, #16
 8005fb8:	f3af 8000 	nop.w
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	1c78      	adds	r0, r7, #1
 8005fc0:	d1d6      	bne.n	8005f70 <_vfiprintf_r+0x1bc>
 8005fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fc4:	07d9      	lsls	r1, r3, #31
 8005fc6:	d405      	bmi.n	8005fd4 <_vfiprintf_r+0x220>
 8005fc8:	89ab      	ldrh	r3, [r5, #12]
 8005fca:	059a      	lsls	r2, r3, #22
 8005fcc:	d402      	bmi.n	8005fd4 <_vfiprintf_r+0x220>
 8005fce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fd0:	f7ff fc29 	bl	8005826 <__retarget_lock_release_recursive>
 8005fd4:	89ab      	ldrh	r3, [r5, #12]
 8005fd6:	065b      	lsls	r3, r3, #25
 8005fd8:	f53f af12 	bmi.w	8005e00 <_vfiprintf_r+0x4c>
 8005fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fde:	e711      	b.n	8005e04 <_vfiprintf_r+0x50>
 8005fe0:	ab03      	add	r3, sp, #12
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <_vfiprintf_r+0x25c>)
 8005fea:	a904      	add	r1, sp, #16
 8005fec:	f000 f882 	bl	80060f4 <_printf_i>
 8005ff0:	e7e4      	b.n	8005fbc <_vfiprintf_r+0x208>
 8005ff2:	bf00      	nop
 8005ff4:	08006914 	.word	0x08006914
 8005ff8:	08006934 	.word	0x08006934
 8005ffc:	080068f4 	.word	0x080068f4
 8006000:	08006954 	.word	0x08006954
 8006004:	0800695a 	.word	0x0800695a
 8006008:	0800695e 	.word	0x0800695e
 800600c:	00000000 	.word	0x00000000
 8006010:	08005d8f 	.word	0x08005d8f

08006014 <_printf_common>:
 8006014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	4616      	mov	r6, r2
 800601a:	4699      	mov	r9, r3
 800601c:	688a      	ldr	r2, [r1, #8]
 800601e:	690b      	ldr	r3, [r1, #16]
 8006020:	4607      	mov	r7, r0
 8006022:	4293      	cmp	r3, r2
 8006024:	bfb8      	it	lt
 8006026:	4613      	movlt	r3, r2
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800602e:	460c      	mov	r4, r1
 8006030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006034:	b10a      	cbz	r2, 800603a <_printf_common+0x26>
 8006036:	3301      	adds	r3, #1
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	0699      	lsls	r1, r3, #26
 800603e:	bf42      	ittt	mi
 8006040:	6833      	ldrmi	r3, [r6, #0]
 8006042:	3302      	addmi	r3, #2
 8006044:	6033      	strmi	r3, [r6, #0]
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	f015 0506 	ands.w	r5, r5, #6
 800604c:	d106      	bne.n	800605c <_printf_common+0x48>
 800604e:	f104 0a19 	add.w	sl, r4, #25
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ab      	cmp	r3, r5
 800605a:	dc28      	bgt.n	80060ae <_printf_common+0x9a>
 800605c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006060:	1e13      	subs	r3, r2, #0
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	bf18      	it	ne
 8006066:	2301      	movne	r3, #1
 8006068:	0692      	lsls	r2, r2, #26
 800606a:	d42d      	bmi.n	80060c8 <_printf_common+0xb4>
 800606c:	4649      	mov	r1, r9
 800606e:	4638      	mov	r0, r7
 8006070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006074:	47c0      	blx	r8
 8006076:	3001      	adds	r0, #1
 8006078:	d020      	beq.n	80060bc <_printf_common+0xa8>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	68e5      	ldr	r5, [r4, #12]
 800607e:	f003 0306 	and.w	r3, r3, #6
 8006082:	2b04      	cmp	r3, #4
 8006084:	bf18      	it	ne
 8006086:	2500      	movne	r5, #0
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	f04f 0600 	mov.w	r6, #0
 800608e:	68a3      	ldr	r3, [r4, #8]
 8006090:	bf08      	it	eq
 8006092:	1aad      	subeq	r5, r5, r2
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	bf08      	it	eq
 8006098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800609c:	4293      	cmp	r3, r2
 800609e:	bfc4      	itt	gt
 80060a0:	1a9b      	subgt	r3, r3, r2
 80060a2:	18ed      	addgt	r5, r5, r3
 80060a4:	341a      	adds	r4, #26
 80060a6:	42b5      	cmp	r5, r6
 80060a8:	d11a      	bne.n	80060e0 <_printf_common+0xcc>
 80060aa:	2000      	movs	r0, #0
 80060ac:	e008      	b.n	80060c0 <_printf_common+0xac>
 80060ae:	2301      	movs	r3, #1
 80060b0:	4652      	mov	r2, sl
 80060b2:	4649      	mov	r1, r9
 80060b4:	4638      	mov	r0, r7
 80060b6:	47c0      	blx	r8
 80060b8:	3001      	adds	r0, #1
 80060ba:	d103      	bne.n	80060c4 <_printf_common+0xb0>
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c4:	3501      	adds	r5, #1
 80060c6:	e7c4      	b.n	8006052 <_printf_common+0x3e>
 80060c8:	2030      	movs	r0, #48	; 0x30
 80060ca:	18e1      	adds	r1, r4, r3
 80060cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060d6:	4422      	add	r2, r4
 80060d8:	3302      	adds	r3, #2
 80060da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060de:	e7c5      	b.n	800606c <_printf_common+0x58>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4622      	mov	r2, r4
 80060e4:	4649      	mov	r1, r9
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c0      	blx	r8
 80060ea:	3001      	adds	r0, #1
 80060ec:	d0e6      	beq.n	80060bc <_printf_common+0xa8>
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7d9      	b.n	80060a6 <_printf_common+0x92>
	...

080060f4 <_printf_i>:
 80060f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	7e0f      	ldrb	r7, [r1, #24]
 80060fa:	4691      	mov	r9, r2
 80060fc:	2f78      	cmp	r7, #120	; 0x78
 80060fe:	4680      	mov	r8, r0
 8006100:	460c      	mov	r4, r1
 8006102:	469a      	mov	sl, r3
 8006104:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800610a:	d807      	bhi.n	800611c <_printf_i+0x28>
 800610c:	2f62      	cmp	r7, #98	; 0x62
 800610e:	d80a      	bhi.n	8006126 <_printf_i+0x32>
 8006110:	2f00      	cmp	r7, #0
 8006112:	f000 80d9 	beq.w	80062c8 <_printf_i+0x1d4>
 8006116:	2f58      	cmp	r7, #88	; 0x58
 8006118:	f000 80a4 	beq.w	8006264 <_printf_i+0x170>
 800611c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006124:	e03a      	b.n	800619c <_printf_i+0xa8>
 8006126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800612a:	2b15      	cmp	r3, #21
 800612c:	d8f6      	bhi.n	800611c <_printf_i+0x28>
 800612e:	a101      	add	r1, pc, #4	; (adr r1, 8006134 <_printf_i+0x40>)
 8006130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006134:	0800618d 	.word	0x0800618d
 8006138:	080061a1 	.word	0x080061a1
 800613c:	0800611d 	.word	0x0800611d
 8006140:	0800611d 	.word	0x0800611d
 8006144:	0800611d 	.word	0x0800611d
 8006148:	0800611d 	.word	0x0800611d
 800614c:	080061a1 	.word	0x080061a1
 8006150:	0800611d 	.word	0x0800611d
 8006154:	0800611d 	.word	0x0800611d
 8006158:	0800611d 	.word	0x0800611d
 800615c:	0800611d 	.word	0x0800611d
 8006160:	080062af 	.word	0x080062af
 8006164:	080061d1 	.word	0x080061d1
 8006168:	08006291 	.word	0x08006291
 800616c:	0800611d 	.word	0x0800611d
 8006170:	0800611d 	.word	0x0800611d
 8006174:	080062d1 	.word	0x080062d1
 8006178:	0800611d 	.word	0x0800611d
 800617c:	080061d1 	.word	0x080061d1
 8006180:	0800611d 	.word	0x0800611d
 8006184:	0800611d 	.word	0x0800611d
 8006188:	08006299 	.word	0x08006299
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	602a      	str	r2, [r5, #0]
 8006194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800619c:	2301      	movs	r3, #1
 800619e:	e0a4      	b.n	80062ea <_printf_i+0x1f6>
 80061a0:	6820      	ldr	r0, [r4, #0]
 80061a2:	6829      	ldr	r1, [r5, #0]
 80061a4:	0606      	lsls	r6, r0, #24
 80061a6:	f101 0304 	add.w	r3, r1, #4
 80061aa:	d50a      	bpl.n	80061c2 <_printf_i+0xce>
 80061ac:	680e      	ldr	r6, [r1, #0]
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	2e00      	cmp	r6, #0
 80061b2:	da03      	bge.n	80061bc <_printf_i+0xc8>
 80061b4:	232d      	movs	r3, #45	; 0x2d
 80061b6:	4276      	negs	r6, r6
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061bc:	230a      	movs	r3, #10
 80061be:	485e      	ldr	r0, [pc, #376]	; (8006338 <_printf_i+0x244>)
 80061c0:	e019      	b.n	80061f6 <_printf_i+0x102>
 80061c2:	680e      	ldr	r6, [r1, #0]
 80061c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	bf18      	it	ne
 80061cc:	b236      	sxthne	r6, r6
 80061ce:	e7ef      	b.n	80061b0 <_printf_i+0xbc>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	1d19      	adds	r1, r3, #4
 80061d6:	6029      	str	r1, [r5, #0]
 80061d8:	0601      	lsls	r1, r0, #24
 80061da:	d501      	bpl.n	80061e0 <_printf_i+0xec>
 80061dc:	681e      	ldr	r6, [r3, #0]
 80061de:	e002      	b.n	80061e6 <_printf_i+0xf2>
 80061e0:	0646      	lsls	r6, r0, #25
 80061e2:	d5fb      	bpl.n	80061dc <_printf_i+0xe8>
 80061e4:	881e      	ldrh	r6, [r3, #0]
 80061e6:	2f6f      	cmp	r7, #111	; 0x6f
 80061e8:	bf0c      	ite	eq
 80061ea:	2308      	moveq	r3, #8
 80061ec:	230a      	movne	r3, #10
 80061ee:	4852      	ldr	r0, [pc, #328]	; (8006338 <_printf_i+0x244>)
 80061f0:	2100      	movs	r1, #0
 80061f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061f6:	6865      	ldr	r5, [r4, #4]
 80061f8:	2d00      	cmp	r5, #0
 80061fa:	bfa8      	it	ge
 80061fc:	6821      	ldrge	r1, [r4, #0]
 80061fe:	60a5      	str	r5, [r4, #8]
 8006200:	bfa4      	itt	ge
 8006202:	f021 0104 	bicge.w	r1, r1, #4
 8006206:	6021      	strge	r1, [r4, #0]
 8006208:	b90e      	cbnz	r6, 800620e <_printf_i+0x11a>
 800620a:	2d00      	cmp	r5, #0
 800620c:	d04d      	beq.n	80062aa <_printf_i+0x1b6>
 800620e:	4615      	mov	r5, r2
 8006210:	fbb6 f1f3 	udiv	r1, r6, r3
 8006214:	fb03 6711 	mls	r7, r3, r1, r6
 8006218:	5dc7      	ldrb	r7, [r0, r7]
 800621a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800621e:	4637      	mov	r7, r6
 8006220:	42bb      	cmp	r3, r7
 8006222:	460e      	mov	r6, r1
 8006224:	d9f4      	bls.n	8006210 <_printf_i+0x11c>
 8006226:	2b08      	cmp	r3, #8
 8006228:	d10b      	bne.n	8006242 <_printf_i+0x14e>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	07de      	lsls	r6, r3, #31
 800622e:	d508      	bpl.n	8006242 <_printf_i+0x14e>
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	6861      	ldr	r1, [r4, #4]
 8006234:	4299      	cmp	r1, r3
 8006236:	bfde      	ittt	le
 8006238:	2330      	movle	r3, #48	; 0x30
 800623a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800623e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006242:	1b52      	subs	r2, r2, r5
 8006244:	6122      	str	r2, [r4, #16]
 8006246:	464b      	mov	r3, r9
 8006248:	4621      	mov	r1, r4
 800624a:	4640      	mov	r0, r8
 800624c:	f8cd a000 	str.w	sl, [sp]
 8006250:	aa03      	add	r2, sp, #12
 8006252:	f7ff fedf 	bl	8006014 <_printf_common>
 8006256:	3001      	adds	r0, #1
 8006258:	d14c      	bne.n	80062f4 <_printf_i+0x200>
 800625a:	f04f 30ff 	mov.w	r0, #4294967295
 800625e:	b004      	add	sp, #16
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	4834      	ldr	r0, [pc, #208]	; (8006338 <_printf_i+0x244>)
 8006266:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800626a:	6829      	ldr	r1, [r5, #0]
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006272:	6029      	str	r1, [r5, #0]
 8006274:	061d      	lsls	r5, r3, #24
 8006276:	d514      	bpl.n	80062a2 <_printf_i+0x1ae>
 8006278:	07df      	lsls	r7, r3, #31
 800627a:	bf44      	itt	mi
 800627c:	f043 0320 	orrmi.w	r3, r3, #32
 8006280:	6023      	strmi	r3, [r4, #0]
 8006282:	b91e      	cbnz	r6, 800628c <_printf_i+0x198>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	f023 0320 	bic.w	r3, r3, #32
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	2310      	movs	r3, #16
 800628e:	e7af      	b.n	80061f0 <_printf_i+0xfc>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	f043 0320 	orr.w	r3, r3, #32
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	2378      	movs	r3, #120	; 0x78
 800629a:	4828      	ldr	r0, [pc, #160]	; (800633c <_printf_i+0x248>)
 800629c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062a0:	e7e3      	b.n	800626a <_printf_i+0x176>
 80062a2:	0659      	lsls	r1, r3, #25
 80062a4:	bf48      	it	mi
 80062a6:	b2b6      	uxthmi	r6, r6
 80062a8:	e7e6      	b.n	8006278 <_printf_i+0x184>
 80062aa:	4615      	mov	r5, r2
 80062ac:	e7bb      	b.n	8006226 <_printf_i+0x132>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	6826      	ldr	r6, [r4, #0]
 80062b2:	1d18      	adds	r0, r3, #4
 80062b4:	6961      	ldr	r1, [r4, #20]
 80062b6:	6028      	str	r0, [r5, #0]
 80062b8:	0635      	lsls	r5, r6, #24
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	d501      	bpl.n	80062c2 <_printf_i+0x1ce>
 80062be:	6019      	str	r1, [r3, #0]
 80062c0:	e002      	b.n	80062c8 <_printf_i+0x1d4>
 80062c2:	0670      	lsls	r0, r6, #25
 80062c4:	d5fb      	bpl.n	80062be <_printf_i+0x1ca>
 80062c6:	8019      	strh	r1, [r3, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	4615      	mov	r5, r2
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	e7ba      	b.n	8006246 <_printf_i+0x152>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	2100      	movs	r1, #0
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f8d9 	bl	8006494 <memchr>
 80062e2:	b108      	cbz	r0, 80062e8 <_printf_i+0x1f4>
 80062e4:	1b40      	subs	r0, r0, r5
 80062e6:	6060      	str	r0, [r4, #4]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	2300      	movs	r3, #0
 80062ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f2:	e7a8      	b.n	8006246 <_printf_i+0x152>
 80062f4:	462a      	mov	r2, r5
 80062f6:	4649      	mov	r1, r9
 80062f8:	4640      	mov	r0, r8
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	47d0      	blx	sl
 80062fe:	3001      	adds	r0, #1
 8006300:	d0ab      	beq.n	800625a <_printf_i+0x166>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	079b      	lsls	r3, r3, #30
 8006306:	d413      	bmi.n	8006330 <_printf_i+0x23c>
 8006308:	68e0      	ldr	r0, [r4, #12]
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	4298      	cmp	r0, r3
 800630e:	bfb8      	it	lt
 8006310:	4618      	movlt	r0, r3
 8006312:	e7a4      	b.n	800625e <_printf_i+0x16a>
 8006314:	2301      	movs	r3, #1
 8006316:	4632      	mov	r2, r6
 8006318:	4649      	mov	r1, r9
 800631a:	4640      	mov	r0, r8
 800631c:	47d0      	blx	sl
 800631e:	3001      	adds	r0, #1
 8006320:	d09b      	beq.n	800625a <_printf_i+0x166>
 8006322:	3501      	adds	r5, #1
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	9903      	ldr	r1, [sp, #12]
 8006328:	1a5b      	subs	r3, r3, r1
 800632a:	42ab      	cmp	r3, r5
 800632c:	dcf2      	bgt.n	8006314 <_printf_i+0x220>
 800632e:	e7eb      	b.n	8006308 <_printf_i+0x214>
 8006330:	2500      	movs	r5, #0
 8006332:	f104 0619 	add.w	r6, r4, #25
 8006336:	e7f5      	b.n	8006324 <_printf_i+0x230>
 8006338:	08006965 	.word	0x08006965
 800633c:	08006976 	.word	0x08006976

08006340 <_sbrk_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	2300      	movs	r3, #0
 8006344:	4d05      	ldr	r5, [pc, #20]	; (800635c <_sbrk_r+0x1c>)
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fa fb32 	bl	80009b4 <_sbrk>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_sbrk_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_sbrk_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	200009ec 	.word	0x200009ec

08006360 <__sread>:
 8006360:	b510      	push	{r4, lr}
 8006362:	460c      	mov	r4, r1
 8006364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006368:	f000 f8f8 	bl	800655c <_read_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	bfab      	itete	ge
 8006370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006372:	89a3      	ldrhlt	r3, [r4, #12]
 8006374:	181b      	addge	r3, r3, r0
 8006376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800637a:	bfac      	ite	ge
 800637c:	6563      	strge	r3, [r4, #84]	; 0x54
 800637e:	81a3      	strhlt	r3, [r4, #12]
 8006380:	bd10      	pop	{r4, pc}

08006382 <__swrite>:
 8006382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006386:	461f      	mov	r7, r3
 8006388:	898b      	ldrh	r3, [r1, #12]
 800638a:	4605      	mov	r5, r0
 800638c:	05db      	lsls	r3, r3, #23
 800638e:	460c      	mov	r4, r1
 8006390:	4616      	mov	r6, r2
 8006392:	d505      	bpl.n	80063a0 <__swrite+0x1e>
 8006394:	2302      	movs	r3, #2
 8006396:	2200      	movs	r2, #0
 8006398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639c:	f000 f868 	bl	8006470 <_lseek_r>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	4632      	mov	r2, r6
 80063a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063a8:	81a3      	strh	r3, [r4, #12]
 80063aa:	4628      	mov	r0, r5
 80063ac:	463b      	mov	r3, r7
 80063ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b6:	f000 b817 	b.w	80063e8 <_write_r>

080063ba <__sseek>:
 80063ba:	b510      	push	{r4, lr}
 80063bc:	460c      	mov	r4, r1
 80063be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c2:	f000 f855 	bl	8006470 <_lseek_r>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	bf15      	itete	ne
 80063cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063d6:	81a3      	strheq	r3, [r4, #12]
 80063d8:	bf18      	it	ne
 80063da:	81a3      	strhne	r3, [r4, #12]
 80063dc:	bd10      	pop	{r4, pc}

080063de <__sclose>:
 80063de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e2:	f000 b813 	b.w	800640c <_close_r>
	...

080063e8 <_write_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	2200      	movs	r2, #0
 80063f2:	4d05      	ldr	r5, [pc, #20]	; (8006408 <_write_r+0x20>)
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fa fa90 	bl	800091c <_write>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_write_r+0x1e>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_write_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	200009ec 	.word	0x200009ec

0800640c <_close_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	2300      	movs	r3, #0
 8006410:	4d05      	ldr	r5, [pc, #20]	; (8006428 <_close_r+0x1c>)
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fa9c 	bl	8000954 <_close>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_close_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_close_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	200009ec 	.word	0x200009ec

0800642c <_fstat_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	2300      	movs	r3, #0
 8006430:	4d06      	ldr	r5, [pc, #24]	; (800644c <_fstat_r+0x20>)
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f7fa fa96 	bl	800096a <_fstat>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d102      	bne.n	8006448 <_fstat_r+0x1c>
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	b103      	cbz	r3, 8006448 <_fstat_r+0x1c>
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	200009ec 	.word	0x200009ec

08006450 <_isatty_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	2300      	movs	r3, #0
 8006454:	4d05      	ldr	r5, [pc, #20]	; (800646c <_isatty_r+0x1c>)
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fa94 	bl	8000988 <_isatty>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_isatty_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_isatty_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200009ec 	.word	0x200009ec

08006470 <_lseek_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4604      	mov	r4, r0
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	2200      	movs	r2, #0
 800647a:	4d05      	ldr	r5, [pc, #20]	; (8006490 <_lseek_r+0x20>)
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fa fa8c 	bl	800099c <_lseek>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_lseek_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_lseek_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	200009ec 	.word	0x200009ec

08006494 <memchr>:
 8006494:	4603      	mov	r3, r0
 8006496:	b510      	push	{r4, lr}
 8006498:	b2c9      	uxtb	r1, r1
 800649a:	4402      	add	r2, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	d101      	bne.n	80064a6 <memchr+0x12>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e003      	b.n	80064ae <memchr+0x1a>
 80064a6:	7804      	ldrb	r4, [r0, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	428c      	cmp	r4, r1
 80064ac:	d1f6      	bne.n	800649c <memchr+0x8>
 80064ae:	bd10      	pop	{r4, pc}

080064b0 <memmove>:
 80064b0:	4288      	cmp	r0, r1
 80064b2:	b510      	push	{r4, lr}
 80064b4:	eb01 0402 	add.w	r4, r1, r2
 80064b8:	d902      	bls.n	80064c0 <memmove+0x10>
 80064ba:	4284      	cmp	r4, r0
 80064bc:	4623      	mov	r3, r4
 80064be:	d807      	bhi.n	80064d0 <memmove+0x20>
 80064c0:	1e43      	subs	r3, r0, #1
 80064c2:	42a1      	cmp	r1, r4
 80064c4:	d008      	beq.n	80064d8 <memmove+0x28>
 80064c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ce:	e7f8      	b.n	80064c2 <memmove+0x12>
 80064d0:	4601      	mov	r1, r0
 80064d2:	4402      	add	r2, r0
 80064d4:	428a      	cmp	r2, r1
 80064d6:	d100      	bne.n	80064da <memmove+0x2a>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064e2:	e7f7      	b.n	80064d4 <memmove+0x24>

080064e4 <__malloc_lock>:
 80064e4:	4801      	ldr	r0, [pc, #4]	; (80064ec <__malloc_lock+0x8>)
 80064e6:	f7ff b99d 	b.w	8005824 <__retarget_lock_acquire_recursive>
 80064ea:	bf00      	nop
 80064ec:	200009e0 	.word	0x200009e0

080064f0 <__malloc_unlock>:
 80064f0:	4801      	ldr	r0, [pc, #4]	; (80064f8 <__malloc_unlock+0x8>)
 80064f2:	f7ff b998 	b.w	8005826 <__retarget_lock_release_recursive>
 80064f6:	bf00      	nop
 80064f8:	200009e0 	.word	0x200009e0

080064fc <_realloc_r>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	4680      	mov	r8, r0
 8006502:	4614      	mov	r4, r2
 8006504:	460e      	mov	r6, r1
 8006506:	b921      	cbnz	r1, 8006512 <_realloc_r+0x16>
 8006508:	4611      	mov	r1, r2
 800650a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	f7ff ba59 	b.w	80059c4 <_malloc_r>
 8006512:	b92a      	cbnz	r2, 8006520 <_realloc_r+0x24>
 8006514:	f7ff f9ee 	bl	80058f4 <_free_r>
 8006518:	4625      	mov	r5, r4
 800651a:	4628      	mov	r0, r5
 800651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006520:	f000 f82e 	bl	8006580 <_malloc_usable_size_r>
 8006524:	4284      	cmp	r4, r0
 8006526:	4607      	mov	r7, r0
 8006528:	d802      	bhi.n	8006530 <_realloc_r+0x34>
 800652a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800652e:	d812      	bhi.n	8006556 <_realloc_r+0x5a>
 8006530:	4621      	mov	r1, r4
 8006532:	4640      	mov	r0, r8
 8006534:	f7ff fa46 	bl	80059c4 <_malloc_r>
 8006538:	4605      	mov	r5, r0
 800653a:	2800      	cmp	r0, #0
 800653c:	d0ed      	beq.n	800651a <_realloc_r+0x1e>
 800653e:	42bc      	cmp	r4, r7
 8006540:	4622      	mov	r2, r4
 8006542:	4631      	mov	r1, r6
 8006544:	bf28      	it	cs
 8006546:	463a      	movcs	r2, r7
 8006548:	f7fe fdec 	bl	8005124 <memcpy>
 800654c:	4631      	mov	r1, r6
 800654e:	4640      	mov	r0, r8
 8006550:	f7ff f9d0 	bl	80058f4 <_free_r>
 8006554:	e7e1      	b.n	800651a <_realloc_r+0x1e>
 8006556:	4635      	mov	r5, r6
 8006558:	e7df      	b.n	800651a <_realloc_r+0x1e>
	...

0800655c <_read_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	2200      	movs	r2, #0
 8006566:	4d05      	ldr	r5, [pc, #20]	; (800657c <_read_r+0x20>)
 8006568:	602a      	str	r2, [r5, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	f7fa f9b9 	bl	80008e2 <_read>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_read_r+0x1e>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	b103      	cbz	r3, 800657a <_read_r+0x1e>
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	200009ec 	.word	0x200009ec

08006580 <_malloc_usable_size_r>:
 8006580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006584:	1f18      	subs	r0, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfbc      	itt	lt
 800658a:	580b      	ldrlt	r3, [r1, r0]
 800658c:	18c0      	addlt	r0, r0, r3
 800658e:	4770      	bx	lr

08006590 <_init>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr

0800659c <_fini>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr
